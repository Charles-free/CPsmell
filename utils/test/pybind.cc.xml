<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\Paddle-develop\paddle\fluid\pybind\pybind.cc" version="211" hash="89b836a458c135e32bd836cc31a8fad77eab2d23"><comment type="block">/* Copyright (c) 2016 PaddlePaddle Authors. All Rights Reserved.
Copyright (c) 2022 NVIDIA Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>
<comment type="line">// Avoid a problem with copysign defined in pyconfig.h on Windows.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>copysign</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>copysign</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>  <comment type="line">// NOLINT // for call_once</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/convert_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/custom_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/data_layout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/data_type_transform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/details/nan_inf_utils_detail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/executor_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/executor_gc_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/feed_fetch_method.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/feed_fetch_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/garbage_collector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/io/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/ir/coalesce_grad_tensor_pass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/ir/cost_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/ir/generate_pass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/ir/pass_builder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/lod_rank_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/lod_tensor_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/new_executor/executor_statistics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/new_executor/standalone_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/op_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/op_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/op_version_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/parallel_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/phi_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/prune.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/raw_tensor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/scope_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/selected_rows_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/tensor_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/trainer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/type_defs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/imperative/amp_auto_cast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/imperative/layer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/memory/allocation/allocator_strategy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/bfloat16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/float16.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/prim/utils/utils.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUDA</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/memory/allocation/cuda_ipc_allocator.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/memory/allocation/mmap_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/activation_op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/common_infer_shape_functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/ops_extra_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/py_func_op.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/cpu_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/device_wrapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/dynload/dynamic_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/enforce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/init_phi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/monitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/place.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/profiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/profiler/event_python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/profiler/event_tracing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/profiler/profiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/cuda_streams_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/custom_device_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/distributed_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/eager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/imperative.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/xpu_streams_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/backends/cpu/cpu_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/core/compat/convert_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/core/lod_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/utils/none.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_ASCEND</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/ascend_wrapper_py.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/auto_parallel_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/bind_cost_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/bind_fleet_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/box_helper_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/communication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/compatible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/const_value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/data_set_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/exception.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/fleet_wrapper_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/generator_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/global_value_getter_setter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/gloo_context_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/gloo_wrapper_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/heter_wrapper_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/inference_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/metrics_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/ps_gpu_wrapper_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/pybind_variant_caster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/backends/device_manager.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_NCCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RCCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/nccl_wrapper_py.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/data_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/parallel_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/place.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/protobuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/pybind.h"</cpp:file></cpp:include>  <comment type="line">// NOLINT</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/reader_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/tensor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/tensor_py.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/string/to_string.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_NCCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RCCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/nccl/nccl_gpu_common.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_HIP</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/gpu/cuda/cuda_profiler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/gpu/gpu_info.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_ASCEND_CL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/collective_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/npu/npu_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/npu/npu_profiler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_XPU</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/xpu/xpu_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/xpu/xpu_op_list.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/operators/custom_device_common_op_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/capi/capi.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/cuda_graph_with_memory_pool.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_IPU</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/ipu/ipu_backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/ipu/ipu_info.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_MLU</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/platform/device/mlu/mlu_info.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CRYPTO</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/crypto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PADDLE_WITH_PSCORE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/fleet_py.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CINN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/framework/paddle2cinn/cinn_compiler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/rpc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/eager/api/utils/global_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/imperative/layout_autotune.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/prim/utils/eager/eager_tensor_operants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/prim/utils/static/static_tensor_operants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/eager_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/api/ext/op_meta_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/api/include/operants_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/api/include/tensor_operants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/kernels/autotune/cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/phi/kernels/autotune/switch_autotune.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/stl.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>DECLARE_bool</name><argument_list>(<argument><expr><name>use_mkldnn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// disable auto conversion to list in Python</comment>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>LoDTensorArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>FetchUnmergedList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>FetchList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>FetchType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_FILE_SYMBOLS</name><argument_list>(<argument><expr><name>init_phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<namespace>namespace <name>paddle</name> <block>{
<namespace>namespace <name>pybind</name> <block>{

<decl_stmt><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>g_framework_scope_pytype</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>g_framework_lodtensorarray_pytype</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyTypeObject</name> <modifier>*</modifier></type><name>g_custom_op_kernel_ctx_pytype</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>IsCompiledWithAVX</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_AVX</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithCUDA</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithNCCL</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_NCCL</name></cpp:ifdef>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithMPI</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_MPI</name></cpp:ifdef>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">// NOTE some mpi lib can support cuda aware, support it in the future.</comment>
<function><type><name>bool</name></type> <name>IsCompiledWithMPIAWARE</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_MPI_AWARE</name></cpp:ifdef>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithROCM</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_HIP</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithAscend</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_ASCEND</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithXPU</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_XPU</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithNPU</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_ASCEND_CL</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithCustomDevice</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>device_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>device_types</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>device_types</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllCustomDeviceTypes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>device_types</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>device_types</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>device_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithIPU</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_IPU</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithMKLDNN</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MKLDNN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithCINN</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_CINN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithMLU</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MLU</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithHETERPS</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_HETERPS</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SupportsBfloat16</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MKLDNN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>MayIUse</name></name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>cpu_isa_t</name><operator>::</operator><name>avx512_core</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SupportsBfloat16FastPerformance</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MKLDNN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>MayIUse</name></name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>cpu_isa_t</name><operator>::</operator><name>avx512_bf16</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SupportsInt8</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MKLDNN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>MayIUse</name></name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>cpu_isa_t</name><operator>::</operator><name>avx2</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
          <call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>MayIUse</name></name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>cpu_isa_t</name><operator>::</operator><name>avx512f</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SupportsVNNI</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MKLDNN</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>MayIUse</name></name><argument_list>(
      <argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>cpu_isa_t</name><operator>::</operator><name>avx512_core_vnni</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithBrpc</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_DISTRIBUTE</name></cpp:ifndef>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsCompiledWithDIST</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_DISTRIBUTE</name></cpp:ifdef>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<struct>struct <name>iinfo</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int64_t</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dtype</name></decl>;</decl_stmt>

  <constructor><specifier>explicit</specifier> <name>iinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>Type</name></name> <modifier>&amp;</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>INT16</name></name></expr>:</case>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int16_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int16_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"int16"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>INT32</name></name></expr>:</case>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"int32"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>INT64</name></name></expr>:</case>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"int64"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>INT8</name></name></expr>:</case>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int8_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int8_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"int8"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>UINT8</name></name></expr>:</case>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"uint8"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
            <argument><expr><literal type="string">"the argument of paddle.iinfo can only be paddle.int8, "</literal>
            <literal type="string">"paddle.int16, paddle.int32, paddle.int64, or paddle.uint8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>finfo</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int64_t</name></type> <name>bits</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>eps</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>min</name></decl>;</decl_stmt>  <comment type="line">// lowest()</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>max</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>tiny</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>smallest_normal</name></decl>;</decl_stmt>  <comment type="line">// min()</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>resolution</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dtype</name></decl>;</decl_stmt>

  <constructor><specifier>explicit</specifier> <name>finfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>Type</name></name> <modifier>&amp;</modifier></type><name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>FP16</name></name></expr>:</case>
        <expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>float16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>epsilon</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>float16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>lowest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>float16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>smallest_normal</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>float16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tiny</name> <operator>=</operator> <name>smallest_normal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>pow</name></name><argument_list>(
            <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>float16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>digits10</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"float16"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>FP32</name></name></expr>:</case>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>COMPLEX64</name></name></expr>:</case>
        <expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>epsilon</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>lowest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>smallest_normal</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tiny</name> <operator>=</operator> <name>smallest_normal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>digits10</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"float32"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>FP64</name></name></expr>:</case>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>COMPLEX128</name></name></expr>:</case>
        <expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>epsilon</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>lowest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>smallest_normal</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tiny</name> <operator>=</operator> <name>smallest_normal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>digits10</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"float64"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>BF16</name></name></expr>:</case>
        <expr_stmt><expr><name>eps</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>bfloat16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>epsilon</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>bfloat16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>lowest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>bfloat16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>smallest_normal</name> <operator>=</operator>
            <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>bfloat16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tiny</name> <operator>=</operator> <name>smallest_normal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>pow</name></name><argument_list>(
            <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>bfloat16</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>digits10</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dtype</name> <operator>=</operator> <literal type="string">"bfloat16"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
            <argument><expr><literal type="string">"the argument of paddle.finfo can only be paddle.float32, "</literal>
            <literal type="string">"paddle.float64, paddle.float16, paddle.bfloat16"</literal>
            <literal type="string">"paddle.complex64, or paddle.complex128"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></constructor>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>GetPythonAttribute</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTE(zjl): PyObject_GetAttrString would return nullptr when attr_name</comment>
  <comment type="line">// is not inside obj, but it would also set the error flag of Python.</comment>
  <comment type="line">// If the error flag is set in C++, C++ code would not raise Exception,</comment>
  <comment type="line">// but Python would raise Exception once C++ call ends.</comment>
  <comment type="line">// To avoid unexpected Exception raised in Python, we check whether</comment>
  <comment type="line">// attribute exists before calling PyObject_GetAttrString.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Caution: PyObject_GetAttrString would increase reference count of PyObject.</comment>
  <comment type="line">// Developer should call Py_DECREF manually after the attribute is not used.</comment>
  <if_stmt><if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>T</name></type> <name>PyObjectCast</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <try>try <block>{<block_content>
    <return>return <expr><call><name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>handle</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>cast_error</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
        <argument><expr><literal type="string">"Python object is not type of %s, the real type is %s"</literal></expr></argument>,
        <argument><expr><typeid>typeid<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></typeid><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name><name>obj</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></catch></try>
</block_content>}</block></function>

<using>using <name>PyNameVarBaseMap</name> <init>= <type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>handle</name></name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>imperative</name><operator>::</operator><name>VarBase</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>GetVarBaseList</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>PyNameVarBaseMap</name> <modifier>&amp;</modifier></type><name>state_dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>imperative</name><operator>::</operator><name>VarBase</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vec_res</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>vec_res</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>state_dict</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>para</name> <operator>:</operator> <name>state_dict</name></expr></init>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_obj</name> <init>= <expr><call><name><name>para</name><operator>.</operator><name>second</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_obj</name> <operator>||</operator> <name>py_obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"The parameter [%s] to save is None"</literal></expr></argument>, <argument><expr><name><name>para</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vec_res</name><operator>.</operator><name>emplace_back</name></name><argument_list>(
        <argument><expr><call><name><name>PyObjectCast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>imperative</name><operator>::</operator><name>VarBase</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>vec_res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <specifier>inline</specifier></type> <name>GetNameList</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name> <modifier>&amp;</modifier></type><name>py_handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>vec_res</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_obj</name> <init>= <expr><call><name><name>py_handle</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// get underlying PyObject</comment>
  <comment type="line">// Python None is not nullptr in C++!</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_obj</name> <operator>||</operator> <name>py_obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
        <argument><expr><literal type="string">"The parameter list to save is None"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>vec_res</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kNameField</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_name</name> <init>=
          <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kNameField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>PADDLE_ENFORCE_NOT_NULL</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>,
                              <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                  <argument><expr><literal type="string">"The name of parameter to save is None"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>vec_res</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>PyObjectCast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
        <argument><expr><literal type="string">"The parameters to save is not a list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>vec_res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <specifier>inline</specifier></type> <name>CreateVariableIfNotExist</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name> <modifier>&amp;</modifier></type><name>py_handle</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>Scope</name></name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>Executor</name></name> <modifier>*</modifier></type><name>exe</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>vec_res</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_obj</name> <init>= <expr><call><name><name>py_handle</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// get underlying PyObject</comment>
  <comment type="line">// Python None is not nullptr in C++!</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>py_obj</name> <operator>||</operator> <name>py_obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(
        <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(<argument><expr><literal type="string">"The parameter list to set is None"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>PyList_GET_SIZE</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>vec_res</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kNameField</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kVarDescField</name> <init>= <expr><literal type="string">"desc"</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_name</name> <init>=
          <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kNameField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>PADDLE_ENFORCE_NOT_NULL</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>,
                              <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                  <argument><expr><literal type="string">"The name of parameter to set is None"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>auto</name></type> <name>para_name</name> <init>= <expr><call><name><name>PyObjectCast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>auto</name></type> <name>var</name> <init>= <expr><call><name><name>scope</name><operator>.</operator><name>FindVar</name></name><argument_list>(<argument><expr><name>para_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PADDLE_ENFORCE_NOT_NULL</name><argument_list>(<argument><expr><name>exe</name></expr></argument>,
                                <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                    <argument><expr><literal type="string">"Parameter not Initialized, "</literal>
                                    <literal type="string">"Please set argument [executor] not None "</literal>
                                    <literal type="string">"or run startup program first"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>py_var_desc</name> <init>=
            <expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name>PyList_GET_ITEM</name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>kVarDescField</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PADDLE_ENFORCE_NOT_NULL</name><argument_list>(
            <argument><expr><name>py_var_desc</name></expr></argument>,
            <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                <argument><expr><literal type="string">"The var_desc of parameter to set is None"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>var_desc</name> <init>= <expr><call><name><name>PyObjectCast</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>VarDesc</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>py_var_desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_var_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>var</name> <operator>=</operator> <cast type="const">const_cast<argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>Scope</name></name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>scope</name></expr></argument>)</argument_list></cast><operator>-&gt;</operator><call><name>Var</name><argument_list>(<argument><expr><name>para_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>auto</name> <operator>*</operator><name>tensor_temp</name> <operator>=</operator> <call><name><name>var</name><operator>-&gt;</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tensor_temp</name><operator>-&gt;</operator><name>Resize</name></name><argument_list>(<argument><expr><call><name><name>phi</name><operator>::</operator><name>make_ddim</name></name><argument_list>(<argument><expr><call><name><name>var_desc</name><operator>.</operator><name>GetShape</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tensor_temp</name><operator>-&gt;</operator><name>mutable_data</name></name><argument_list>(
            <argument><expr><call><name><name>exe</name><operator>-&gt;</operator><name>GetPlace</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>framework</name><operator>::</operator><name>TransToPhiDataType</name></name><argument_list>(<argument><expr><call><name><name>var_desc</name><operator>.</operator><name>GetDataType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
        <argument><expr><literal type="string">"The parameters to set is not a list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AssertStaticGraphAndDygraphGradMakerNoDiff</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>ops</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>pair</name> <operator>:</operator> <call><name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>has_static_grad_maker</name> <init>= <expr><operator>(</operator><name><name>pair</name><operator>.</operator><name>second</name><operator>.</operator><name>grad_op_maker_</name></name> <operator>!=</operator> <literal type="null">nullptr</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>has_dygraph_grad_maker</name> <init>=
        <expr><operator>(</operator><name><name>pair</name><operator>.</operator><name>second</name><operator>.</operator><name>dygraph_grad_op_maker_</name></name> <operator>!=</operator> <literal type="null">nullptr</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>has_static_grad_maker</name> <operator>^</operator> <name>has_dygraph_grad_maker</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>has_kernel</name> <init>=
          <expr><operator>(</operator><call><name><name>framework</name><operator>::</operator><name>OperatorWithKernel</name><operator>::</operator><name>AllOpKernels</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>has_kernel</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ops</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>pair</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>pair</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" has no kernels, skip"</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(<argument><expr><call><name><name>ops</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="boolean">true</literal></expr></argument>,
                    <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>Unimplemented</name></name><argument_list>(
                        <argument><expr><literal type="string">"OperatorWithKernel [%s] have only static graph grad "</literal>
                        <literal type="string">"maker or have only dygraph grad maker, which is not "</literal>
                        <literal type="string">"allowed"</literal></expr></argument>,
                        <argument><expr><call><name><name>string</name><operator>::</operator><name>join_strings</name></name><argument_list>(<argument><expr><name>ops</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_NCCL</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>GetNCCLVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NCCL_VERSION_CODE</name> <operator>&gt;=</operator> <literal type="number">2304</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>ver</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>PADDLE_ENFORCE_GPU_SUCCESS</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>dynload</name><operator>::</operator><name>ncclGetVersion</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ver</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>External</name></name><argument_list>(
      <argument><expr><literal type="string">"Cannot get NCCL version successfully when nccl version &lt; 2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>PYBIND11_MODULE</name><argument_list>(<argument>libpaddle</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
  <expr_stmt><expr><call><name>BindImperative</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindEager</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindEagerStringTensor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCudaStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindXpuStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindJit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCustomDevicePy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Not used, just make sure cpu_info.cc is linked.</comment>
  <expr_stmt><expr><call><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>cpu</name><operator>::</operator><name>CpuTotalPhysicalMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>UseAllocatorStrategyGFlag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>AssertStaticGraphAndDygraphGradMakerNoDiff</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="string">"C++ core of PaddlePaddle"</literal></expr>;</expr_stmt>

  <comment type="line">// using framework in this function. Since it is inside a function, it will</comment>
  <comment type="line">// not cause namespace pollution.</comment>
  <using>using <namespace>namespace <name><name>paddle</name><operator>::</operator><name>framework</name></name>;</namespace></using>  <comment type="line">// NOLINT</comment>

  <expr_stmt><expr><call><name>BindException</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>iinfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"iinfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>Type</name></name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iinfo</name><operator>::</operator><name>min</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iinfo</name><operator>::</operator><name>max</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iinfo</name><operator>::</operator><name>bits</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iinfo</name><operator>::</operator><name>dtype</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__repr__"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>iinfo</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name> <name>oss</name></type></decl>;</decl_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">"paddle.iinfo(min="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>min</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", max="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>max</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", bits="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>bits</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", dtype="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>dtype</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        <return>return <expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>finfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"finfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>VarType</name><operator>::</operator><name>Type</name></name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>min</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>max</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>bits</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"eps"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>eps</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"resolution"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>resolution</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"smallest_normal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>smallest_normal</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"tiny"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>tiny</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"dtype"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>finfo</name><operator>::</operator><name>dtype</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__repr__"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>finfo</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name> <name>oss</name></type></decl>;</decl_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">"paddle.finfo(min="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>min</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", max="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>max</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", eps="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>eps</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", resolution="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>resolution</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", smallest_normal="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>smallest_normal</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", tiny="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>tiny</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", bits="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>bits</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <literal type="string">", dtype="</literal> <operator>&lt;&lt;</operator> <name><name>a</name><operator>.</operator><name>dtype</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        <return>return <expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__set_bwd_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>SetBwdPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_bwd_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>IsBwdPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__set_fwd_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>SetFwdPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_fwd_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>IsFwdPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__set_all_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>SetAllPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_eager_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>IsEagerPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__set_eager_prim_enabled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>SetEagerPrimEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_prim_target_grad_name"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>SetTargetGradName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_num_threads"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>SetNumThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_signal_handler"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>DisableSignalHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"clear_gradients"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>imperative</name><operator>::</operator><name>VarBase</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>param_list</name></decl></parameter>,
           <parameter><decl><type><name>bool</name></type> <name>set_to_zero</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>auto</name> <name>param</name> : <name>param_list</name></type></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>param</name><operator>-&gt;</operator><name>ClearGradient</name></name><argument_list>(<argument><expr><name>set_to_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"cudnn_version"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>DnnVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"gpu_memory_available"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <name>available</name> = 0</type></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <name>total</name> = 0</type></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>GpuMemoryUsage</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>available</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>available</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_NCCL</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nccl_version"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GetNCCLVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_cuda_graph_capturing"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>IsCUDAGraphCapturing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUDA</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>gpu</name><operator>::</operator><name>CUDAGraph</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"CUDAGraph"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"begin_capture"</literal></expr></argument>,
                  <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name></type> <name>place</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>BeginCUDAGraphCapture</name></name><argument_list>(
                        <argument><expr><name>place</name></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>cudaStreamCaptureMode</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"end_capture"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>EndCUDAGraphCapture</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"gen_new_memory_pool_id"</literal></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>gpu</name><operator>::</operator><name>CUDAGraph</name><operator>::</operator><name>UniqueMemoryPoolID</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"replay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>gpu</name><operator>::</operator><name>CUDAGraph</name><operator>::</operator><name>Replay</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>gpu</name><operator>::</operator><name>CUDAGraph</name><operator>::</operator><name>Reset</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"print_to_dot_files"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>backends</name><operator>::</operator><name>gpu</name><operator>::</operator><name>CUDAGraph</name><operator>::</operator><name>PrintToDotFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"wait_device"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>Place</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>DeviceContextPool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"from_dlpack"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>capsule</name></name> <modifier>*</modifier></type><name>dltensor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>DLManagedTensor</name> <modifier>*</modifier><name>dmt</name> = reinterpret_cast<name/>&lt;<name>DLManagedTensor</name> <modifier>*</modifier>&gt;(
        <name>PyCapsule_GetPointer</name>(<name><name>dltensor</name><operator>-&gt;</operator><name>ptr</name></name>(</type></decl>)<operator>,</operator> "dltensor"</decl_stmt>)</block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PADDLE_ENFORCE_NOT_NULL</name><argument_list>(
        <argument><expr><name>dmt</name></expr></argument>,
        <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
            <argument><expr><literal type="string">"from_dlpack received an invalid capsule. "</literal>
            <literal type="string">"Note that a DLPack tensor can be consumed only once."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PyCapsule_SetName</name><argument_list>(<argument><expr><call><name><name>dltensor</name><operator>-&gt;</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"used_dltensor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DLTensor</name></type> <name>dl</name> <init>= <expr><name><name>dmt</name><operator>-&gt;</operator><name>dl_tensor</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></type> <name>tensor</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dl</name><operator>.</operator><name>device</name><operator>.</operator><name>device_type</name></name> <operator>==</operator> <name>kDLCPU</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>TensorFromDLPack</name></name><argument_list>(<argument><expr><name>dmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>dl</name><operator>.</operator><name>device</name><operator>.</operator><name>device_type</name></name> <operator>==</operator> <name>kDLGPU</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>TensorFromDLPack</name></name><argument_list>(<argument><expr><name>dmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>tensor</name></expr>;</return>
  </block_content>}</block>)</block>;</namespace>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_create_loaded_parameter"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name> <modifier>&amp;</modifier></type><name>vec_var_list</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>Executor</name> <modifier>*</modifier></type><name>executor</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>CreateVariableIfNotExist</name><argument_list>(<argument><expr><name>vec_var_list</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"save_op_version_info"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>framework</name><operator>::</operator><name>ProgramDesc</name></name> <modifier>&amp;</modifier></type><name>desc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>framework</name><operator>::</operator><name>compatible</name><operator>::</operator><name>pb</name><operator>::</operator><name>OpVersionMap</name></name> <name>pb_vmap</name><block>{<block_content><macro><name>desc</name></macro><expr><operator>.</operator><macro><name>OpVersionMap</name><argument_list>()</argument_list></macro></expr></block_content>}</block></type></decl></decl_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>compatible</name><operator>::</operator><name>SaveOpVersions</name></name><argument_list>(
        <argument><expr><call><name><name>framework</name><operator>::</operator><name>compatible</name><operator>::</operator><name>OpVersionRegistrar</name><operator>::</operator><name>GetInstance</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>GetVersionMap</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>pb_vmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_printoptions"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>kwargs</name></name> <modifier>&amp;</modifier></type><name>kwargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>print_opt</name> <operator>=</operator> <call><name><name>framework</name><operator>::</operator><name>PrintOptions</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>kwargs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"precision"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>print_opt</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="string">"precision"</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>kwargs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"threshold"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>print_opt</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="string">"threshold"</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>kwargs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"edgeitems"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>print_opt</name><operator>.</operator><name>edgeitems</name></name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="string">"edgeitems"</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>kwargs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"linewidth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>print_opt</name><operator>.</operator><name>linewidth</name></name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="string">"linewidth"</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>kwargs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"sci_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>print_opt</name><operator>.</operator><name>sci_mode</name></name> <operator>=</operator> <name><name>kwargs</name><index>[<expr><literal type="string">"sci_mode"</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Set printoptions: precision="</literal> <operator>&lt;&lt;</operator> <name><name>print_opt</name><operator>.</operator><name>precision</name></name>
            <operator>&lt;&lt;</operator> <literal type="string">", threshold="</literal> <operator>&lt;&lt;</operator> <name><name>print_opt</name><operator>.</operator><name>threshold</name></name>
            <operator>&lt;&lt;</operator> <literal type="string">", edgeitems="</literal> <operator>&lt;&lt;</operator> <name><name>print_opt</name><operator>.</operator><name>edgeitems</name></name>
            <operator>&lt;&lt;</operator> <literal type="string">", linewidth="</literal> <operator>&lt;&lt;</operator> <name><name>print_opt</name><operator>.</operator><name>linewidth</name></name>
            <operator>&lt;&lt;</operator> <literal type="string">", sci_mode="</literal> <operator>&lt;&lt;</operator> <name><name>print_opt</name><operator>.</operator><name>sci_mode</name></name></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"broadcast_shape"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x_dim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>y_dim</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>phi</name><operator>::</operator><name>vectorize</name></name><argument_list>(<argument><expr><call><name><name>operators</name><operator>::</operator><name>details</name><operator>::</operator><name>BroadcastTwoDims</name></name><argument_list>(
            <argument><expr><call><name><name>phi</name><operator>::</operator><name>make_ddim</name></name><argument_list>(<argument><expr><name>x_dim</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>phi</name><operator>::</operator><name>make_ddim</name></name><argument_list>(<argument><expr><name>y_dim</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_append_python_callable_object_and_return_id"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>py_obj</name></decl></parameter>)</parameter_list> -&gt; <type><name>size_t</name></type> <block>{<block_content>
        <return>return <expr><call><name><name>paddle</name><operator>::</operator><name>operators</name><operator>::</operator><name>AppendPythonCallableObjectAndReturnId</name></name><argument_list>(<argument><expr><name>py_obj</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_get_use_default_grad_op_desc_maker_ops"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <return>return <expr><call><name><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetUseDefaultGradOpDescMakerOps</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_get_all_register_op_kernels"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
            <name>all_kernels_info</name></type></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lib</name> <operator>==</operator> <literal type="string">"fluid"</literal> <operator>||</operator> <name>lib</name> <operator>==</operator> <literal type="string">"all"</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>all_kernels</name> <operator>=</operator>
              <call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>OperatorWithKernel</name><operator>::</operator><name>AllOpKernels</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>kernel_pair</name> <operator>:</operator> <name>all_kernels</name></expr></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name> <name>op_type</name> = <name><name>kernel_pair</name><operator>.</operator><name>first</name></name></type></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>kernel_types</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>info_pair</name> <operator>:</operator> <name><name>kernel_pair</name><operator>.</operator><name>second</name></name></expr></init>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>OpKernelType</name></name> <name>kernel_type</name> = <name><name>info_pair</name><operator>.</operator><name>first</name></name></type></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>kernel_types</name><operator>.</operator><name>emplace_back</name></name><argument_list>(
                  <argument><expr><call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>KernelTypeToString</name></name><argument_list>(<argument><expr><name>kernel_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>all_kernels_info</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>op_type</name></expr></argument>, <argument><expr><name>kernel_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lib</name> <operator>==</operator> <literal type="string">"phi"</literal> <operator>||</operator> <name>lib</name> <operator>==</operator> <literal type="string">"all"</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>auto</name> <name>phi_kernels</name> = <name><name>phi</name><operator>::</operator><name>KernelFactory</name><operator>::</operator><name>Instance</name></name>(</type></decl>).kernels(</decl_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
          <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>kernel_pair</name> <operator>:</operator> <name>phi_kernels</name></expr></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name> <name>op_type</name> = <name><name>phi</name><operator>::</operator><name>TransToFluidOpName</name></name>(<name><name>kernel_pair</name><operator>.</operator><name>first</name></name></type></decl>);</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>kernel_types</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>info_pair</name> <operator>:</operator> <name><name>kernel_pair</name><operator>.</operator><name>second</name></name></expr></init>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name><name>framework</name><operator>::</operator><name>OpKernelType</name></name> <name>kernel_type</name> =
                  <name><name>framework</name><operator>::</operator><name>TransPhiKernelKeyToOpKernelType</name></name>(<name><name>info_pair</name><operator>.</operator><name>first</name></name></type></decl>);</decl_stmt>
              <decl_stmt><decl><type><name>auto</name> <name>kernel_type_str</name> = <name><name>framework</name><operator>::</operator><name>KernelTypeToString</name></name>(<name>kernel_type</name></type></decl>);</decl_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>all_kernels_info</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><name><name>all_kernels_info</name><index>[<expr><name>op_type</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><name><name>all_kernels_info</name><index>[<expr><name>op_type</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><name>kernel_type_str</name></expr></argument>)</argument_list></call> <operator>==</operator>
                    <name><name>all_kernels_info</name><index>[<expr><name>op_type</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name><name>all_kernels_info</name><index>[<expr><name>op_type</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>kernel_type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>kernel_types</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>kernel_type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>kernel_types</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>all_kernels_info</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>op_type</name></expr></argument>, <argument><expr><name>kernel_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></lambda></expr></argument>

        <return>return <expr><name>all_kernels_info</name></expr>;</return></argument_list></call></expr></expr_stmt>
      }</block></namespace><operator>,</operator>
      <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="string">"all"</literal></expr><operator>,</operator>
      <expr><literal type="string">R"DOC(
           Return the registered kernels in paddle.

           Args:
               lib[string]: the libarary, could be 'phi', 'fluid' and 'all'.
           )DOC"</literal></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_get_registered_phi_kernels"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>kernel_registered_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>
            <name>all_kernels_info</name></type></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name> <name>phi_kernels</name> = <name><name>phi</name><operator>::</operator><name>KernelFactory</name><operator>::</operator><name>Instance</name></name>(</type></decl>).kernels(</decl_stmt>)</block_content></block></lambda></expr></argument>;
        for <argument><expr><operator>(</operator><name>auto</name> <operator>&amp;</operator><name>kernel_pair</name> <operator>:</operator> <name>phi_kernels</name><operator>)</operator> <block>{
          <expr><name>auto</name> <name>kernel_name</name> <operator>=</operator> <name><name>kernel_pair</name><operator>.</operator><name>first</name></name></expr>;
          <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>kernel_keys</name></expr>;
          <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>info_pair</name> <operator>:</operator> <name><name>kernel_pair</name><operator>.</operator><name>second</name></name></expr></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name> <name>get_function_kernel</name> =
                <name>kernel_registered_type</name> == "function" <modifier>&amp;&amp;</modifier>
                <name><name>info_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>GetKernelRegisteredType</name></name>(</type></decl>) ==
                    phi::KernelRegisteredType::FUNCTION;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name> <name>get_structure_kernel</name> =
                <name>kernel_registered_type</name> == "structure" <modifier>&amp;&amp;</modifier>
                <name><name>info_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>GetKernelRegisteredType</name></name>(</type></decl>) ==
                    phi::KernelRegisteredType::STRUCTURE;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>kernel_registered_type</name> <operator>==</operator> <literal type="string">"all"</literal> <operator>||</operator> <name>get_function_kernel</name> <operator>||</operator>
                <name>get_structure_kernel</name></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name> <name>stream</name></type></decl>;</decl_stmt>
              <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>info_pair</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
              <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <name>kernel_key_str</name> = <name><name>stream</name><operator>.</operator><name>str</name></name>(</type></decl>);</decl_stmt>
              <if_stmt><if>if <condition>(<expr><call><name><name>all_kernels_info</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>kernel_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name> <name>kernel_exist</name> =
                    <name><name>std</name><operator>::</operator><name>find</name></name>(<name><name>all_kernels_info</name><index>[<expr><name>kernel_name</name></expr>]</index></name>.<name>begin</name>(</type></decl>)<operator>,</operator>
                              all_kernels_info[kernel_name].end(</decl_stmt>)</block_content></block><operator>,</operator>
                              <expr_stmt><expr><name>kernel_key_str</name></expr></expr_stmt></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block></expr></argument>)</argument_list></call> <operator>!=</operator>
                    <name><name>all_kernels_info</name><index>[<expr><name>kernel_name</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kernel_exist</name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name><name>all_kernels_info</name><index>[<expr><name>kernel_name</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>kernel_key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
              } else <block>{<block_content>
                <expr_stmt><expr><call><name><name>kernel_keys</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>kernel_key_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block>
            }
          }
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>kernel_keys</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>all_kernels_info</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>kernel_name</name></expr></argument>, <argument><expr><name>kernel_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        }

        return <expr_stmt><expr><name>all_kernels_info</name></expr>;</expr_stmt>
      },
      <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"kernel_registered_type"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="string">"function"</literal></expr><operator>,</operator>
      <expr><literal type="string">R"DOC(
           Return the registered kernels in phi.

           Args:
               kernel_registered_type[string]: the libarary, could be 'function', 'structure', and 'all'.
           )DOC"</literal></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

  <comment type="line">// NOTE(Aganlengzi): KernelFactory static instance is initialized BEFORE</comment>
  <comment type="line">// plugins are loaded for custom kernels, but de-initialized AFTER they are</comment>
  <comment type="line">// unloaded. We need manually clear symbols(may contain plugins' symbols)</comment>
  <comment type="line">// stored in this static instance to avoid illegal memory access.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"clear_kernel_factory"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>phi</name><operator>::</operator><name>KernelFactory</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>kernels</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"clear_device_manager"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// NOTE(zjl): ctest would load environment variables at the beginning even</comment>
  <comment type="line">// though we have not `import paddle.fluid as fluid`. So we add this API</comment>
  <comment type="line">// to enable eager deletion mode in unittest.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_eager_deletion_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>SetEagerDeletionMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_fuse_parameter_group_size"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>SetFuseParameterGroupsSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_fuse_parameter_memory_size"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>SetFuseParameterMemorySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>add_object</name></name><argument_list>(<argument><expr><literal type="string">"_cleanup"</literal></expr></argument>,
               <argument><expr><call><name><name>py</name><operator>::</operator><name>capsule</name></name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>ScopePool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_paddle_lib_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>dynload</name><operator>::</operator><name>SetPaddleLibPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_current_thread_name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>SetCurrentThreadName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_promote_types_if_complex_exists"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>PromoteTypesIfComplexExists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name></expr></argument>&gt;</argument_list></name></type> <name>custom_op_kernel_ctx</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"CustomOpKernelContext"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC()DOC"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_custom_op_kernel_ctx_pytype</name> <operator>=</operator>
      <cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>PyTypeObject</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>custom_op_kernel_ctx</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>custom_op_kernel_ctx</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_inputs"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name> <modifier>&amp;</modifier></type><name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier><name>obj</name> = <name><name>input</name><operator>.</operator><name>ptr</name></name>(</type></decl>);</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackInputs</name></name><argument_list>(
                   <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><call><name>CastPyArg2VectorOfTensor</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
               <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackInput</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><call><name>CastPyArg2Tensor</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_outputs"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name> <modifier>&amp;</modifier></type><name>outputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name>PyObject</name> <modifier>*</modifier><name>obj</name> = <name><name>outputs</name><operator>.</operator><name>ptr</name></name>(</type></decl>);</decl_stmt>
             <if_stmt><if>if <condition>(<expr><call><name>PyList_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyTuple_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
               <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackOutputs</name></name><argument_list>(
                   <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><call><name>CastPyArg2VectorOfTensor</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
               <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackOutput</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><call><name>CastPyArg2Tensor</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></else></if_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"add_attr"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>CustomOpKernelContext</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>EmplaceBackAttr</name></name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Variable</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Variable"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC(Variable Class.

All parameter, weight, gradient are variables in Paddle.
)DOC"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_int"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>var</name><operator>.</operator><name>IsType</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_int"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> -&gt; <type><name>void</name></type> <block>{<block_content> <expr_stmt><expr><operator>*</operator><call><name><name>var</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_int"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>)</parameter_list> -&gt; <type><name>int</name></type> <block>{<block_content> <return>return <expr><call><name><name>var</name><operator>.</operator><name>Get</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_float"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>var</name><operator>.</operator><name>IsType</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_float"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>)</parameter_list> -&gt; <type><name>void</name></type> <block>{<block_content>
             <expr_stmt><expr><operator>*</operator><call><name><name>var</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_float"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variable</name> <modifier>&amp;</modifier></type><name>var</name></decl></parameter>)</parameter_list> -&gt; <type><name>float</name></type> <block>{<block_content> <return>return <expr><call><name><name>var</name><operator>.</operator><name>Get</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_tensor"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <modifier>*</modifier></type> <block>{<block_content>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_bytes"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><call><name><name>self</name><operator>.</operator><name>IsType</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
               <return>return <expr><call><name><name>py</name><operator>::</operator><name>bytes</name></name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
             </block_content>}</block></if> <else>else <block>{<block_content>
               <return>return <expr><call><name><name>py</name><operator>::</operator><name>bytes</name></name><argument_list>(
                   <argument><expr><operator>*</operator><operator>(</operator><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>RawTensor</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
             </block_content>}</block></else></if_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_string_list"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>str_list</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><operator>*</operator><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>Strings</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>=</operator> <name>str_list</name></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_vocab"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>wstring</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>int32_t</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vocab</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><operator>*</operator><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>Vocab</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>=</operator> <name>vocab</name></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_string_tensor"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>Strings</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_map_tensor"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>Vocab</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_lod_rank_table"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>LoDRankTable</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_selected_rows"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>phi</name><operator>::</operator><name>SelectedRows</name></name> <modifier>*</modifier></type> <block>{<block_content>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>phi</name><operator>::</operator><name>SelectedRows</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_lod_tensor_array"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>LoDTensorArray</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_fetch_list"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name>FetchList</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_NCCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RCCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_communicator"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>platform</name><operator>::</operator><name>Communicator</name></name> <modifier>*</modifier></type> <block>{<block_content>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>Communicator</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_reader"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>framework</name><operator>::</operator><name>ReaderHolder</name></name> <modifier>*</modifier></type> <block>{<block_content>
            <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(<argument><expr><call><name><name>self</name><operator>.</operator><name>IsType</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>ReaderHolder</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><literal type="boolean">true</literal></expr></argument>,
                              <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                  <argument><expr><literal type="string">"The variable is not type of ReaderHolder."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>ReaderHolder</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_scope"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name>Scope</name> <modifier>*</modifier></type> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name> <name>scope_vec</name> = <name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>Scope</name></name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>(</type></decl>);</decl_stmt>
            <expr_stmt><expr><call><name>PADDLE_ENFORCE_GT</name><argument_list>(
                <argument><expr><call><name><name>scope_vec</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                    <argument><expr><literal type="string">"The size of scope_vec should be greater than 0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>scope_vec</name><operator>-&gt;</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_scope"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Variable</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>scope_vec</name> = <name><name>self</name><operator>.</operator><name>GetMutable</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>Scope</name></name> <operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name>(</type></decl>);</decl_stmt>
        <expr_stmt><expr><call><name><name>scope_vec</name><operator>-&gt;</operator><name>emplace_back</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>BindReader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name></expr></argument>&gt;</argument_list></name></type> <name>_Scope</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_Scope"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC(
    Scope is an association of a name to Variable. All variables belong to Scope.

    Variables in a parent scope can be retrieved from local scope.

    You need to specify a scope to run a Net, i.e., `exe.Run(&amp;scope)`.
    One net can run in different scopes and update different variable in the
    scope.

    You can create var in a scope and get it from the scope.

    Examples:
        .. code-block:: python

          import paddle.fluid as fluid
          # create tensor from a scope and set value to it.
          param = scope.var('Param').get_tensor()
          param_array = np.full((height, row_numel), 5.0).astype("float32")
          param.set(param_array, place)

        )DOC"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_framework_scope_pytype</name> <operator>=</operator> <cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>PyTypeObject</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>_Scope</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>_Scope</name>
      <operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_remove_from_pool"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Scope</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>ScopePool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"var"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Scope</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>name</name></decl></parameter>)</parameter_list> -&gt; <type><name>Variable</name> <modifier>*</modifier></type> <block>{<block_content>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>Var</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="string">R"DOC(
           Find or create variable named :code:`name` in the current scope.

           If the variable named :code:`name` does not exist in the
           current scope, the variable would be created. Otherwise,
           return the existing variable.

           Args:
               name (str): the variable name.

           Returns:
               out (core.Variable): the found or created variable.
           )DOC"</literal></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"find_var"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>FindVar</name></name></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><literal type="string">R"DOC(
           Find variable named :code:`name` in the current scope or
           its parent scope. Return None if not found.

           Args:
               name (str): the variable name.

           Returns:
               out (core.Variable|None): the found variable or None.
           )DOC"</literal></expr></argument>,
           <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>Size</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"erase"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>EraseVars</name></name></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"names"</literal></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><literal type="string">R"DOC(
           Find variable named :code:`name` in the current scope or
           its parent scope. Return None if not found.

           Args:
               name (str): the variable names to be erase.

           Returns:
               None
           )DOC"</literal></expr></argument>,
           <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"new_scope"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Scope</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name>Scope</name> <modifier>*</modifier></type> <block>{<block_content> <return>return <expr><operator>&amp;</operator><call><name><name>self</name><operator>.</operator><name>NewScope</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><literal type="string">R"DOC(
           Create a new sub-scope of the current scope.

           Returns:
               out (core._Scope): the created sub-scope.
           )DOC"</literal></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"drop_kids"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>DropKids</name></name></expr></argument>,
           <argument><expr><literal type="string">R"DOC(
           Delete all sub-scopes of the current scope.
           )DOC"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"_kids"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>kids</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"_can_reuesd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>CanReuesd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Scope</name><operator>::</operator><name>SetCanReuesd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"Scope"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> -&gt; <type><name>Scope</name> <modifier>*</modifier></type> <block>{<block_content>
        <expr_stmt><expr><name>auto</name> <operator>*</operator><name>s</name> <operator>=</operator> <operator>new</operator> <call><name>Scope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ScopePool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Insert</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Scope</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><literal type="string">R"DOC(
        Create a new scope.

        Returns:
            out (core._Scope): the created scope.
        )DOC"</literal></expr></argument>,
      <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line" format="doxygen">//! @note: Be careful! PyBind will return std::string as an unicode, not</comment>
  <comment type="line" format="doxygen">//! Python str. If you want a str object, you should cast them in Python.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_all_op_protos"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>bytes</name></name></expr></argument>&gt;</argument_list></name></type> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>bytes</name></name></expr></argument>&gt;</argument_list></name> <name>ret_values</name></type></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>iter</name> <operator>:</operator> <call><name><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>info</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>info</name><operator>.</operator><name>HasOpProtoAndChecker</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <name>str</name></type></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(
            <argument><expr><call><name><name>info</name><operator>.</operator><name>Proto</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SerializeToString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="boolean">true</literal></expr></argument>,
            <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>Fatal</name></name><argument_list>(
                <argument><expr><literal type="string">"Serialize OpProto Error. This could be a bug of Paddle."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret_values</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret_values</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"get_all_op_names"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>lib</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>op_names</name></type></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>iter</name> <operator>:</operator> <call><name><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>op_names</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>lib</name> <operator>==</operator> <literal type="string">"phi"</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>ops_with_phi_kernel</name></type></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>op_name</name> : <name>op_names</name></type></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>phi</name><operator>::</operator><name>KernelFactory</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>HasCompatiblePhiKernel</name><argument_list>(
                    <argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>ops_with_phi_kernel</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          <return>return <expr><name>ops_with_phi_kernel</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lib</name> <operator>==</operator> <literal type="string">"fluid"</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>ops_with_fluid_kernel</name></type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>auto</name> <name>all_fluid_op_kernels</name> =
              <name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>OperatorWithKernel</name><operator>::</operator><name>AllOpKernels</name></name>(</type></decl>);</decl_stmt>
          <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>op_name</name> : <name>op_names</name></type></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>all_fluid_op_kernels</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>op_name</name></expr></argument>)</argument_list></call> <operator>!=</operator>
                <call><name><name>all_fluid_op_kernels</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>ops_with_fluid_kernel</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          <return>return <expr><name>ops_with_fluid_kernel</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>op_names</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"lib"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="string">"all"</literal></expr></argument>,
      <argument><expr><literal type="string">R"DOC(
      Return the operator names in paddle.

      Args:
          lib[string]: the library contains corresponding OpKernel, could be 'phi', 'fluid' and 'all'. Default value is 'all'.
  )DOC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_op_attrs_default_value"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>byte_name</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>AttributeMap</name></name></type> <block>{<block_content>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <name>op_type</name> = <name>byte_name</name></type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>AttributeMap</name></name> <name>res</name></type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>auto</name> <name>info</name> = <name><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name>(</type></decl>).GetNullable(op_type</decl_stmt>)</block_content></block></lambda></expr></argument>;
          if <argument><expr><operator>(</operator><name>info</name> <operator>!=</operator> <literal type="null">nullptr</literal><operator>)</operator> <block>{
            <if_stmt><if>if <condition>(<expr><call><name><name>info</name><operator>-&gt;</operator><name>HasOpProtoAndChecker</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>auto</name> <name>op_checker</name> = <name><name>info</name><operator>-&gt;</operator><name>Checker</name></name>(</type></decl>);</decl_stmt>
              <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>op_checker</name><operator>-&gt;</operator><name>GetDefaultAttrsMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
          }
          return res</block><empty_stmt>;</empty_stmt></if></if_stmt>
        }</block></expr></argument></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"get_op_extra_attrs"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>op_type</name></decl></parameter>)</parameter_list>
          -&gt; <type><specifier>const</specifier> <name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>AttributeMap</name></name> <modifier>&amp;</modifier></type> <block>{<block_content>
        <return>return <expr><call><name><name>operators</name><operator>::</operator><name>ExtraInfoUtils</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetExtraAttrsMap</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"get_attrtibute_type"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>op_type</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>attr_name</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>AttrType</name></name></type> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>defalut_val</name> =
            <name><name>operators</name><operator>::</operator><name>ExtraInfoUtils</name><operator>::</operator><name>Instance</name></name>(</type></decl>).GetExtraAttrsMap(op_type</decl_stmt>)</block_content>.at(
                attr_name</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>proto</name><operator>::</operator><name>AttrType</name></name></expr></argument>&gt;</argument_list><argument_list>(
            <argument><expr><call><name><name>defalut_val</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></cast></expr>;</return>
      })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_add_skip_comp_ops"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>AddSkipCompOps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_remove_skip_comp_ops"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>RemoveSkipCompOps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_grad_op_desc"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpDesc</name> <modifier>&amp;</modifier></type><name>op_desc</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>no_grad_set</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockDesc</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>grad_sub_block</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>grad_to_var</name></type></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>auto</name> <name>op_info</name> = <name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name>(</type></decl>).Get(op_desc.Type(</decl_stmt>)</block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>auto</name></type> <name>grad_op_maker</name> <init>= <expr><call><name><name>op_info</name><operator>.</operator><name>GradOpMaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>auto</name></type> <name>grad_comp_op_maker</name> <init>= <expr><call><name><name>op_info</name><operator>.</operator><name>CompGradOpMaker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>grad_op_maker</name> <operator>==</operator> <literal type="null">nullptr</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>grad_comp_op_maker</name> <operator>==</operator> <literal type="null">nullptr</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// Normally, proto_ should not be null, except some special</comment>
            <comment type="line">// operators, such as LeaklyReluDoubleGrad op.</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>type</name> <init>=
                <expr><ternary><condition><expr><name><name>op_info</name><operator>.</operator><name>proto_</name></name></expr> ?</condition><then> <expr><call><name><name>op_info</name><operator>.</operator><name>proto_</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>NotFound</name></name><argument_list>(
                <argument><expr><literal type="string">"Neither operator %s's GradOpMaker nor CompGradOpMaker has "</literal>
                <literal type="string">"been registered.\nPlease check whether (%s) operator has "</literal>
                <literal type="string">"gradient operator.\nIf not, please set stop_gradient to be "</literal>
                <literal type="string">"True for its input and output variables using "</literal>
                <literal type="string">"var.stop_gradient=True."</literal></expr></argument>,
                <argument><expr><call><name><name>type</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>type</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="line">// In PrimEnabled mode, the priority of CompGradOpMaker is greater</comment>
          <comment type="line">// than GradCompMaker as we need split first-order grad operator into</comment>
          <comment type="line">// primitive operators for compiler. In PrimDisabled mode, the</comment>
          <comment type="line">// priority of CompGradOpMaker is less than GradCompMaker for better</comment>
          <comment type="line">// performance.</comment>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OpDesc</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>grad_op_descs</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>auto</name></type> <name>need_skip</name> <init>=
              <expr><call><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>CheckSkipCompOps</name></name><argument_list>(<argument><expr><call><name><name>op_desc</name><operator>.</operator><name>Type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"need skip: "</literal> <operator>&lt;&lt;</operator> <name>need_skip</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>PrimCommonUtils</name><operator>::</operator><name>IsBwdPrimEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>grad_comp_op_maker</name> <operator>!=</operator> <literal type="null">nullptr</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>need_skip</name><operator>)</operator></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Runing composite fun for "</literal> <operator>&lt;&lt;</operator> <call><name><name>op_desc</name><operator>.</operator><name>Type</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>grad_op_descs</name> <operator>=</operator> <call><name>grad_comp_op_maker</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>,
                                                 <argument><expr><name>no_grad_set</name></expr></argument>,
                                                 <argument><expr><operator>&amp;</operator><name>grad_to_var</name></expr></argument>,
                                                 <argument><expr><call><name><name>op_desc</name><operator>.</operator><name>Block</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>grad_sub_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>grad_op_descs</name> <operator>=</operator> <call><name>grad_op_maker</name><argument_list>(
                  <argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>no_grad_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>grad_to_var</name></expr></argument>, <argument><expr><name>grad_sub_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>grad_op_maker</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>grad_op_descs</name> <operator>=</operator> <call><name>grad_op_maker</name><argument_list>(
                  <argument><expr><name>op_desc</name></expr></argument>, <argument><expr><name>no_grad_set</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>grad_to_var</name></expr></argument>, <argument><expr><name>grad_sub_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name>grad_op_descs</name> <operator>=</operator> <call><name>grad_comp_op_maker</name><argument_list>(<argument><expr><name>op_desc</name></expr></argument>,
                                                 <argument><expr><name>no_grad_set</name></expr></argument>,
                                                 <argument><expr><operator>&amp;</operator><name>grad_to_var</name></expr></argument>,
                                                 <argument><expr><call><name><name>op_desc</name><operator>.</operator><name>Block</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>grad_sub_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></else></if_stmt>

          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OpDesc</name> <modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>grad_op_desc_ptrs</name><argument_list>(<argument><expr><call><name><name>grad_op_descs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>transform</name></name><argument_list>(
              <argument><expr><call><name><name>grad_op_descs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>grad_op_descs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>grad_op_desc_ptrs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OpDesc</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>p</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>grad_op_desc_ptrs</name></expr></argument>, <argument><expr><name>grad_to_var</name></expr></argument>)</argument_list></call></expr>;</return>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"has_comp_grad_op_maker"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>HasCompGradOpMaker</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"has_grad_op_maker"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>HasGradOpMaker</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"has_non_empty_grad_op_maker"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>HasNonEmptyGradOpMaker</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"has_infer_inplace"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>op_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>op_type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>HasInferInplace</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"infer_no_need_buffer_slots"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>op_type</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>VariableNameMap</name></name> <modifier>&amp;</modifier></type><name>inputs</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>VariableNameMap</name></name> <modifier>&amp;</modifier></type><name>outputs</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>AttributeMap</name></name> <modifier>&amp;</modifier></type><name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>auto</name> <name>infer_func</name> = <name><name>framework</name><operator>::</operator><name>OpInfoMap</name><operator>::</operator><name>Instance</name></name>(</type></decl>)
                                .Get(op_type</decl_stmt>)</block_content>
                                .NoNeedBufferVarsInferer(</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>infer_func</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>infer_func</name><argument_list>(<argument><expr><name>inputs</name></expr></argument>, <argument><expr><name>outputs</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>empty</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>empty</name></expr>;</return>
          </block_content>}</block></else></if_stmt>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"prune"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProgramDesc</name> <modifier>&amp;</modifier></type><name>origin</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>feeded_var_names</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>array</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>targets</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>ProgramDesc</name> <name>prog_with_targets</name>(<name>origin</name></type></decl>);</decl_stmt>

          <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>t</name> : <name>targets</name></type></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>prog_with_targets</name><operator>.</operator><name>MutableBlock</name></name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Op</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>SetIsTarget</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <decl_stmt><decl><type><name><name>proto</name><operator>::</operator><name>ProgramDesc</name></name> <name>pruned_desc</name></type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>auto</name> <name>pruned_origin_block_id_map</name> =
              <name>Prune</name>(<modifier>*</modifier><name><name>prog_with_targets</name><operator>.</operator><name>Proto</name></name>(</type></decl>)<operator>,</operator> feeded_var_names<operator>,</operator> &amp;pruned_desc</decl_stmt>)</block_content></block></lambda></expr></argument>;
          return <argument><expr><call><name><name>std</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name>ProgramDesc</name><argument_list>(<argument><expr><name>pruned_desc</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>pruned_origin_block_id_map</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"prune_backward"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>framework</name><operator>::</operator><name>ProgramDesc</name></name> <modifier>&amp;</modifier></type><name>program</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>PruneBackward</name><argument_list>(<argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><literal type="string">R"DOC(
             Prune the backward part of a program, mostly called in
             program.clone(for_test=True).

            Args:
                   program (ProgramDesc): The original program.

             Returns:
                   tuple(ProgramDesc, map&lt;int, int&gt;): The first part is
                   the pruned program desc, and the second part is a map
                   which contains the id pair of pruned block and corresponding
                   origin block.
           )DOC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_serialize_comile_key"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>compilation_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CINN</name></cpp:ifdef>
    <decl_stmt><decl><type><name>auto</name> <name>compiler</name> = <name><name>framework</name><operator>::</operator><name>paddle2cinn</name><operator>::</operator><name>CinnCompiler</name><operator>::</operator><name>GetInstance</name></name>(</type></decl>);</decl_stmt>
    <decl_stmt><decl><type><name>auto</name> <name>s</name> = <name><name>compiler</name><operator>-&gt;</operator><name>SerializeKey</name></name>(<name>compilation_key</name></type></decl>);</decl_stmt>
    <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(
                 <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                 <argument><expr><literal type="string">"Cannot get compilation key in non-CINN version, "</literal>
                 <literal type="string">"Please recompile or reinstall Paddle with CINN support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"empty_var_name"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>framework</name><operator>::</operator><name>kEmptyVarName</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"grad_var_suffix"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>framework</name><operator>::</operator><name>kGradVarSuffix</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def_submodule</name></name><argument_list>(
       <argument><expr><literal type="string">"var_names"</literal></expr></argument>,
       <argument><expr><literal type="string">"The module will return special predefined variable name in Paddle"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"empty"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>kEmptyVarName</name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>kTempVarName</name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"DeviceContext"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>,
                  <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
                      -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
                    <expr_stmt><expr><name>auto</name> <operator>*</operator><name>context</name> <operator>=</operator> <operator>new</operator> <call><name><name>phi</name><operator>::</operator><name>CPUContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetAllocator</name></name><argument_list>(
                        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostAllocator</name></name><argument_list>(
                        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetZeroAllocator</name></name><argument_list>(
                        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostZeroAllocator</name></name><argument_list>(
                        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>context</name></expr>;</return>
                  </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(
          <argument><expr><literal type="string">"create"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>XPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
              -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_XPU</name></cpp:ifndef>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                <argument><expr><literal type="string">"Cannot use XPUPlace in CPU/GPU version, "</literal>
                <literal type="string">"Please recompile or reinstall Paddle with XPU support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>auto</name><operator>*</operator> <name>context</name> <operator>=</operator> <operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>XPUDeviceContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetZeroAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostZeroAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>context</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(
          <argument><expr><literal type="string">"create"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MLUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
              -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_MLU</name></cpp:ifndef>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                <argument><expr><literal type="string">"Cannot use MLUPlace in CPU/GPU version, "</literal>
                <literal type="string">"Please recompile or reinstall Paddle with MLU support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <return>return <expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MLUDeviceContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(
          <argument><expr><literal type="string">"create"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>NPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
              -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_ASCEND_CL</name></cpp:ifndef>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                <argument><expr><literal type="string">"Cannot use NPUPlace in CPU/GPU/XPU version, "</literal>
                <literal type="string">"Please recompile or reinstall Paddle with NPU support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <return>return <expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>NPUDeviceContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>,
                  <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CustomPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
                      -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifndef>
                    <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                        <argument><expr><literal type="string">"Cannot use CustomPlace in CPU/GPU/XPU version, "</literal>
                        <literal type="string">"Please recompile or reinstall Paddle with "</literal>
                        <literal type="string">"CustomDevice support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <return>return <expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CustomDeviceContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                  </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(
          <argument><expr><literal type="string">"create"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CUDAPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
              -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                <argument><expr><literal type="string">"Cannot use CUDAPlace in CPU only version, "</literal>
                <literal type="string">"Please recompile or reinstall Paddle with CUDA support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>auto</name><operator>*</operator> <name>context</name> <operator>=</operator> <operator>new</operator> <call><name><name>phi</name><operator>::</operator><name>GPUContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>-&gt;</operator><name>stream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetZeroAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetHostZeroAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>GetZeroAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>SetPinnedAllocator</name></name><argument_list>(
        <argument><expr><call><name><name>paddle</name><operator>::</operator><name>memory</name><operator>::</operator><name>allocation</name><operator>::</operator><name>AllocatorFacade</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>GetAllocator</name><argument_list>(<argument><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CUDAPinnedPlace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>-&gt;</operator><name>PartialInitWithAllocator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>context</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(
          <argument><expr><literal type="string">"create"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CUDAPinnedPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list>
              -&gt; <type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DeviceContext</name></name> <modifier>*</modifier></type> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>PermissionDenied</name></name><argument_list>(
                <argument><expr><literal type="string">"Cannot use CUDAPinnedPlace in CPU only version, "</literal>
                <literal type="string">"Please recompile or reinstall Paddle with CUDA support."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                  <return>return <expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>CUDAPinnedDeviceContext</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_NCCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RCCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>Communicator</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Communicator"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_all_device_type"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>device_types</name></type></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><name>device_types</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllDeviceTypes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>string</name><operator>::</operator><name>Sprintf</name></name><argument_list>(
              <argument><expr><literal type="string">"Cannot use get_all_device_type because you have installed"</literal>
              <literal type="string">"CPU/GPU version PaddlePaddle.\n"</literal>
              <literal type="string">"If you want to use get_all_device_type, please try to install"</literal>
              <literal type="string">"CustomDevice version "</literal>
              <literal type="string">"PaddlePaddle by: pip install paddlepaddle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>device_types</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_all_custom_device_type"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>device_types</name></type></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><name>device_types</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllCustomDeviceTypes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>string</name><operator>::</operator><name>Sprintf</name></name><argument_list>(
              <argument><expr><literal type="string">"Cannot use get_all_custom_device_type because you have installed"</literal>
              <literal type="string">"CPU/GPU version PaddlePaddle.\n"</literal>
              <literal type="string">"If you want to use get_all_custom_device_type, please try to "</literal>
              <literal type="string">"install CustomDevice version "</literal>
              <literal type="string">"PaddlePaddle by: pip install paddlepaddle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>device_types</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_available_device"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>devices</name></type></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><name>devices</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllDeviceList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>string</name><operator>::</operator><name>Sprintf</name></name><argument_list>(
              <argument><expr><literal type="string">"Cannot use get_available_device because you have installed"</literal>
              <literal type="string">"CPU/GPU version PaddlePaddle.\n"</literal>
              <literal type="string">"If you want to use get_available_device, please try to install"</literal>
              <literal type="string">"CustomDevice version "</literal>
              <literal type="string">"PaddlePaddle by: pip install paddlepaddle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>devices</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_available_custom_device"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>devices</name></type></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><name>devices</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllCustomDeviceList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>string</name><operator>::</operator><name>Sprintf</name></name><argument_list>(
              <argument><expr><literal type="string">"Cannot use get_available_custom_device because you have "</literal>
              <literal type="string">"installed"</literal>
              <literal type="string">"CPU/GPU version PaddlePaddle.\n"</literal>
              <literal type="string">"If you want to use get_available_custom_device, please try to "</literal>
              <literal type="string">"install"</literal>
              <literal type="string">"CustomDevice version "</literal>
              <literal type="string">"PaddlePaddle by: pip install paddlepaddle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>devices</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_custom_device_count"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>device_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <name>device_count</name> = 0</type></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <comment type="line">// TODO(duanyanhui): Optimize DeviceManager::GetDeviceCount to support</comment>
    <comment type="line">// returning default device when only one device is registered in</comment>
    <comment type="line">// DeviceManager.</comment>
    <expr_stmt><expr><name>device_count</name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetDeviceCount</name></name><argument_list>(<argument><expr><name>device_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>string</name><operator>::</operator><name>Sprintf</name></name><argument_list>(
              <argument><expr><literal type="string">"Cannot use get_custom_device_count because you have "</literal>
              <literal type="string">"installed"</literal>
              <literal type="string">"CPU/GPU version PaddlePaddle.\n"</literal>
              <literal type="string">"If you want to use get_custom_device_count, please try to "</literal>
              <literal type="string">"install"</literal>
              <literal type="string">"CustomDevice version "</literal>
              <literal type="string">"PaddlePaddle by: pip install paddlepaddle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>device_count</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>OperatorBase</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Operator"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>,
                  <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>protobin</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>proto</name><operator>::</operator><name>OpDesc</name></name> <name>desc</name></type></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>ParsePartialFromString</name></name><argument_list>(<argument><expr><name>protobin</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                      <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                          <argument><expr><literal type="string">"Cannot parse user input to OpDesc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>IsInitialized</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                      <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                          <argument><expr><literal type="string">"The provided OpDesc is not "</literal>
                                          <literal type="string">"initialized, the reason is: %s"</literal></expr></argument>,
                                          <argument><expr><call><name><name>desc</name><operator>.</operator><name>InitializationErrorString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>OpRegistry</name><operator>::</operator><name>CreateOp</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</return>
                  </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>XPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>NPUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CUDAPinnedPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>MLUPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>OperatorBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CustomPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name>string</name></name></type> <block>{<block_content> <return>return <expr><call><name><name>op</name><operator>.</operator><name>Type</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"outputs"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list>
               -&gt; <type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <block>{<block_content>
             <return>return <expr><call><name><name>op</name><operator>.</operator><name>Outputs</name></name><argument_list>()</argument_list></call></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"output_vars"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>op</name><operator>.</operator><name>OutputVars</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"inputs"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>op</name><operator>.</operator><name>Inputs</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"input_vars"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>op</name><operator>.</operator><name>InputVars</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__str__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OperatorBase</name><operator>::</operator><name>DebugString</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"no_intermediate_outputs"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OperatorBase</name> <modifier>&amp;</modifier></type><name>op</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>op</name><operator>.</operator><name>OutputVars</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"support_gpu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OperatorBase</name><operator>::</operator><name>SupportGPU</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>ExecutorPrepareContext</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ExecutorPrepareContext"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>ProgramDesc</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>TrainerBase</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>TrainerBase</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TrainerBase"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_worker_scope"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>TrainerBase</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list> -&gt; <type><name>Scope</name> <modifier>*</modifier></type> <block>{<block_content>
            <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetWorkerScope</name></name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"finalize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TrainerBase</name><operator>::</operator><name>Finalize</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"ResetDataset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TrainerBase</name><operator>::</operator><name>ResetDataset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_get_eager_deletion_vars"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>framework</name><operator>::</operator><name>GetEagerDeletionCleanVars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>Executor</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Executor"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>Place</name></name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Executor</name><operator>::</operator><name>Close</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run_from_dataset"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>Executor</name><operator>::</operator><name>RunFromDataset</name></name></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"release_trainer"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>Executor</name><operator>::</operator><name>ReleaseTrainer</name></name></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"init_for_dataset"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>ProgramDesc</name> <modifier>&amp;</modifier></type><name>prog</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>trainer_desc</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><name>Dataset</name> <modifier>*</modifier></type><name>dataset</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TrainerBase</name></expr></argument>&gt;</argument_list></name></type> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <return>return <expr><call><name><name>self</name><operator>.</operator><name>InitForDataset</name></name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>trainer_desc</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run_from_dataset"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TrainerBase</name></expr></argument>&gt;</argument_list></name></type> <name>trainer</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>RunFromDataset</name></name><argument_list>(<argument><expr><name>trainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run_prepared_ctx"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><name>ExecutorPrepareContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>feed_targets</name></decl></parameter>,
              <parameter><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>FetchType</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <modifier>*</modifier></type><name>fetch_targets</name></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_local_scope</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_vars</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>feed_holder_name</name> <init>= <expr><literal type="string">"feed"</literal></expr></init></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>fetch_holder_name</name> <init>= <expr><literal type="string">"fetch"</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>RunPreparedContext</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
                                     <argument><expr><name>scope</name></expr></argument>,
                                     <argument><expr><name>feed_targets</name></expr></argument>,
                                     <argument><expr><name>fetch_targets</name></expr></argument>,
                                     <argument><expr><name>create_local_scope</name></expr></argument>,
                                     <argument><expr><name>create_vars</name></expr></argument>,
                                     <argument><expr><name>feed_holder_name</name></expr></argument>,
                                     <argument><expr><name>fetch_holder_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run_prepared_ctx"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><name>ExecutorPrepareContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_local_scope</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_vars</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>keep_kids</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>RunPreparedContext</name></name><argument_list>(
                 <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>create_local_scope</name></expr></argument>, <argument><expr><name>create_vars</name></expr></argument>, <argument><expr><name>keep_kids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"prepare"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>ProgramDesc</name> <modifier>&amp;</modifier></type><name>program</name></decl></parameter>,
              <parameter><decl><type><name>int</name></type> <name>block_id</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>skip_ref_cnt_vars</name> <init>=
                  <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>force_disable_gc</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <return>return <expr><call><name><name>self</name><operator>.</operator><name>Prepare</name></name><argument_list>(
                 <argument><expr><name>program</name></expr></argument>, <argument><expr><name>block_id</name></expr></argument>, <argument><expr><name>skip_ref_cnt_vars</name></expr></argument>, <argument><expr><name>force_disable_gc</name></expr></argument>)</argument_list></call></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"create_variables"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Executor</name><operator>::</operator><name>CreateVariables</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Executor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name>ProgramDesc</name> <modifier>&amp;</modifier></type><name>prog</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><name>int</name></type> <name>block_id</name></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_local_scope</name></decl></parameter>,
              <parameter><decl><type><name>bool</name></type> <name>create_vars</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>fetch_vars</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
             <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>prog</name></expr></argument>,
                      <argument><expr><name>scope</name></expr></argument>,
                      <argument><expr><name>block_id</name></expr></argument>,
                      <argument><expr><name>create_local_scope</name></expr></argument>,
                      <argument><expr><name>create_vars</name></expr></argument>,
                      <argument><expr><name>fetch_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>interpreter</name><operator>::</operator><name>CostInfo</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"CostInfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"total_time"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>interpreter</name><operator>::</operator><name>CostInfo</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>self</name><operator>.</operator><name>total_time</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"device_memory_bytes"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>interpreter</name><operator>::</operator><name>CostInfo</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>self</name><operator>.</operator><name>device_memory_bytes</name></name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>StandaloneExecutor</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"StandaloneExecutor"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>Place</name></name> <operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>ProgramDesc</name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>StandaloneExecutor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>feed_names</name></decl></parameter>,
              <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>fetch_names</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>FetchList</name></name> <name>ret</name></type></decl>;</decl_stmt>
             <block>{<block_content>
               <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
               <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>self</name><operator>.</operator><name>Run</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>feed_names</name></expr></argument>, <argument><expr><name>fetch_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block>
             <return>return <expr><call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"dry_run"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>StandaloneExecutor</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>,
              <parameter><decl><type><name>Scope</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>,
              <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>array</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>input_dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>&gt;</argument_list></name> <name>feed_tensors</name></type></decl>;</decl_stmt>
             <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>feed_names</name></type></decl>;</decl_stmt>

             <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>item</name> <operator>:</operator> <name>input_dict</name></expr></init>)</control> <block>{<block_content>
               <decl_stmt><decl><type><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <name>t</name></type></decl>;</decl_stmt>
               <expr_stmt><expr><call><name><name>SetTensorFromPyArray</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>CPUPlace</name></name></expr></argument>&gt;</argument_list></name><argument_list>(
                   <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><call><name><name>platform</name><operator>::</operator><name>CPUPlace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name>feed_names</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name><name>feed_tensors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></for>

             <decl_stmt><decl><type><name><name>framework</name><operator>::</operator><name>interpreter</name><operator>::</operator><name>CostInfo</name></name> <name>cost_info</name></type></decl>;</decl_stmt>
             <block>{<block_content>
               <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
               <expr_stmt><expr><name>cost_info</name> <operator>=</operator> <call><name><name>self</name><operator>.</operator><name>DryRun</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>feed_names</name></expr></argument>, <argument><expr><name>feed_tensors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block>
             <return>return <expr><name>cost_info</name></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_gflags"</literal></expr></argument>, <argument><expr><name><name>framework</name><operator>::</operator><name>InitGflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_glog"</literal></expr></argument>, <argument><expr><name><name>framework</name><operator>::</operator><name>InitGLOG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_memory_method"</literal></expr></argument>, <argument><expr><name><name>framework</name><operator>::</operator><name>InitMemoryMethod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"load_op_meta_info_and_register_op"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dso_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>egr</name><operator>::</operator><name>Controller</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>MergeOpMetaInfoMap</name><argument_list>(
        <argument><expr><call><name><name>framework</name><operator>::</operator><name>LoadOpMetaInfoAndRegisterOp</name></name><argument_list>(<argument><expr><name>dso_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_devices"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>InitDevices</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CUSTOM_DEVICE</name></cpp:ifdef>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>dev_type</name> <operator>:</operator> <call><name><name>phi</name><operator>::</operator><name>DeviceManager</name><operator>::</operator><name>GetAllCustomDeviceTypes</name></name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>operators</name><operator>::</operator><name>RegisterCustomDeviceCommonKernel</name></name><argument_list>(<argument><expr><name>dev_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_default_kernel_signatures"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>InitDefaultKernelSignatureMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_tensor_operants"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>OperantsManager</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>eager_operants</name><operator>.</operator><name>reset</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>EagerTensorOperants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>OperantsManager</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>static_operants</name><operator>.</operator><name>reset</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>prim</name><operator>::</operator><name>StaticTensorOperants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>OperantsManager</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>phi_operants</name><operator>.</operator><name>reset</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name><name>paddle</name><operator>::</operator><name>operants</name><operator>::</operator><name>PhiTensorOperants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Initialize tensor operants successfully"</literal></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_avx"</literal></expr></argument>, <argument><expr><name>IsCompiledWithAVX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_cuda"</literal></expr></argument>, <argument><expr><name>IsCompiledWithCUDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_ascend"</literal></expr></argument>, <argument><expr><name>IsCompiledWithAscend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_rocm"</literal></expr></argument>, <argument><expr><name>IsCompiledWithROCM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_npu"</literal></expr></argument>, <argument><expr><name>IsCompiledWithNPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_custom_device"</literal></expr></argument>, <argument><expr><name>IsCompiledWithCustomDevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_ipu"</literal></expr></argument>, <argument><expr><name>IsCompiledWithIPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_xpu"</literal></expr></argument>, <argument><expr><name>IsCompiledWithXPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_mkldnn"</literal></expr></argument>, <argument><expr><name>IsCompiledWithMKLDNN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_nccl"</literal></expr></argument>, <argument><expr><name>IsCompiledWithNCCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_mpi"</literal></expr></argument>, <argument><expr><name>IsCompiledWithMPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_mpi_aware"</literal></expr></argument>, <argument><expr><name>IsCompiledWithMPIAWARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_cinn"</literal></expr></argument>, <argument><expr><name>IsCompiledWithCINN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_mlu"</literal></expr></argument>, <argument><expr><name>IsCompiledWithMLU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_compiled_with_heterps"</literal></expr></argument>, <argument><expr><name>IsCompiledWithHETERPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"supports_bfloat16"</literal></expr></argument>, <argument><expr><name>SupportsBfloat16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"supports_bfloat16_fast_performance"</literal></expr></argument>, <argument><expr><name>SupportsBfloat16FastPerformance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"supports_int8"</literal></expr></argument>, <argument><expr><name>SupportsInt8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"supports_vnni"</literal></expr></argument>, <argument><expr><name>SupportsVNNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"op_supported_infos"</literal></expr></argument>, <argument><expr><name><name>imperative</name><operator>::</operator><name>OpSupportedInfos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_brpc"</literal></expr></argument>, <argument><expr><name>IsCompiledWithBrpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_compiled_with_dist"</literal></expr></argument>, <argument><expr><name>IsCompiledWithDIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_cuda_synchronize"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>DeviceContextPool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Get</name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_float_stats"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ExportedStatValue</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>float_stats</name></type></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>StatRegistry</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>publish</name><argument_list>(<argument><expr><name>float_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>float</name></expr></argument>&gt;</argument_list></name> <name>stats_map</name></type></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>stat</name> : <name>float_stats</name></type></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>stats_map</name><index>[<expr><name><name>stat</name><operator>.</operator><name>key</name></name></expr>]</index></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>stats_map</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_int_stats"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ExportedStatValue</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>int_stats</name></type></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>StatRegistry</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>publish</name><argument_list>(<argument><expr><name>int_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <name>stats_map</name></type></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier> <modifier>&amp;</modifier><name>stat</name> : <name>int_stats</name></type></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>stats_map</name><index>[<expr><name><name>stat</name><operator>.</operator><name>key</name></name></expr>]</index></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>stats_map</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"device_memory_stat_current_value"</literal></expr></argument>,
        <argument><expr><name><name>memory</name><operator>::</operator><name>DeviceMemoryStatCurrentValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"device_memory_stat_peak_value"</literal></expr></argument>, <argument><expr><name><name>memory</name><operator>::</operator><name>DeviceMemoryStatPeakValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"run_cmd"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>cmd</name></decl></parameter>,
         <parameter><decl><type><name>int</name></type> <name>time_out</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>,
         <parameter><decl><type><name>int</name></type> <name>sleep_inter</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> -&gt; <type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <block>{<block_content>
        <return>return <expr><call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>shell_get_command_output</name></name><argument_list>(
            <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>time_out</name></expr></argument>, <argument><expr><name>sleep_inter</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"time_out"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"sleep_inter"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"shell_execute_cmd"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>cmd</name></decl></parameter>,
         <parameter><decl><type><name>int</name></type> <name>time_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
         <parameter><decl><type><name>int</name></type> <name>sleep_inter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>,
         <parameter><decl><type><name>bool</name></type> <name>redirect_stderr</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <block>{<block_content>
        <return>return <expr><call><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>shell_execute_cmd</name></name><argument_list>(
            <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>time_out</name></expr></argument>, <argument><expr><name>sleep_inter</name></expr></argument>, <argument><expr><name>redirect_stderr</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"time_out"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"sleep_inter"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"redirect_stderr"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_float16_supported"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> -&gt; <type><name>bool</name></type> <block>{<block_content>
    <comment type="line">// Only GPUs with Compute Capability &gt;= 53 support float16</comment>
    <return>return <expr><call><name><name>platform</name><operator>::</operator><name>GetGPUComputeCapability</name></name><argument_list>(<argument><expr><name><name>place</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">53</literal></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_bfloat16_supported"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name> <modifier>&amp;</modifier></type><name>place</name></decl></parameter>)</parameter_list> -&gt; <type><name>bool</name></type> <block>{<block_content>
    <comment type="line">// Only GPUs with Compute Capability &gt;= 80 support bfloat16</comment>
    <return>return <expr><call><name><name>platform</name><operator>::</operator><name>GetGPUComputeCapability</name></name><argument_list>(<argument><expr><name><name>place</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">80</literal></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_feed_variable"</literal></expr></argument>,
        <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator>  <comment type="line">// NOLINT</comment>
            <name>Scope</name> <operator>*</operator>,
            <specifier>const</specifier> <name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <operator>&amp;</operator>,
            <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <operator>&amp;</operator>,
            <name>size_t</name><operator>)</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name><name>framework</name><operator>::</operator><name>SetFeedVariable</name></name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_feed_variable"</literal></expr></argument>,
        <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><operator>*</operator><operator>)</operator><operator>(</operator>  <comment type="line">// NOLINT</comment>
            <name>Scope</name> <operator>*</operator>,
            <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator>,
            <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <operator>&amp;</operator>,
            <name>size_t</name><operator>)</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name><name>framework</name><operator>::</operator><name>SetFeedVariable</name></name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_fetch_variable"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Scope</name> <modifier>&amp;</modifier></type><name>scope</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>var_name</name></decl></parameter>,
           <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>py</name><operator>::</operator><name>object</name></name></type> <block>{<block_content>
          <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>var</name> <operator>=</operator> <call><name><name>framework</name><operator>::</operator><name>GetFetchVariable</name></name><argument_list>(<argument><expr><name>scope</name></expr></argument>, <argument><expr><name>var_name</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>data_is_lod_tensor</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name>PADDLE_GET</name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name>PADDLE_GET</name><argument_list>(<argument><expr><name>LoDTensorArray</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_variable_tensor"</literal></expr></argument>, <argument><expr><name><name>framework</name><operator>::</operator><name>GetVariableTensor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_program_version_supported"</literal></expr></argument>, <argument><expr><name>IsProgramVersionSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>BindProgramDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindBlockDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindVarDsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindOpDesc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCostModel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindConstValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGlobalValueGetterSetter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindFleetExecutor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindTCPStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCommContextManager</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindAutoParallel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindJitProperty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>LoDRankTable</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"LodRankTable"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"items"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>framework</name><operator>::</operator><name>LoDRankTable</name></name> <modifier>&amp;</modifier></type><name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>res</name></type></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>item</name> <operator>:</operator> <call><name><name>table</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>item</name><operator>.</operator><name>index</name></name></expr>, <expr><name><name>item</name><operator>.</operator><name>length</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>LoDTensorArray</name></expr></argument>&gt;</argument_list></name></type> <name>pylodtensorarray</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"LoDTensorArray"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC(
    LoDTensorArray is array of LoDTensor, it supports operator[], len() and for-loop iteration.

    Examples:
        .. code-block:: python

          import paddle.fluid as fluid

          arr = fluid.LoDTensorArray()
)DOC"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_framework_lodtensorarray_pytype</name> <operator>=</operator>
      <cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>PyTypeObject</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>pylodtensorarray</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pylodtensorarray</name>
      <operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__init__"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>instance</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>new</operator> <operator>(</operator><operator>&amp;</operator><name>instance</name><operator>)</operator> <call><name>LoDTensorArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"__getitem__"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><call><name><name>self</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__len__"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__setitem__"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name>PADDLE_ENFORCE_LT</name><argument_list>(<argument><expr><name>i</name></expr></argument>,
                               <argument><expr><call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                                   <argument><expr><literal type="string">"The index to set is larger than the size "</literal>
                                   <literal type="string">"of LoDTensorArray."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ShareDataWith</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>set_lod</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>lod</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"append"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ShareDataWith</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set_lod</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>lod</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"tensor"</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="string">R"DOC(
             Append a LoDensor to LoDTensorArray.

             Args:
                   tensor (LoDTensor): The LoDTensor to be appended.

             Returns:
                   None.

             Examples:
                 .. code-block:: python

                   import paddle.fluid as fluid
                   import numpy as np

                   arr = fluid.LoDTensorArray()
                   t = fluid.LoDTensor()
                   t.set(np.ndarray([5, 30]), fluid.CPUPlace())
                   arr.append(t)
           )DOC"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"_move_to_list"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>py</name><operator>::</operator><name>list</name></name></type> <block>{<block_content>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>res</name>(<name><name>self</name><operator>.</operator><name>size</name></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
            for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
              <expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            }</block>
            <call><name><name>self</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr></argument>;
            return <argument><expr><name>res</name></expr></argument>;</argument_list></call></expr></expr_stmt>
          },
          <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>take_ownership</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>FetchList</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FetchList"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC( FetchList is a
        vector of paddle::variant&lt;LoDTensor, LoDTensorArray&gt;.
        )DOC"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"_move_to_list"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FetchList</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>py</name><operator>::</operator><name>list</name></name></type> <block>{<block_content>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>res</name>(<name><name>self</name><operator>.</operator><name>size</name></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
            for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
              <if_stmt><if>if <condition>(<expr><call><name>data_is_lod_tensor</name><argument_list>(<argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>data</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>, <argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt/>}</block_content> else if (data_is_sparse_coo_tensor(self[i]</block></if></if_stmt>)</block></expr></argument>)</argument_list></call> <block>{
                <expr><name>auto</name> <operator>&amp;</operator><name>data</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>SparseCooTensor</name></name></expr></argument>, <argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
                <expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
              }</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
                <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>data</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name>LoDTensorArray</name></expr></argument>, <argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name></type> <name>tmp</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
                  <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            }
            self<expr_stmt><expr><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>res</name></expr>;</return>
          },
          <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>take_ownership</name></name></expr></expr_stmt>)

      <expr_stmt><expr><operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"append"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FetchList</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>phi</name><operator>::</operator><name>DenseTensor</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>lod_tensor</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>, <argument><expr><call><name><name>self</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lod_tensor</name><operator>.</operator><name>ShareDataWith</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lod_tensor</name><operator>.</operator><name>set_lod</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>lod</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"append"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FetchList</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LoDTensorArray</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>lod_tensor_array</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name>LoDTensorArray</name></expr></argument>, <argument><expr><call><name><name>self</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>size_t</name> <name>i</name> = 0</type></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
              <expr_stmt><expr><name><name>lod_tensor_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>ShareDataWith</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>lod_tensor_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>set_lod</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>lod</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"var"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>FetchUnmergedList</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"FetchUnmergedList"</literal></expr></argument>, <argument><expr><literal type="string">R"DOC(
        FetchUnmergedList is 2-D array of FetchType(paddle::variant(LoDTensor, LoDTensorArray)).
        )DOC"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"_move_to_list"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>FetchUnmergedList</name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>py</name><operator>::</operator><name>list</name></name></type> <block>{<block_content>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>res</name>(<name><name>self</name><operator>.</operator><name>size</name></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
            for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
              <expr><name><name>py</name><operator>::</operator><name>list</name></name> <call><name>tmp</name><argument_list>(<argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
              <for>for <control>(<init><decl><type><name>size_t</name> <name>j</name> = 0</type></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>self</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>data_is_lod_tensor</name><argument_list>(<argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>var</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name><name>phi</name><operator>::</operator><name>DenseTensor</name></name></expr></argument>, <argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt/>}</block_content> else <block>{<block_content>
                  <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>var</name> <operator>=</operator> <call><name>PADDLE_GET</name><argument_list>(<argument><expr><name>LoDTensorArray</name></expr></argument>, <argument><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>tmp_array</name>(<name><name>var</name><operator>.</operator><name>size</name></name>(</type></decl>)</decl_stmt>)</block_content></block></block><empty_stmt>;</empty_stmt></if></if_stmt>
                  <for>for <control>(<init><decl><type><name>size_t</name> <name>k</name> = 0</type></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>var</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>tmp_array</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>var</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt/>}</block_content>
                  tmp[j] = std::move(tmp_array</block></for>)</block_content></block><empty_stmt>;</empty_stmt></for>
                }</block></expr></argument></argument_list></call></expr></expr_stmt>
              }
              res<expr_stmt><expr><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }
            self<expr_stmt><expr><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>res</name></expr>;</return>
          },
          <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>take_ownership</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"op_support_gpu"</literal></expr></argument>, <argument><expr><name>OpSupportGPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_cuda_device_count"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>GetGPUDeviceCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_cuda_current_device_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>GetCurrentDeviceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"cuda_empty_cache"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name> <name>dev_id</name> : <name><name>platform</name><operator>::</operator><name>GetSelectedDevices</name></name>(</type></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></lambda></expr></argument>)</argument_list></call> <block>{
      <expr><name>auto</name> <operator>*</operator><name>dev_ctx</name> <operator>=</operator> <call><name><name>platform</name><operator>::</operator><name>DeviceContextPool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetByPlace</name><argument_list>(
          <argument><expr><call><name><name>platform</name><operator>::</operator><name>CUDAPlace</name></name><argument_list>(<argument><expr><name>dev_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>dev_ctx</name><operator>-&gt;</operator><name>cudnn_workspace_handle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ResetWorkspace</name><argument_list>()</argument_list></call></expr>;
    }</block>
    <call><name><name>platform</name><operator>::</operator><name>EmptyCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"get_device_properties"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> -&gt; <type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type> <block>{<block_content>
        <return>return <expr><call><name><name>platform</name><operator>::</operator><name>GetDeviceProperties</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>copy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>gpuDeviceProp</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_gpuDeviceProperties"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>name</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"major"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>major</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"minor"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>minor</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"total_memory"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>totalGlobalMem</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"multi_processor_count"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>multiProcessorCount</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"is_multi_gpu_board"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>isMultiGpuBoard</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"is_integrated"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>prop</name><operator>.</operator><name>integrated</name></name></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__repr__"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gpuDeviceProp</name> <modifier>&amp;</modifier></type><name>prop</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>stringstream</name></name> <name>ostr</name></type></decl>;</decl_stmt>
        <expr_stmt><expr><name>ostr</name> <operator>&lt;&lt;</operator> <literal type="string">"_gpuDeviceProperties(name='"</literal> <operator>&lt;&lt;</operator> <name><name>prop</name><operator>.</operator><name>name</name></name>
             <operator>&lt;&lt;</operator> <literal type="string">"', major="</literal> <operator>&lt;&lt;</operator> <name><name>prop</name><operator>.</operator><name>major</name></name> <operator>&lt;&lt;</operator> <literal type="string">", minor="</literal> <operator>&lt;&lt;</operator> <name><name>prop</name><operator>.</operator><name>minor</name></name>
             <operator>&lt;&lt;</operator> <literal type="string">", total_memory="</literal> <operator>&lt;&lt;</operator> <name><name>prop</name><operator>.</operator><name>totalGlobalMem</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator>
             <operator>&lt;&lt;</operator> <literal type="string">"MB, multi_processor_count="</literal> <operator>&lt;&lt;</operator> <name><name>prop</name><operator>.</operator><name>multiProcessorCount</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        <return>return <expr><call><name><name>ostr</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_init"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>CudaProfilerInit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_start"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>CudaProfilerStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_stop"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>CudaProfilerStop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_nvtx_push"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>CudaNvtxRangePush</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>NvtxRangeColor</name><operator>::</operator><name>Green</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_nvtx_pop"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>CudaNvtxRangePop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_enable_record_event"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>NvprofEnableRecordEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"nvprof_disable_record_event"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>NvprofDisableRecordEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_ASCEND_CL</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_npu_device_count"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>GetNPUDeviceCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_finalize"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>HCCLCommContext</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ReleaseHCCLComms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>pool</name> <operator>=</operator> <call><name><name>platform</name><operator>::</operator><name>DeviceContextPool</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name> <name>devices</name> = <name><name>platform</name><operator>::</operator><name>GetSelectedNPUDevices</name></name>(</type></decl>);</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name> <name>i</name> = 0</type></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>devices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>platform</name><operator>::</operator><name>NPUDeviceGuard</name></name> <name>guard</name>(<name><name>devices</name><index>[<expr><name>i</name></expr>]</index></name></type></decl>);</decl_stmt>
      <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>Get</name></name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>NPUPlace</name></name><argument_list>(<argument><expr><name><name>devices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>AclInstance</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>NPUProfConfigWrapper</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"NPUProfConfigWrapper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_init"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>NPUProfilerInit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_start"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>NPUProfConfigWrapper</name></name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>NPUProfilerStart</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_stop"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>NPUProfConfigWrapper</name></name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>NPUProfilerStop</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_finalize"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>NPUProfilerFinalize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_create_config"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>platform</name><operator>::</operator><name>NPUProfConfigWrapper</name></name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>NPUProfilerCreateConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"npu_prof_destropy_config"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>NPUProfConfigWrapper</name></name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>NPUProfilerDestroyConfig</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_IPU</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_ipu_device_count"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>GetIPUDeviceCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_MLU</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_mlu_device_count"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>GetMLUDeviceCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>TracerOption</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TracerOption"</literal></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arithmetic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kDefault"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>TracerOption</name><operator>::</operator><name>kDefault</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kOpDetail"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>TracerOption</name><operator>::</operator><name>kOpDetail</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kAllOpDetail"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>TracerOption</name><operator>::</operator><name>kAllOpDetail</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>export_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>ProfilerState</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerState"</literal></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arithmetic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kDisabled"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>ProfilerState</name><operator>::</operator><name>kDisabled</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kCPU"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>ProfilerState</name><operator>::</operator><name>kCPU</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kCUDA"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>ProfilerState</name><operator>::</operator><name>kCUDA</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kAll"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>ProfilerState</name><operator>::</operator><name>kAll</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>export_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"EventSortingKey"</literal></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arithmetic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kDefault"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kDefault</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kCalls"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kCalls</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kTotal"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kTotal</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kMin"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kMin</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kMax"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kMax</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"kAve"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EventSortingKey</name><operator>::</operator><name>kAve</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>export_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_tracer_option"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>SetTracerOption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"enable_profiler"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>EnableProfiler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_profiler"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>DisableProfiler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_profiler_enabled"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>IsProfileEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"reset_profiler"</literal></expr></argument>, <argument><expr><name><name>platform</name><operator>::</operator><name>ResetProfiler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"register_pass"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>pass_type</name></decl></parameter>, <parameter><decl><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>callable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>PADDLE_ENFORCE_EQ</name><argument_list>(
        <argument><expr><call><name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>PassRegistry</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Has</name><argument_list>(<argument><expr><name>pass_type</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="boolean">false</literal></expr></argument>,
        <argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>AlreadyExists</name></name><argument_list>(<argument><expr><literal type="string">"Pass '%s' is registered more than "</literal>
                                        <literal type="string">"once. Please use another name."</literal></expr></argument>,
                                        <argument><expr><name>pass_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>callable</name><operator>.</operator><name>inc_ref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>PassRegistry</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Insert</name><argument_list>(
        <argument><expr><name>pass_type</name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>pass_type</name></argument>, <argument><name>callable</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>gil_scoped_acquire</name></name> <name>guard</name></type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>Pass</name></name></expr></argument>&gt;</argument_list></name> <name>pass</name>(
              <specifier/>new <name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>GeneratePass</name></name>(
                  <name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name>(<name>callable</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>)</argument_list></call></expr></expr_stmt></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>pass</name></expr>;</return>
        })<empty_stmt>;</empty_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_pass"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>pass_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name> <name>pass</name> = <name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>PassRegistry</name><operator>::</operator><name>Instance</name></name>(</type></decl>).Get(pass_type</decl_stmt>)</block_content></block></lambda></expr></argument>;
    return <argument><expr><call><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>framework</name><operator>::</operator><name>ir</name><operator>::</operator><name>Pass</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"size_of_dtype"</literal></expr></argument>, <argument><expr><name><name>framework</name><operator>::</operator><name>SizeOfType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ProfilerResult"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_data"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetData</name></name></expr></argument>,
           <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>automatic_reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"save"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>Save</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_extra_info"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetExtraInfo</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_version"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetVersion</name></name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_span_indx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetSpanIndx</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_device_property"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetDeviceProperty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_span_indx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerResult</name><operator>::</operator><name>GetSpanIndx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"MemPythonNode"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"timestamp_ns"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>timestamp_ns</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"addr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>addr</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>type</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"process_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>process_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"thread_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>thread_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"increase_bytes"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>increase_bytes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"place"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>place</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"current_allocated"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>current_allocated</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"current_reserved"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>current_reserved</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"peak_allocated"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>peak_allocated</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"peak_reserved"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>MemPythonNode</name><operator>::</operator><name>peak_reserved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"DevicePythonNode"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>name</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>type</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"start_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>start_ns</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"end_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>end_ns</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"device_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>device_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"context_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>context_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"stream_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>stream_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"correlation_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>correlation_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"block_x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>block_x</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"block_y"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>block_y</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"block_z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>block_z</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"grid_x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>grid_x</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"grid_y"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>grid_y</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"grid_z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>grid_z</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"shared_memory"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>shared_memory</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"registers_per_thread"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>registers_per_thread</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"blocks_per_sm"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>blocks_per_sm</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"warps_per_sm"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>warps_per_sm</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"occupancy"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>occupancy</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"num_bytes"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>num_bytes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DevicePythonNode</name><operator>::</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"HostPythonNode"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>name</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>type</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"start_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>start_ns</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"end_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>end_ns</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"process_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>process_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"thread_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>thread_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"correlation_id"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>correlation_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"input_shapes"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>input_shapes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"dtypes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>dtypes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"callstack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>callstack</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"attributes"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>attributes</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"op_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>op_id</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"children_node"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>children_node_ptrs</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"runtime_node"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>runtime_node_ptrs</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"device_node"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>device_node_ptrs</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"mem_node"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>HostPythonNode</name><operator>::</operator><name>mem_node_ptrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_Profiler"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name><operator>::</operator><name>Create</name></name></expr></argument>,
           <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>take_ownership</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_cupti_supported"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name><operator>::</operator><name>IsCuptiSupported</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_cnpapi_supported"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name><operator>::</operator><name>IsCnpapiSupported</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"prepare"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name></name> <modifier>*</modifier></type><name>profiler</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>EnableHostEventRecorder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name><name>profiler</name><operator>-&gt;</operator><name>Prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name><operator>::</operator><name>Start</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"stop"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>Profiler</name></name> <modifier>*</modifier></type><name>profiler</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>platform</name><operator>::</operator><name>DisableHostEventRecorder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name> <name>result</name> = <name><name>profiler</name><operator>-&gt;</operator><name>Stop</name></name>(</type></decl>);</decl_stmt>
            <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>StaticGraphExecutorPerfStatistics</name></name><argument_list>(
                <argument><expr><call><name><name>result</name><operator>-&gt;</operator><name>GetNodeTrees</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>automatic_reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerOptions</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerOptions"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readwrite</name><argument_list>(<argument><expr><literal type="string">"trace_switch"</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>ProfilerOptions</name><operator>::</operator><name>trace_switch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>RecordEvent</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_RecordEvent"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>platform</name><operator>::</operator><name>TracerEventType</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>RecordEvent</name></name></expr></argument>&gt;</argument_list></name><argument_list>(
            <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>EventRole</name><operator>::</operator><name>kOrdinary</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>RecordEvent</name></name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>End</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerMemEventType</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TracerMemEventType"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Allocate"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerMemEventType</name><operator>::</operator><name>Allocate</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Free"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerMemEventType</name><operator>::</operator><name>Free</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"ReservedAllocate"</literal></expr></argument>,
             <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerMemEventType</name><operator>::</operator><name>ReservedAllocate</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"ReservedFree"</literal></expr></argument>,
             <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerMemEventType</name><operator>::</operator><name>ReservedFree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TracerEventType"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Operator"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Operator</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Dataloader"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Dataloader</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"ProfileStep"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>ProfileStep</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CudaRuntime"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>CudaRuntime</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Kernel"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Kernel</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Memcpy"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Memcpy</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Memset"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Memset</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"UserDefined"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>UserDefined</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"OperatorInner"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>OperatorInner</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Forward"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Forward</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Backward"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Backward</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Optimization"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Optimization</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Communication"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>Communication</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"PythonOp"</literal></expr></argument>, <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>PythonOp</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"PythonUserDefined"</literal></expr></argument>,
             <argument><expr><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>TracerEventType</name><operator>::</operator><name>PythonUserDefined</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"load_profiler_result"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>LoadProfilerResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"enable_memory_recorder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>EnableMemoryRecorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_memory_recorder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>platform</name><operator>::</operator><name>DisableMemoryRecorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"enable_op_info_recorder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>EnableOpInfoRecorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_op_info_recorder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phi</name><operator>::</operator><name>DisableOpInfoRecorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_CUDA</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HIP</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_cublas_switch"</literal></expr></argument>, <argument><expr><name><name>phi</name><operator>::</operator><name>SetAllowTF32Cublas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_cublas_switch"</literal></expr></argument>, <argument><expr><name><name>phi</name><operator>::</operator><name>AllowTF32Cublas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_cudnn_switch"</literal></expr></argument>, <argument><expr><name><name>phi</name><operator>::</operator><name>SetAllowTF32Cudnn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_cudnn_switch"</literal></expr></argument>, <argument><expr><name><name>phi</name><operator>::</operator><name>AllowTF32Cudnn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// PADDLE_WITH_CUDA</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"clear_executor_cache"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>pybind11</name><operator>::</operator><name>gil_scoped_release</name></name> <name>release</name></type></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>ExecutorInfoCache</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>framework</name><operator>::</operator><name>InterpreterCoreInfoCache</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"parse_safe_eager_deletion_skip_vars"</literal></expr></argument>,
        <argument><expr><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>details</name><operator>::</operator><name>ParseSafeEagerDeletionSkipVarsSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_IPU</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name></name></expr></argument>,
             <argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>nodelete</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"IpuBackend"</literal></expr></argument>)</argument_list></call>
      <comment type="line">// manage IpuBackend in C++</comment>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><literal type="string">"get_instance"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>nodelete</name></name></expr></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>GetInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"weights_to_host"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>WeightsToHost</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"detach"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>Detach</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>Reset</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_scope"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>SetScope</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_ipu_strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>SetIpuStrategy</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"save_model_proto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuBackend</name><operator>::</operator><name>SaveModelProto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"IpuStrategy"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_options"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>dict</name></name> <modifier>&amp;</modifier></type><name>opt</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <for>for <control>(<init><decl><type><name>auto</name> <name>element</name> : <name>opt</name></type></decl></init>)</control> <block>{<block_content>
               <decl_stmt><decl><type><name>auto</name> <name>option_name</name> = <name><name>element</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>);</decl_stmt>
               <expr_stmt><expr><call><name>VLOG</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Set option: "</literal> <operator>&lt;&lt;</operator> <name>option_name</name></expr>;</expr_stmt>
               <if_stmt><if>if <condition>(<expr><name>option_name</name> <operator>==</operator> <literal type="string">"compilation_progress_logger"</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>SetCompilationProgressLogger</name></name><argument_list>(
                     <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>function</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>bool_</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>AddBoolOption</name></name><argument_list>(<argument><expr><name>option_name</name></expr></argument>, <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>float_</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>AddDoubleOption</name></name><argument_list>(<argument><expr><name>option_name</name></expr></argument>,
                                      <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>AddUint64Option</name></name><argument_list>(<argument><expr><name>option_name</name></expr></argument>,
                                      <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>uint64_t</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>str</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>AddStringOption</name></name><argument_list>(<argument><expr><name>option_name</name></expr></argument>,
                                      <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>set</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
                          <call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>list</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <for>for <control>(<init><decl><type><name>auto</name> <name>option</name> : <name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>list</name></name></expr></argument>&gt;</argument_list></name>(</type></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></lambda></expr></argument>)</argument_list></call> <block>{
                   <expr><name><name>std</name><operator>::</operator><name>string</name></name> <name>option_val</name></expr>;
                   <if_stmt><if>if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>str</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><name>option_val</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                     <expr_stmt><expr><name>option_val</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>uint64_t</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></if> <else>else <block>{<block_content>
                     <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>Unimplemented</name></name><argument_list>(
                         <argument><expr><literal type="string">"Failed to convert type: %s when set IpuStrategy "</literal>
                         <literal type="string">"option: %s"</literal></expr></argument>,
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>get_type</name></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><name>option_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></else></if_stmt>
                   <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>InsertStringOption</name></name><argument_list>(<argument><expr><name>option_name</name></expr></argument>, <argument><expr><name>option_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }
               } <if_stmt><if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>element</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><call><name><name>option_name</name><operator>.</operator><name>rfind</name></name><argument_list>(<argument><expr><literal type="string">"location_"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                   <for>for <control>(<init><decl><type><name>auto</name></type> <name>option</name> <range>: <expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                     <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>SetTensorLocation</name></name><argument_list>(
                         <argument><expr><name>option_name</name></expr></argument>,
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>uint64_t</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                 </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_name</name> <operator>==</operator> <literal type="string">"replicated_collectives_settings"</literal></expr>)</condition> <block>{<block_content>
                   <for>for <control>(<init><decl><type><name>auto</name></type> <name>option</name> <range>: <expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                     <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>SetReplicatedCollectivesSettings</name></name><argument_list>(
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                 </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_name</name> <operator>==</operator> <literal type="string">"accumulate_outer_fragment"</literal></expr>)</condition> <block>{<block_content>
                   <for>for <control>(<init><decl><type><name>auto</name></type> <name>option</name> <range>: <expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                     <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>
                     <for>for <control>(<init><decl><type><name>auto</name></type> <name>value</name> <range>: <expr><call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>list</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                       <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></for>
                     <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>SetAccumulateOuterFragmentSettings</name></name><argument_list>(
                         <argument><expr><call><name><name>option</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>uint64_t</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                 </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_name</name> <operator>==</operator> <literal type="string">"custom_op"</literal></expr>)</condition> <block>{<block_content>
                   <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>paddle_op</name></decl>;</decl_stmt>
                   <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>popart_op</name></decl>;</decl_stmt>
                   <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>domain</name></decl>;</decl_stmt>
                   <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                   <for>for <control>(<init><decl><type><name>auto</name></type> <name>option</name> <range>: <expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                     <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>option_key</name> <init>= <expr><call><name><name>option</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                     <if_stmt><if>if <condition>(<expr><name>option_key</name> <operator>==</operator> <literal type="string">"paddle_op"</literal></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>paddle_op</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_key</name> <operator>==</operator> <literal type="string">"popart_op"</literal></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>popart_op</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_key</name> <operator>==</operator> <literal type="string">"domain"</literal></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>domain</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_key</name> <operator>==</operator> <literal type="string">"version"</literal></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
                       <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                           <argument><expr><literal type="string">"Invalid argument, key must be one of paddle_op, "</literal>
                           <literal type="string">"popart_op, domain or version, but revecived %s"</literal></expr></argument>,
                           <argument><expr><name>option_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></else></if_stmt>
                   </block_content>}</block></for>
                   <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>AddCustomOp</name></name><argument_list>(<argument><expr><name>paddle_op</name></expr></argument>, <argument><expr><name>popart_op</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 </block_content>}</block></if> <else>else <block>{<block_content>
                   <for>for <control>(<init><decl><type><name>auto</name></type> <name>option</name> <range>: <expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>dict</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                     <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>option_key</name> <init>= <expr><call><name><name>option</name><operator>.</operator><name>first</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                     <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>option_val</name></decl>;</decl_stmt>
                     <if_stmt><if>if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>str</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>option_val</name> <operator>=</operator> <call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                       <expr_stmt><expr><name>option_val</name> <operator>=</operator>
                           <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>uint64_t</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></if> <else>else <block>{<block_content>
                       <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>Unimplemented</name></name><argument_list>(
                           <argument><expr><literal type="string">"Failed to convert value type: %s when set "</literal>
                           <literal type="string">"IpuStrategy option: %s"</literal></expr></argument>,
                           <argument><expr><call><name><name>option</name><operator>.</operator><name>second</name><operator>.</operator><name>get_type</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><name>option_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     </block_content>}</block></else></if_stmt>
                     <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>InsertStringPairOption</name></name><argument_list>(
                         <argument><expr><name>option_name</name></expr></argument>, <argument><expr><name>option_key</name></expr></argument>, <argument><expr><name>option_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for>
                 </block_content>}</block></else></if_stmt>
               </block_content>}</block></if> <else>else <block>{<block_content>
                 <expr_stmt><expr><call><name>PADDLE_THROW</name><argument_list>(<argument><expr><call><name><name>platform</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
                     <argument><expr><literal type="string">"Invalid IpuStrategy option value type: %s, please check "</literal>
                     <literal type="string">"input value for option: %s"</literal></expr></argument>,
                     <argument><expr><call><name><name>element</name><operator>.</operator><name>second</name><operator>.</operator><name>get_type</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><name>option_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></else></if_stmt>
             }
           })
      <expr_stmt><expr><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_option"</literal></expr></argument>,
           <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name></name> <modifier>&amp;</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
             <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>dict</name></name> <name>res</name></type></decl>;</decl_stmt>
             <decl_stmt><decl><type><name>auto</name> <name>option_type</name> = <name><name>self</name><operator>.</operator><name>GetOptionType</name></name>(<name>name</name></type></decl>);</decl_stmt>
             <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"name"</literal></expr>]</index></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"type"</literal></expr>]</index></name> <operator>=</operator> <name>option_type</name></expr>;</expr_stmt>
             <if_stmt><if>if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"vector"</literal></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><name>auto</name> <name>value</name> = <name><name>self</name><operator>.</operator><name>GetVectorOption</name></name>(<name>name</name></type></decl>);</decl_stmt>
               <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
             </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"map"</literal></expr>)</condition> <block>{<block_content>
               <decl_stmt><decl><type><name>auto</name> <name>value</name> = <name><name>self</name><operator>.</operator><name>GetMapOption</name></name>(<name>name</name></type></decl>);</decl_stmt>
               <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
             </block_content>}</block></if> <else>else <block>{<block_content>
               <decl_stmt><decl><type><name>auto</name> <name>value_s</name> = <name><name>self</name><operator>.</operator><name>GetOption</name></name>(<name>name</name></type></decl>);</decl_stmt>
               <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value_s"</literal></expr>]</index></name> <operator>=</operator> <name>value_s</name></expr>;</expr_stmt>
               <if_stmt><if>if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"bool"</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>stoi</name></name><argument_list>(<argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"uint64"</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>stoul</name></name><argument_list>(<argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"double"</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>stod</name></name><argument_list>(<argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>option_type</name> <operator>==</operator> <literal type="string">"string"</literal></expr>)</condition> <block>{<block_content>
                 <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"value"</literal></expr>]</index></name> <operator>=</operator> <name>value_s</name></expr>;</expr_stmt>
               </block_content>}</block></if></if_stmt>
             </block_content>}</block></else></if_stmt>
             <return>return <expr><name>res</name></expr>;</return>
           </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_all_option_names"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name><operator>::</operator><name>GetAllOptionNames</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_pattern"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name><operator>::</operator><name>EnablePattern</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"disable_pattern"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name><operator>::</operator><name>DisablePattern</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_pattern_enabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>platform</name><operator>::</operator><name>ipu</name><operator>::</operator><name>IpuStrategy</name><operator>::</operator><name>IsPatternEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"enable_autotune"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <return>return <expr><call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneStatus</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>EnableAutoTune</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_autotune"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <return>return <expr><call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneStatus</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisableAutoTune</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_autotune_range"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>stop</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneStatus</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetAutoTuneRange</name><argument_list>(<argument><expr><name>start</name></expr></argument>,
                                                                      <argument><expr><name>stop</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"update_autotune_status"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <return>return <expr><call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneStatus</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Update</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_low_precision_op_list"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>dict</name></name> <name>op_list</name></type></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name> <name>list_op</name> = <name><name>phi</name><operator>::</operator><name>KernelFactory</name><operator>::</operator><name>Instance</name></name>(</type></decl>).GetLowPrecisionKernelList(</decl_stmt>)</block_content></block></lambda></expr></argument>;
    for <argument><expr><operator>(</operator><name>auto</name> <name>iter</name> <operator>=</operator> <call><name><name>list_op</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>iter</name> <operator>!=</operator> <call><name><name>list_op</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <name>iter</name><operator>++</operator><operator>)</operator> <block>{
      <expr><name>auto</name> <name>op_name</name> <operator>=</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;
      <expr><name>auto</name> <name>counts</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>second</name></name></expr>;
      <expr><name><name>op_list</name><index>[<expr><name>op_name</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>counts</name><operator>.</operator><name>fp16_called_</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
                         <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>counts</name><operator>.</operator><name>bf16_called_</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
                         <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>counts</name><operator>.</operator><name>fp32_called_</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
                         <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name><name>counts</name><operator>.</operator><name>other_called_</name></name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>
    <return>return <expr><name>op_list</name></expr>;</return></argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"autotune_status"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>dict</name></name> <name>res</name></type></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneCache</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"step_id"</literal></expr>]</index></name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneStatus</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>StepID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"cache_size"</literal></expr>]</index></name> <operator>=</operator> <call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneCache</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="string">"cache_hit_rate"</literal></expr>]</index></name> <operator>=</operator>
        <call><name><name>phi</name><operator>::</operator><name>autotune</name><operator>::</operator><name>AutoTuneCache</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CacheHitRate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"enable_layout_autotune"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <return>return <expr><call><name><name>egr</name><operator>::</operator><name>Controller</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>EnableLayoutAutoTune</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"disable_layout_autotune"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <return>return <expr><call><name><name>egr</name><operator>::</operator><name>Controller</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisableLayoutAutoTune</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"use_layout_autotune"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <return>return <expr><call><name><name>egr</name><operator>::</operator><name>Controller</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>UseLayoutAutoTune</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Add the api for nan op debug</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_nan_inf_debug_path"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>paddle</name><operator>::</operator><name>framework</name><operator>::</operator><name>details</name><operator>::</operator><name>SetNanInfDebugPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>BindFleetWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindIO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindParallelExecutor</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindPlace</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindTensor</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_PSLIB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_HETERPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>BindHeterWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindMetrics</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_HETERPS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindPSGPUWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_PSLIB</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindAfsWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>BindGlooWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindBoxHelper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_BOX_PS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindBoxWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_NCCL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RCCL</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>BindNCCLWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_GLOO</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindGlooContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>BindGraph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindPass</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindInferenceApi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCompatible</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindDataset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGenerator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PADDLE_NO_PYTHON</name></cpp:ifndef>
  <expr_stmt><expr><call><name>BindDistributed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_ASCEND</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindAscendWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindAscendGraph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindAscendDevice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_CRYPTO</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindCrypto</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>PADDLE_WITH_PSCORE</name></expr></cpp:if>
  <expr_stmt><expr><call><name>BindDistFleetWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindPSHost</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindCommunicatorContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindDistCommunicator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindHeterClient</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphPyFeatureNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphPyService</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphPyServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphPyClient</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindIndexNode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindTreeIndex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindIndexWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindIndexSampler</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PADDLE_WITH_HETERPS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>BindNodeQueryResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindNeighborSampleQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindNeighborSampleResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindGraphGpuWrapper</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PADDLE_WITH_RPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>BindWorkerInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BindFuture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>InitAndSetAgentInstance</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>InvokeRpc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartClient</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StopWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetWorkerInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetWorkerInfoByRank</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetCurrentWorkerInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetAllWorkerInfos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
}  <comment type="line">// namespace pybind</comment>
}  <comment type="line">// namespace paddle</comment>
</unit>
