<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\Paddle-develop\paddle\fluid\pybind\rpc.cc" version="211" hash="74735e1a2fa788f11a981240c122a5a348d1eb45"><comment type="line">//   Copyright (c) 2022 PaddlePaddle Authors. All Rights Reserved.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//     http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/pybind/rpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/distributed/rpc/future_wrapper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/distributed/rpc/python_rpc_handler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"paddle/fluid/distributed/rpc/rpc_agent.h"</cpp:file></cpp:include>

<namespace>namespace <name>py</name> = <name>pybind11</name>;</namespace>
<using>using <name><name>paddle</name><operator>::</operator><name>distributed</name><operator>::</operator><name>FutureWrapper</name></name>;</using>
<using>using <name><name>paddle</name><operator>::</operator><name>distributed</name><operator>::</operator><name>PythonRpcHandler</name></name>;</using>
<using>using <name><name>paddle</name><operator>::</operator><name>distributed</name><operator>::</operator><name>RpcAgent</name></name>;</using>
<using>using <name><name>paddle</name><operator>::</operator><name>distributed</name><operator>::</operator><name>WorkerInfo</name></name>;</using>
<namespace>namespace <name>paddle</name> <block>{
<namespace>namespace <name>pybind</name> <block>{

<function><type><name>void</name></type> <name>BindWorkerInfo</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>WorkerInfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="string">"WorkerInfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>name_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"rank"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>id_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"ip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>ip_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>port_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__str__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>to_string</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__repr__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WorkerInfo</name><operator>::</operator><name>to_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>BindFuture</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>FutureWrapper</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FutureWrapper</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="string">"Future"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"wait"</literal></expr></argument>,
           <argument><expr><operator>&amp;</operator><name><name>FutureWrapper</name><operator>::</operator><name>wait</name></name></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>InitAndSetAgentInstance</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"init_and_set_agent_instance"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WorkerInfo</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>infos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>RpcAgent</name></expr></argument>&gt;</argument_list></name>(<name>name</name></type></decl>, <decl><type ref="prev"/><name>infos</name></decl>);</decl_stmt>
        <expr_stmt><expr><call><name><name>instance</name><operator>-&gt;</operator><name>SetAgentInstance</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"infos"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>InvokeRpc</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"invoke_rpc"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>py_func</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>FutureWrapper</name></expr></argument>&gt;</argument_list></name><argument_list>(
            <argument><expr><call><name><name>instance</name><operator>-&gt;</operator><name>InvokeRpc</name></name><argument_list>(<argument><expr><name>py_func</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>timeout_ms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"to"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"py_func"</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"timeout_ms"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>StartWorker</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_start_worker"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <expr_stmt><expr><call><name><name>instance</name><operator>-&gt;</operator><name>StartWorker</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>StartClient</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_start_client"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <expr_stmt><expr><call><name><name>instance</name><operator>-&gt;</operator><name>StartClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>StopWorker</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_stop_worker"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <expr_stmt><expr><call><name><name>instance</name><operator>-&gt;</operator><name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>GetWorkerInfo</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_get_worker_info"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <return>return <expr><call><name><name>instance</name><operator>-&gt;</operator><name>GetWorkerInfo</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>GetWorkerInfoByRank</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_get_worker_info_by_rank"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>rank</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <return>return <expr><call><name><name>instance</name><operator>-&gt;</operator><name>GetWorkerInfoById</name></name><argument_list>(<argument><expr><name>rank</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"rank"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>GetCurrentWorkerInfo</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_get_current_worker_info"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <return>return <expr><call><name><name>instance</name><operator>-&gt;</operator><name>GetCurrentWorkerInfo</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>GetAllWorkerInfos</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name><modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"rpc_get_all_worker_infos"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name> <name>instance</name> = <name><name>RpcAgent</name><operator>::</operator><name>RpcAgentInstance</name></name>(</type></decl>);</decl_stmt>
        <return>return <expr><call><name><name>instance</name><operator>-&gt;</operator><name>GetAllWorkerInfos</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>call_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>gil_scoped_release</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block></namespace>  <comment type="line">// namespace pybind</comment>
}</block></namespace>  <comment type="line">// namespace paddle</comment>
</unit>
