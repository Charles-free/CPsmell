<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="tfe_wrapper.cc" hash="31d7bcf13e202dd2277c022cf9d4d7a93a483340"><comment type="block">/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");;
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Python.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/strings/match.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/strings/str_format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/strings/str_join.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"absl/strings/str_split.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/chrono.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/complex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/functional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/pybind11.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/pytypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind11/stl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/c_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/c_api_experimental.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/c_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/c_api_experimental.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/c_api_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/dlpack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/tfe_cancellation_manager_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/tfe_context_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/eager/tfe_tensorhandle_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/tf_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/c/tf_status_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/compiler/jit/flags.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/compiler/jit/get_compiler_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/core/common_runtime/eager/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/eager/pywrap_tensor_conversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/eager/pywrap_tfe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/lib/core/py_exception_registry.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/lib/core/pybind11_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/lib/core/pybind11_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/lib/core/safe_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/lib/core/safe_pyobject_ptr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tensorflow/python/util/util.h"</cpp:file></cpp:include>

<namespace>namespace <name>py</name> = <name>pybind11</name>;</namespace>

<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_Executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_ContextOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringCounter0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringCounter1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringCounter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGauge0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGauge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGauge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGauge3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGauge4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringIntGauge0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringIntGauge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringIntGauge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringBoolGauge0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringBoolGauge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringBoolGauge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringSampler0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringSampler1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringSampler2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringCounterCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringIntGaugeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringStringGaugeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringBoolGaugeCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TFE_MonitoringSamplerCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TF_DeviceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TF_Function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PYBIND11_MAKE_OPAQUE</name><argument_list>(<argument><expr><name>TF_Buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Eager helper functions migrated from pywrap_tfe.i.</comment>

<namespace>namespace <name>tensorflow</name> <block>{

<comment type="line">// We cannot use Context as an opaque type. SWIG also had</comment>
<comment type="line">// difficult directly passing the pointer around. These</comment>
<comment type="line">// typemaps are migrated over from pywrap_tfe.i. I tried</comment>
<comment type="line">// using a custom type caster, but we get segfaults periodically.</comment>

<comment type="line">// TODO(amitpatankar): Move input and output logic of Context into a</comment>
<comment type="line">// pybind11 custom type caster.</comment>

<function><type><name>TFE_Context</name><modifier>*</modifier></type> <name>InputTFE_Context</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>TFE_Context</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>PyCapsule_GetPointer</name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name><modifier>*</modifier></type> <name>OutputTFE_Context</name><parameter_list>(<parameter><decl><type><name>TFE_Context</name><modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>PyCapsule_New</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>TFE_DeleteContextCapsule</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TF_Buffer</name><modifier>*</modifier></type> <name>ProtoStringToTFBuffer</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Convert a Python string object to TF_Buffer.</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>c_string</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>py_size</name></decl>;</decl_stmt>
  <comment type="line">// PyBytes_AsStringAndSize() does not copy but simply interprets the input</comment>
  <if_stmt><if>if <condition>(<expr><call><name>PyBytes_AsStringAndSize</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>py_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// Python has raised an error (likely TypeError or UnicodeEncodeError).</comment>
    <throw>throw <expr><call><name><name>py</name><operator>::</operator><name>error_already_set</name></name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>TF_NewBufferFromString</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>c_string</name></expr></argument>)</argument_list></cast></expr></argument>,
                                <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>py_size</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// These functions are typemaps from the Python side. I did not use</comment>
<comment type="line">// a custom type caster since the logic is slightly harder to follow. This</comment>
<comment type="line">// converter is also only used once in `TFE_Py_ExecuteCancelable_wrapper`.</comment>
<function><type><name>TFE_InputTensorHandles</name></type> <name>InputTFE_InputTensorHandles</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>input_tensors</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFE_InputTensorHandles</name></type> <name>input_tensor_handles</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>Py_None</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyList_Check</name><argument_list>(<argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowTypeError</name></name><argument_list>(<argument><expr><literal type="string">"must provide a list of Tensors as inputs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>len</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>input_tensor_handles</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>elem</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>elem</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowTypeError</name></name><argument_list>(<argument><expr><literal type="string">"Input Tensor does not exist."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>EagerTensor_CheckExact</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>input_tensor_handles</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>EagerTensor_Handle</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>tensorflow</name><operator>::</operator><name>swig</name><operator>::</operator><name>IsEagerTensorSlow</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Use equivalent of object.__getattribute__ to get the underlying</comment>
        <comment type="line">// tf wrapped EagerTensor (if there is one).</comment>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>tf_should_use_attr</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
            <argument><expr><macro><name>PyString_InternFromString</name><argument_list>(<argument><literal type="string">"_tf_should_use_wrapped_value"</literal></argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <call><name>PyUnicode_InternFromString</name><argument_list>(<argument><expr><literal type="string">"_tf_should_use_wrapped_value"</literal></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        )</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>value_attr</name><argument_list>(
            <argument><expr><call><name>PyObject_GenericGetAttr</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><call><name><name>tf_should_use_attr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value_attr</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// This is an EagerTensor wrapped inside a TFShouldUse wrapped object.</comment>
          <expr_stmt><expr><operator>(</operator><name>input_tensor_handles</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>EagerTensor_Handle</name><argument_list>(<argument><expr><call><name><name>value_attr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <comment type="line">// This is a subclass of EagerTensor that we don't support.</comment>
          <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowTypeError</name></name><argument_list>(
              <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
                  <argument><expr><literal type="string">"Saw an object that is an instance of a strict subclass of "</literal>
                  <literal type="string">"EagerTensor, which is not supported.  Item "</literal></expr></argument>,
                  <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">" is type: "</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_name</name></name></expr></argument>)</argument_list></call>
                  <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>tensorflow</name><operator>::</operator><name>swig</name><operator>::</operator><name>IsTensor</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// If it isnt an EagerTensor, but is still a Tensor, it must be a graph</comment>
        <comment type="line">// tensor.</comment>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>py_tensor_repr</name><argument_list>(<argument><expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>tensor_repr</name> <init>=
            <expr><ternary><condition><expr><name>py_tensor_repr</name></expr> ?</condition><then> <expr><call><name>TFE_GetPythonString</name><argument_list>(<argument><expr><call><name><name>py_tensor_repr</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                           </then><else>: <expr><literal type="string">"&lt;unknown&gt;"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>py_op</name><argument_list>(<argument><expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><literal type="string">"op"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>py_defined_graph</name><argument_list>(
            <argument><expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name><name>py_op</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"graph"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>py_defined_graph_str</name><argument_list>(
            <argument><expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><call><name><name>py_defined_graph</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>defined_graph_str</name> <init>=
            <expr><ternary><condition><expr><name>py_defined_graph_str</name></expr>
                ?</condition><then> <expr><call><name>TFE_GetPythonString</name><argument_list>(<argument><expr><call><name><name>py_defined_graph_str</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><literal type="string">"&lt;unknown&gt;"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name></type> <name>c_op</name><argument_list>(
            <argument><expr><call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><call><name><name>py_op</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_c_op"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>node</name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>TF_Operation</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>c_op</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>node</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>node_name_str</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>frame_str</name></decl>, <decl><type ref="prev"/><name>traceback_str</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>stack_trace</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>GetStackTrace</name></name><argument_list>()</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>auto</name></type> <name>frame</name> <init>= <expr><call><name><name>stack_trace</name><operator>-&gt;</operator><name>LastUserFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>frame_str</name> <operator>=</operator>
              <call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"File \"%s\", line %d, in %s"</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>file_name</name></name></expr></argument>,
                              <argument><expr><name><name>frame</name><operator>.</operator><name>line_number</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>function_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>auto</name></type> <name>stack_trace_list</name> <init>=
              <expr><call><name><name>absl</name><operator>::</operator><name>StrSplit</name></name><argument_list>(<argument><expr><call><name><name>stack_trace</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>(<argument><expr><block>{<expr><literal type="boolean">true</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>traceback_str</name> <operator>=</operator> <call><name><name>absl</name><operator>::</operator><name>StrJoin</name></name><argument_list>(
              <argument><expr><name>stack_trace_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>absl</name><operator>::</operator><name>StrAppend</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"    "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>frame_str</name> <operator>=</operator> <literal type="string">"&lt;unknown&gt;"</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>traceback_str</name> <operator>=</operator> <literal type="string">"&lt;unknown&gt;\n"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// Keep in sync with func_graph.py.</comment>
        <comment type="line">// TODO(b/200991648): Unify those two paths.</comment>
        <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowTypeError</name></name><argument_list>(
            <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
                <argument><expr><name>tensor_repr</name></expr></argument>,
                <argument><expr><literal type="string">" is out of scope and cannot be used here. "</literal>
                <literal type="string">"Use return values, explicit Python locals or TensorFlow "</literal>
                <literal type="string">"collections to access it.\n"</literal>
                <literal type="string">"Please see https://www.tensorflow.org/guide/"</literal>
                <literal type="string">"function#all_outputs_of_a_tffunction_must_be_return_values "</literal>
                <literal type="string">"for more information.\n\n"</literal></expr></argument>,
                <argument><expr><name>tensor_repr</name></expr></argument>, <argument><expr><literal type="string">" was defined here:\n"</literal></expr></argument>, <argument><expr><name>traceback_str</name></expr></argument>,
                <argument><expr><literal type="string">"\nThe tensor "</literal></expr></argument>, <argument><expr><name>tensor_repr</name></expr></argument>,
                <argument><expr><literal type="string">" cannot be accessed from here, because it was "</literal>
                <literal type="string">"defined in "</literal></expr></argument>,
                <argument><expr><name>defined_graph_str</name></expr></argument>, <argument><expr><literal type="string">", which is out of scope."</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowTypeError</name></name><argument_list>(
            <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
                <argument><expr><literal type="string">"provided list of inputs contains objects other "</literal>
                <literal type="string">"than 'EagerTensor'. Item "</literal></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">" is type: "</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_name</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>input_tensor_handles</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// These functions are typemaps from the Python side. I did not use</comment>
<comment type="line">// a custom type caster since the logic is slightly harder to follow. This</comment>
<comment type="line">// converter is also only used once in `TFE_Py_ExecuteCancelable_wrapper`.</comment>
<comment type="line">// This function actually takes a number rather than an output Tensor holder.</comment>
<function><type><name>TFE_OutputTensorHandles</name></type> <name>InputTFE_OutputTensorHandles</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>num_outputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFE_OutputTensorHandles</name></type> <name>output_tensor_handles</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyInt_Check</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyLong_Check</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                    <argument><expr><literal type="string">"expected an integer value (size of the number of "</literal>
                    <literal type="string">"outputs of the operation)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <throw>throw <expr><call><name><name>py</name><operator>::</operator><name>error_already_set</name></name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>long</name></type> <name>sz</name> <init>= <expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// NOLINT</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>long</name></type> <name>sz</name> <init>= <expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// NOLINT</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="line">// PyLong_AsLong might throw an error if an overflow occurs.</comment>
  <if_stmt><if>if <condition>(<expr><call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
                                          <argument><expr><literal type="string">"Number of outputs is too big: "</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <throw>throw <expr><call><name><name>py</name><operator>::</operator><name>error_already_set</name></name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// We can't handle more than int32 sizes for number of outputs.</comment>
  <if_stmt><if>if <condition>(<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></cast> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>  <comment type="line">// NOLINT</comment>
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_ValueError</name></expr></argument>, <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
                                          <argument><expr><literal type="string">"Number of outputs is too big: "</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <throw>throw <expr><call><name><name>py</name><operator>::</operator><name>error_already_set</name></name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
    <expr_stmt><expr><call><name><name>output_tensor_handles</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>output_tensor_handles</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><call><name><name>num_outputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>output_tensor_handles</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><modifier>*</modifier></type> <name>GetMatchedDevice</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>auto</name><operator>*</operator> <name>context</name> <operator>=</operator> <cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>ImmediateExecutionContext</name></name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(
      <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>DeviceNameUtils</name><operator>::</operator><name>ParsedName</name></name></type> <name>input_device_name</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tensorflow</name><operator>::</operator><name>DeviceNameUtils</name><operator>::</operator><name>ParseFullOrLocalName</name></name><argument_list>(<argument><expr><name>device_name</name></expr></argument>,
                                                         <argument><expr><operator>&amp;</operator><name>input_device_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowValueError</name></name><argument_list>(
        <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Failed parsing device name: '%s'. Note a valid device "</literal>
                        <literal type="string">"string should at least contain a device type and a "</literal>
                        <literal type="string">"device index, like \"GPU:0\"."</literal></expr></argument>,
                        <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><operator>*</operator></expr></argument>&gt;</argument_list></name></type> <name>devices</name> <init>= <expr><call><name><name>context</name><operator>-&gt;</operator><name>ListLocalTfDevices</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><modifier>*</modifier></type> <name>matched_device</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>device_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>device_idx</name> <operator>&lt;</operator> <call><name><name>devices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>device_idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><modifier>*</modifier></type> <name>device</name> <init>= <expr><name><name>devices</name><index>[<expr><name>device_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>tensorflow</name><operator>::</operator><name>DeviceNameUtils</name><operator>::</operator><name>AreCompatibleDevNames</name></name><argument_list>(
            <argument><expr><name>input_device_name</name></expr></argument>, <argument><expr><call><name><name>device</name><operator>-&gt;</operator><name>parsed_name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>matched_device</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowValueError</name></name><argument_list>(
            <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Multiple devices match the provided string "</literal>
                            <literal type="string">"'%s': '%s' and '%s'."</literal></expr></argument>,
                            <argument><expr><name>device_name</name></expr></argument>, <argument><expr><call><name><name>matched_device</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>device</name><operator>-&gt;</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>matched_device</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>matched_device</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowValueError</name></name><argument_list>(
        <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"No matching devices found for '%s'"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>matched_device</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Packs multiple `EagerTensor`s of the same dtype and shape into one</comment>
<comment type="line">// `EagerTensor`.</comment>
<function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>TFE_Py_PackEagerTensors_wrapper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>,
                                           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFE_Context</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFE_InputTensorHandles</name></type> <name>handles</name> <init>= <expr><call><name>InputTFE_InputTensorHandles</name><argument_list>(<argument><expr><name>tensors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name></type> <name>status</name> <init>= <expr><call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>handles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFE_TensorHandle</name><modifier>*</modifier></type> <name>packed_handle</name> <init>=
      <expr><call><name>TFE_CreatePackedTensorHandle</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name><name>handles</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>packed_tensor</name> <init>=
      <expr><call><name>EagerTensorFromHandle</name><argument_list>(<argument><expr><name>packed_handle</name></expr></argument>, <comment type="block">/*is_packed=*/</comment><argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>packed_tensor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// This function was created from fusing the typemap logic in platform/base.i.</comment>
<function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>TFE_Py_ExecuteCancelable_wrapper</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>op_name</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>attrs</name></decl></parameter>,
    <parameter><decl><type><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name></name><modifier>*</modifier></type> <name>cancellation_manager</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>num_outputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TFE_Context</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFE_InputTensorHandles</name></type> <name>input_tensor_handles</name> <init>=
      <expr><call><name>InputTFE_InputTensorHandles</name><argument_list>(<argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TFE_OutputTensorHandles</name></type> <name>output_tensor_handles</name> <init>=
      <expr><call><name>InputTFE_OutputTensorHandles</name><argument_list>(<argument><expr><name>num_outputs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name></type> <name>status</name> <init>= <expr><call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TFE_Py_ExecuteCancelable</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>op_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_tensor_handles</name></expr></argument>,
                           <argument><expr><call><name><name>attrs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>wrap</name></name><argument_list>(<argument><expr><name>cancellation_manager</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>output_tensor_handles</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>output_len</name> <init>= <expr><call><name><name>output_tensor_handles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>output_list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name>output_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>output_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>output</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>EagerTensorFromHandle</name><argument_list>(<argument><expr><call><name><name>output_tensor_handles</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>output_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>output_list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>py</name><operator>::</operator><name>object</name></name></type> <name>TF_ListPhysicalDevices</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>devices</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Status</name></name></type> <name>s</name> <init>=
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>DeviceFactory</name><operator>::</operator><name>ListAllPhysicalDevices</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>devices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MaybeRaiseRegisteredFromStatus</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><call><name><name>devices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>dev</name> <operator>:</operator> <name>devices</name></expr></init>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>dev_obj</name> <init>= <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><call><name><name>dev</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dev</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dev_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>py</name><operator>::</operator><name>object</name></name></type> <name>TF_ListPluggablePhysicalDevices</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>devices</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Status</name></name></type> <name>s</name> <init>=
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>DeviceFactory</name><operator>::</operator><name>ListPluggablePhysicalDevices</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>devices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>MaybeRaiseRegisteredFromStatus</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Safe_PyObjectPtr</name></type> <name>result</name><argument_list>(<argument><expr><call><name>PyList_New</name><argument_list>(<argument><expr><call><name><name>devices</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>dev</name> <operator>:</operator> <name>devices</name></expr></init>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>dev_obj</name> <init>= <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><call><name><name>dev</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dev</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dev_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>TF_GetDeviceDetails</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name></type> <name>status</name> <init>= <expr><call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name>TF_NewStatus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>device_details</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Status</name></name></type> <name>s</name> <init>=
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>DeviceFactory</name><operator>::</operator><name>GetAnyDeviceDetails</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_details</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>Set_TF_Status_from_Status</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MaybeRaiseRegisteredFromTFStatus</name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>device_details</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>py</name><operator>::</operator><name>object</name></name></type> <name>TFE_ClearScalarCache</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>TFE_TensorHandleCache</name><operator>::</operator><name>Get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns compiler IR for a given function.</comment>
<function><type><specifier>static</specifier> <name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>TFE_GetCompilerIr</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>concrete_function_name</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>,
                                   <parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>flat_arg_inputs</name></decl></parameter>,
                                   <parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>captured_inputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>EagerContext</name><modifier>*</modifier></type> <name>context</name> <init>= <expr><call><name>ContextFromInterface</name><argument_list>(
      <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>ImmediateExecutionContext</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>InputTFE_Context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s_stage</name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IrExportStage</name></type> <name>selected_stage</name> <init>= <expr><call><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"hlo"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>HLO</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"hlo_no_metadata"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>HLO_NO_METADATA</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"hlo_serialized"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>HLO_SERIALIZED</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"optimized_hlo"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>OPTIMIZED_HLO</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"optimized_hlo_serialized"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>OPTIMIZED_HLO_SERIALIZED</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"optimized_hlo_proto_serialized"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>OPTIMIZED_HLO_PROTO_SERIALIZED</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s_stage</name> <operator>==</operator> <literal type="string">"optimized_hlo_dot"</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>IrExportStage</name><operator>::</operator><name>OPTIMIZED_HLO_DOT</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ThrowValueError</name><argument_list>(
          <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Invalid stage selected: '%s'. Valid values are: "</literal>
                          <literal type="string">"'hlo', 'hlo_serialized', 'optimized_hlo', "</literal>
                          <literal type="string">"'optimized_hlo_serialized', 'optimized_hlo_dot'"</literal></expr></argument>,
                          <argument><expr><name>s_stage</name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></lambda><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CompilerArgSource</name></type> <name>compiler_arg_source</name> <init>= <expr><call><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PyList_Size</name><argument_list>(<argument><expr><call><name><name>flat_arg_inputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>CompilerArgSource</name><operator>::</operator><name>CONCRETE_INPUT</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier> <name>elem</name> = <name>PyList_GetItem</name>(<name><name>flat_arg_inputs</name><operator>.</operator><name>ptr</name></name>(</type></decl>)<operator>,</operator> 0</decl_stmt>)</block_content></block></lambda></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>swig</name><operator>::</operator><name>IsTensorSpec</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>CompilerArgSource</name><operator>::</operator><name>TENSOR_SPEC</name></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>swig</name><operator>::</operator><name>IsTensor</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>CompilerArgSource</name><operator>::</operator><name>CONCRETE_INPUT</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ThrowValueError</name><argument_list>(
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>strings</name><operator>::</operator><name>StrCat</name></name><argument_list>(
              <argument><expr><literal type="string">"Only accept tf.TensorSpec or tf.Tensor but got type "</literal></expr></argument>,
              <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_name</name></name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function><expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>flat_arg_len</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><call><name><name>flat_arg_inputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Py_ssize_t</name></type> <name>captured_input_len</name> <init>= <expr><call><name>PyList_Size</name><argument_list>(<argument><expr><call><name><name>captured_inputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ArgShapeAndDType</name></expr></argument>&gt;</argument_list></name></type> <name>flat_args</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>TensorHandle</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>captured_input_handles</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>compiler_arg_source</name> <operator>==</operator> <name><name>CompilerArgSource</name><operator>::</operator><name>TENSOR_SPEC</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>flat_args</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>flat_arg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>captured_input_handles</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>captured_input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>Py_ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>flat_arg_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>elem_ptr</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><call><name><name>flat_arg_inputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>elem</name> <init>= <expr><call><name><name>py</name><operator>::</operator><name>reinterpret_borrow</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>object</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>elem_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>py_dtype</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><literal type="string">"dtype"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>py_shape</name> <init>= <expr><call><name><name>elem</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><literal type="string">"shape"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>dtype</name> <init>= <expr><call><name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>py_dtype</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><literal type="string">"_type_enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>auto</name></type> <name>shape</name> <init>= <expr><call><name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>py_shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>flat_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dtype</name> <operator>=</operator> <call><name>DataType</name><argument_list>(<argument><expr><name>dtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>flat_args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <call><name>TensorShape</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>compiler_arg_source</name> <operator>==</operator> <name><name>CompilerArgSource</name><operator>::</operator><name>CONCRETE_INPUT</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>captured_input_handles</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>flat_arg_len</name> <operator>+</operator> <name>captured_input_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TFE_InputTensorHandles</name></type> <name>handles</name> <init>=
        <expr><call><name>InputTFE_InputTensorHandles</name><argument_list>(<argument><expr><name>flat_arg_inputs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>TFE_TensorHandle</name><modifier>*</modifier></type> <name>tensor_handle</name> <range>: <expr><name>handles</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>AbstractTensorHandle</name><modifier>*</modifier></type> <name>abstract_tensor_handle</name> <init>= <expr><call><name>unwrap</name><argument_list>(<argument><expr><name>tensor_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>captured_input_handles</name><operator>.</operator><name>push_back</name></name><argument_list>(
          <argument><expr><call><name>TensorHandleFromInterface</name><argument_list>(<argument><expr><name>abstract_tensor_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TFE_InputTensorHandles</name></type> <name>handles</name> <init>= <expr><call><name>InputTFE_InputTensorHandles</name><argument_list>(<argument><expr><name>captured_inputs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>TFE_TensorHandle</name><modifier>*</modifier></type> <name>tensor_handle</name> <range>: <expr><name>handles</name></expr></range></decl></init>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>AbstractTensorHandle</name><modifier>*</modifier></type> <name>abstract_tensor_handle</name> <init>= <expr><call><name>unwrap</name><argument_list>(<argument><expr><name>tensor_handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>captured_input_handles</name><operator>.</operator><name>push_back</name></name><argument_list>(
        <argument><expr><call><name>TensorHandleFromInterface</name><argument_list>(<argument><expr><name>abstract_tensor_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name><name>DeviceNameUtils</name><operator>::</operator><name>ParsedName</name></name></type> <name>input_device_name</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DeviceNameUtils</name><operator>::</operator><name>ParseFullOrLocalName</name></name><argument_list>(<argument><expr><name>device_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input_device_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ThrowValueError</name><argument_list>(
        <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Failed parsing device name: '%s'"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Device</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>devices</name> <init>= <expr><call><name><name>context</name><operator>-&gt;</operator><name>local_device_mgr</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>ListDevices</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>selected_device</name> <init>= <expr><call><name><name>absl</name><operator>::</operator><name>c_find_if</name></name><argument_list>(<argument><expr><name>devices</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Device</name><modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>DeviceNameUtils</name><operator>::</operator><name>AreCompatibleDevNames</name></name><argument_list>(<argument><expr><name>input_device_name</name></expr></argument>,
                                                  <argument><expr><call><name><name>d</name><operator>-&gt;</operator><name>parsed_name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>selected_device</name> <operator>==</operator> <call><name><name>devices</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ThrowValueError</name><argument_list>(
        <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"No matching device found for '%s'"</literal></expr></argument>, <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>StatusOr</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>hlo_str</name> <init>= <expr><call><name>GetCompilerIr</name><argument_list>(
      <argument><expr><name>selected_stage</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>-&gt;</operator><name>pflr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>concrete_function_name</name></expr></argument>, <argument><expr><operator>*</operator><name>selected_device</name></expr></argument>,
      <argument><expr><name>context</name></expr></argument>, <argument><expr><name>flat_args</name></expr></argument>, <argument><expr><name>captured_input_handles</name></expr></argument>, <argument><expr><name>compiler_arg_source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hlo_str</name><operator>.</operator><name>ok</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ThrowValueError</name><argument_list>(<argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Failed getting HLO text: '%s'"</literal></expr></argument>,
                                    <argument><expr><call><name><name>hlo_str</name><operator>.</operator><name>status</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>error_message</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>py</name><operator>::</operator><name>bytes</name></name><argument_list>(<argument><expr><operator>*</operator><name>hlo_str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

}</block></namespace>  <comment type="line">// namespace tensorflow</comment>

<namespace>namespace <block>{

<comment type="line">// Wrapper around the EagerContextThreadLocalData struct (defined in</comment>
<comment type="line">// pywrap_tfe.h), so it can be accessed from Python.</comment>
<comment type="line">//</comment>
<comment type="line">// For PyObject* fields, the get_*() methods return a new reference; and the</comment>
<comment type="line">// set_*() methods create a new reference (i.e., they do not steal a reference).</comment>
<class>class <name>EagerContextThreadLocalDataWrapper</name> <block>{<private type="default">
 </private><public>public:
  <constructor><specifier>explicit</specifier> <name>EagerContextThreadLocalDataWrapper</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>py_eager_context</name></decl></parameter>,
                                              <parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>is_eager</name></decl></parameter>,
                                              <parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>device_spec</name></decl></parameter>)</parameter_list>
      <member_init_list>: <call><name>py_eager_context_</name><argument_list>(<argument><expr><call><name><name>py_eager_context</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MakeEagerContextThreadLocalData</name></name><argument_list>(
        <argument><expr><call><name><name>py_eager_context</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>is_eager</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>device_spec</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <destructor><name>~EagerContextThreadLocalDataWrapper</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>DestroyEagerContextThreadLocalData</name></name><argument_list>(<argument><expr><name>py_eager_context_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></destructor>

  <function><type><name>bool</name></type> <name>get_is_eager</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_eager</name></expr>;</return> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_is_eager</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>is_eager</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

  <function><type><name>bool</name></type> <name>get_invoking_op_callbacks</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>invoking_op_callbacks</name></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_invoking_op_callbacks</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>invoking_op_callbacks</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>get_device_name</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>device_name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_device_name</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>get_scope_name</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>scope_name</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_scope_name</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>scope_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>get_device_spec</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>device_spec</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_device_spec</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>device_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>get_function_call_options</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>function_call_options</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_function_call_options</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>function_call_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>get_executor</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>executor</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_executor</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>get_op_callbacks</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name>GetPyObject</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>op_callbacks</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><name>void</name></type> <name>set_op_callbacks</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>SetPyObject</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>GetData</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>op_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

 </public><private>private:
  <function><type><name><name>tensorflow</name><operator>::</operator><name>EagerContextThreadLocalData</name></name><modifier>*</modifier></type> <name>GetData</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <expr_stmt><expr><name>auto</name><operator>*</operator> <name>result</name> <operator>=</operator>
        <call><name><name>tensorflow</name><operator>::</operator><name>GetEagerContextThreadLocalData</name></name><argument_list>(<argument><expr><name>py_eager_context_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
      <throw>throw <expr><call><name><name>py</name><operator>::</operator><name>error_already_set</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><name><name>py</name><operator>::</operator><name>object</name></name></type> <name>GetPyObject</name><parameter_list>(<parameter><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name><modifier>*</modifier></type> <name>obj</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name><name>pybind11</name><operator>::</operator><name>reinterpret_borrow</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>object</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>-&gt;</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>SetPyObject</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_PyObjectPtr</name></name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ptr</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>py_eager_context_</name></decl>;</decl_stmt>  <comment type="line">// not owned (borrowed reference).</comment>
</private>}</block>;</class>

}</block></namespace>  <comment type="line">// namespace</comment>

<comment type="line">// py::return_value_policy::reference is defined as specified by the</comment>
<comment type="line">// pybind11 documents listed here.</comment>
<comment type="line">// https://pybind11.readthedocs.io/en/stable/advanced/functions.html#return-value-policies</comment>
<comment type="line">// This means that C++ maintains ownership of the object. We</comment>
<comment type="line">// are only assigning this to functions that return opaque types.</comment>

<macro><name>PYBIND11_MODULE</name><argument_list>(<argument>_pywrap_tfe</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_Executor</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_Executor_class</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_Executor"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_ContextOptions</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_ContextOptions_class</name><argument_list>(<argument><expr><name>m</name></expr></argument>,
                                                          <argument><expr><literal type="string">"TFE_ContextOptions"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringCounter0</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringCounter0_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringCounter0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringCounter1</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringCounter1_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringCounter1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringCounter2</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringCounter2_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringCounter2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGauge0</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGauge0_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGauge0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGauge1</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGauge1_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGauge1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGauge2</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGauge2_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGauge2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGauge3</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGauge3_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGauge3"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGauge4</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGauge4_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGauge4"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringIntGauge0</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringIntGauge0_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringIntGauge0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringIntGauge1</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringIntGauge1_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringIntGauge1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringIntGauge2</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringIntGauge2_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringIntGauge2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringBoolGauge0</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringBoolGauge0_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringBoolGauge0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringBoolGauge1</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringBoolGauge1_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringBoolGauge1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringBoolGauge2</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringBoolGauge2_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringBoolGauge2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringCounterCell</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringCounterCell_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringCounterCell"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringIntGaugeCell</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringIntGaugeCell_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringIntGaugeCell"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringStringGaugeCell</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringStringGaugeCell_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringStringGaugeCell"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringBoolGaugeCell</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringBoolGaugeCell_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringBoolGaugeCell"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringSamplerCell</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringSamplerCell_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringSamplerCell"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringBuckets</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringBuckets_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringBuckets"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringSampler0</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringSampler0_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringSampler0"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringSampler1</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringSampler1_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringSampler1"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_MonitoringSampler2</name></expr></argument>&gt;</argument_list></name></type> <name>TFE_MonitoringSampler2_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_MonitoringSampler2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name></name></expr></argument>&gt;</argument_list></name></type> <name>TFE_CancellationManager_class</name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_CancellationManager"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TF_DeviceList</name></expr></argument>&gt;</argument_list></name></type> <name>TF_DeviceList_class</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TF_DeviceList"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TF_Function</name></expr></argument>&gt;</argument_list></name></type> <name>TF_Function_class</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TF_Function"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterExceptionClass"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_RegisterExceptionClass</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterFallbackExceptionClass"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
        <argument><expr><call><name>TFE_Py_RegisterFallbackExceptionClass</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_GetMemoryInfo"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><modifier>*</modifier> <name>matched_device</name> =
        <name><name>tensorflow</name><operator>::</operator><name>GetMatchedDevice</name></name>(<name>ctx</name></type></decl>, <decl><type ref="prev"/><name>device_name</name></decl>);</decl_stmt>

    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>AllocatorAttributes</name></name> <name>attrs</name></type></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Allocator</name></name><modifier>*</modifier> <name>allocator</name> = <name><name>matched_device</name><operator>-&gt;</operator><name>GetAllocator</name></name>(<name>attrs</name></type></decl>);</decl_stmt>

    <if_stmt><if>if <condition>(<decl><type><name><name>absl</name><operator>::</operator><name>optional</name><argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>AllocatorStats</name></name></expr></argument>&gt;</argument_list></name> <name>stats</name> =
            <name><name>allocator</name><operator>-&gt;</operator><name>GetStats</name></name>(</type></decl>))</condition> <block>{<block_content>
      <return>return <expr><call><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>{<argument><expr><block>{<expr><literal type="string">"current"</literal></expr>, <expr><name><name>stats</name><operator>-&gt;</operator><name>bytes_in_use</name></name></expr>}</block></expr></argument>,
                                            <block>{<block_content><expr_stmt><expr><literal type="string">"peak"</literal></expr><operator>,</operator> <expr><name><name>stats</name><operator>-&gt;</operator><name>peak_bytes_in_use</name></name></expr></expr_stmt>}</block_content>}</block>;</argument_list></call></expr></return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowValueError</name></name><argument_list>(
        <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Allocator stats not available for device '%s'"</literal></expr></argument>,
                        <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ResetMemoryStats"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Device</name></name><modifier>*</modifier> <name>matched_device</name> =
        <name><name>tensorflow</name><operator>::</operator><name>GetMatchedDevice</name></name>(<name>ctx</name></type></decl>, <decl><type ref="prev"/><name>device_name</name></decl>);</decl_stmt>

    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>AllocatorAttributes</name></name> <name>attrs</name></type></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Allocator</name></name><modifier>*</modifier> <name>allocator</name> = <name><name>matched_device</name><operator>-&gt;</operator><name>GetAllocator</name></name>(<name>attrs</name></type></decl>);</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>allocator</name><operator>-&gt;</operator><name>ClearStats</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ThrowValueError</name></name><argument_list>(
          <argument><expr><call><name><name>absl</name><operator>::</operator><name>StrFormat</name></name><argument_list>(<argument><expr><literal type="string">"Cannot reset memory stats for device '%s'"</literal></expr></argument>,
                          <argument><expr><name>device_name</name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// XLA Eager Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_SetXlaEnableLazyCompilation"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_SetXlaEnableLazyCompilation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_SetTfXlaCpuGlobalJit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_SetTfXlaCpuGlobalJit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_SetXlaAutoJitMode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_SetXlaAutoJitMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_SetXlaConstantFoldingDisabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_SetXlaConstantFoldingDisabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_GetXlaConstantFoldingDisabled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_GetXlaConstantFoldingDisabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_SetXlaMinClusterSize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_SetXlaMinClusterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_GetCompilerIr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>TFE_GetCompilerIr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// MLIR Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_IsMlirBridgeEnabled"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <comment type="line">// Since python protobuf enums are integers, cast to an integer before</comment>
    <comment type="line">// returning the enum to python.</comment>
    <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><argument_list>(
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>GetMlirCommonFlags</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>tf_mlir_enable_mlir_bridge</name></expr></argument>)</argument_list></cast></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_EnableMlirBridge"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>GetMlirCommonFlags</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>tf_mlir_enable_mlir_bridge</name> <operator>=</operator>
        <ternary><condition><expr><name>enabled</name></expr>
            ?</condition><then> <expr><name><name>tensorflow</name><operator>::</operator><name>ConfigProto</name><operator>::</operator><name>Experimental</name><operator>::</operator><name>MLIR_BRIDGE_ROLLOUT_ENABLED</name></name></expr>
            </then><else>: <expr><name><name>tensorflow</name><operator>::</operator><name>ConfigProto</name><operator>::</operator><name>Experimental</name><operator>::</operator>
                  <name>MLIR_BRIDGE_ROLLOUT_DISABLED</name></name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_EnableXlaDevices"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture> <block>{<block_content>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>GetXlaDeviceFlags</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>tf_xla_enable_xla_devices</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_ResetJitCompilerFlags"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture> <block>{<block_content> <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>ResetJitCompilerFlags</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_Context Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_NewContext"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TFE_ContextOptions</name><modifier>*</modifier></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>TFE_Context</name><operator>*</operator> <name>context</name> <operator>=</operator> <call><name>TFE_NewContext</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>OutputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      </block_content>}</block><operator>,</operator>
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_DeleteContext"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_DeleteContext</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_ContextListDevices"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_ContextListDevices</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_SetLogicalCpuDevices"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_cpus</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><call><name>TFE_SetLogicalCpuDevices</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_cpus</name></expr></argument>,
                                 <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_HostAddressSpace"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>TF_Buffer</name><modifier>&amp;</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_HostAddressSpace</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextAddFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>TF_Function</name><modifier>*</modifier></type> <name>func</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextAddFunction</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>,
                           <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextAddFunctionDef"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>serialized_function_def</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
          <argument><expr><call><name>TFE_ContextAddFunctionDef</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>serialized_function_def</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
                                    <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextGetFunctionDef"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>function_name</name></decl></parameter>, <parameter><decl><type><name>TF_Buffer</name><modifier>&amp;</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
          <argument><expr><call><name>TFE_ContextGetFunctionDef</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>function_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextRemoveFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextRemoveFunction</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                              <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextHasFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
        <call><name>TFE_ContextHasFunction</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextListFunctionNames"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>unwrap</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>-&gt;</operator><call><name>ListFunctionNames</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextEnableRunMetadata"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextEnableRunMetadata</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextDisableRunMetadata"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextEnableRunMetadata</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextEnableGraphCollection"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextEnableGraphCollection</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextDisableGraphCollection"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextDisableGraphCollection</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextExportRunMetadata"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>TF_Buffer</name><modifier>&amp;</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextExportRunMetadata</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>,
                                 <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextClearCaches"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextClearCaches</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_GetContextId"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>TFE_GetContextId</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextGetDevicePlacementPolicy"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>TFE_ContextGetDevicePlacementPolicy</name><argument_list>(
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetThreadLocalDevicePlacementPolicy"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>TFE_ContextDevicePlacementPolicy</name></type> <name>policy</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_ContextSetThreadLocalDevicePlacementPolicy</name><argument_list>(
              <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetServerDef"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_alive_secs</name></decl></parameter>,
                                      <parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_BufferPtr</name></name> <name>buf</name> <operator>=</operator>
        <call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>ProtoStringToTFBuffer</name></name><argument_list>(<argument><expr><call><name><name>proto</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>TFE_ContextSetServerDef</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keep_alive_secs</name></expr></argument>,
                            <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>length</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextUpdateServerDef"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_alive_secs</name></decl></parameter>,
                                         <parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_BufferPtr</name></name> <name>buf</name> <operator>=</operator>
        <call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>ProtoStringToTFBuffer</name></name><argument_list>(<argument><expr><call><name><name>proto</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name>TFE_ContextUpdateServerDef</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>keep_alive_secs</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name></expr></argument>,
                               <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>length</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextCheckAlive"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>worker_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name>bool</name> <name>output</name> <operator>=</operator> <call><name>TFE_ContextCheckAlive</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>worker_name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSyncExecutors"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <comment type="line">// NOTE: release Python GIL for pending PyFunc ops to be executed properly.</comment>
    <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name>TFE_ContextAsyncWait</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextClearExecutors"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <comment type="line">// NOTE: release Python GIL for pending PyFunc ops to be executed properly.</comment>
    <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name>TFE_ContextAsyncWait</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;</argument_list></call></expr></expr_stmt>
    <comment type="line">// NOTE: different from TFE_ContextSyncExecutors that raises potential</comment>
    <comment type="line">// errors, deliberately ignore executor statuses in cleanup.</comment>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_InsertConfigKeyValue"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>config_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>config_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name>TFE_InsertConfigKeyValue</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_key</name></expr></argument>,
                                 <argument><expr><name>config_value</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_GetConfigKeyValue"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>config_key</name></decl></parameter>, <parameter><decl><type><name>TF_Buffer</name><modifier>&amp;</modifier></type> <name>config_value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name>TFE_GetConfigKeyValue</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_key</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>config_value</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_DeleteConfigKeyValue"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>config_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name>TFE_DeleteConfigKeyValue</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_key</name></expr></argument>,
                                 <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_ReportErrorToCluster"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>error_message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><call><name>TFE_ReportErrorToCluster</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error_code</name></expr></argument>,
                                 <argument><expr><name>error_message</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetSoftDevicePlacement"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextSetSoftDevicePlacement</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enable</name></expr></argument>,
                                      <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetLogDevicePlacement"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextSetSoftDevicePlacement</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enable</name></expr></argument>,
                                      <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetRunEagerOpAsFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextSetRunEagerOpAsFunction</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>enable</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetJitCompileRewrite"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TFE_ContextSetJitCompileRewrite</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enable</name></expr></argument>,
                                    <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_GetTaskStates"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>job_names</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>task_nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    if <argument><expr><operator>(</operator><call><name><name>job_names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>task_nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
      <expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"The size of job names is not equal to the size of task nums."</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>
    <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>CoordinatedTask</name></name></expr></argument>&gt;</argument_list></name> <name>coordinated_tasks</name></expr></argument>;
    for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <call><name><name>job_names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
      <for>for <control>(<init><decl><type><name>size_t</name> <name>j</name> = 0</type></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>task_nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>coordinated_task</name> <operator>=</operator> <call><name><name>coordinated_tasks</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coordinated_task</name><operator>.</operator><name>set_job_name</name></name><argument_list>(<argument><expr><name><name>job_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coordinated_task</name><operator>.</operator><name>set_task_id</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
    }
    size_t task_len = coordinated_tasks.size(</block></for>)</block></expr></argument>;
    <argument><expr><name>auto</name> <name>state</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name><name>TF_Status</name><index>[]</index></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>task_len</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>TF_Buffer</name> <name>tasks</name></expr></argument>;
    <argument><expr><name><name>tasks</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name><name>coordinated_tasks</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tasks</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>task_len</name></expr></argument>;
    <argument><expr><call><name>TFE_GetTaskStates</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tasks</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>py</name><operator>::</operator><name>list</name></name> <call><name>output</name><argument_list>(<argument><expr><name>task_len</name></expr></argument>)</argument_list></call></expr></argument>;
    for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <name>task_len</name>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
      <expr><name>auto</name> <name>code</name> <operator>=</operator> <call><name>TF_GetCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name><name>TF_Code</name><operator>::</operator><name>TF_OK</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>dict</name></name> <name>payloads</name></type></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>payload</name> :
             <name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>GetPayloads</name></name>(<name><name>state</name><index>[<expr><name>i</name></expr>]</index></name>.<name>status</name></type></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></if></if_stmt></block></expr></argument>)</argument_list></call> <block>{
          <expr><name><name>payloads</name><index>[<expr><call><name><name>payload</name><operator>.</operator><name>first</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <name><name>payload</name><operator>.</operator><name>second</name></name></expr>;
        }</block>
        <name>auto</name> <name>exception_class</name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>reinterpret_steal</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>object</name></name></expr></argument>&gt;</argument_list></name><argument_list>(
            <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>PyExceptionRegistry</name><operator>::</operator><name>Lookup</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>exception_class</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>Internal</name></name><argument_list>(<argument><expr><call><name><name>absl</name><operator>::</operator><name>StrCat</name></name><argument_list>(
              <argument><expr><literal type="string">"Fail to find the corresponding exception class for "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exception_class</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>TF_Message</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payloads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      } else <block>{<block_content>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
    }
    tensorflow<expr_stmt><expr><call><name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ptr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_WaitAtBarrier"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>barrier_id</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout_in_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;

          <argument><expr><call><name>TFE_WaitAtBarrier</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>barrier_id</name></expr></argument>,
                            <argument><expr><name>timeout_in_ms</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>

  <comment type="line">// TFE_Executor logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_NewExecutor"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_async</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>enable_streaming_enqueue</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>in_flight_nodes_limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TFE_Executor</name><modifier>*</modifier> <name>exc</name> = <name>TFE_NewExecutor</name>(<name>is_async</name></type></decl>, <decl><type ref="prev"/><name>enable_streaming_enqueue</name></decl>,
                                            <decl><type ref="prev"/><name>in_flight_nodes_limit</name></decl>);</decl_stmt>
        <return>return <expr><name>exc</name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_DeleteExecutor"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_DeleteExecutor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ExecutorIsAsync"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_ExecutorIsAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ExecutorWaitForAllPendingNodes"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>TFE_Executor</name><modifier>&amp;</modifier></type> <name>exc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <comment type="line">// NOTE: release Python GIL for pending PyFunc ops to be executed properly.</comment>
    <argument><expr><name>Py_BEGIN_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name>TFE_ExecutorWaitForAllPendingNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>Py_END_ALLOW_THREADS</name></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ExecutorClearError"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_ExecutorClearError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextSetExecutorForThread"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>,
                                              <parameter><decl><type><name>TFE_Executor</name><modifier>&amp;</modifier></type> <name>exc</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_ContextSetExecutorForThread</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_ContextGetExecutorForThread"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>TFE_ContextGetExecutorForThread</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_OpNameGetAttrType"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>op_or_function_name</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>attr_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name> <name>temp</name> = 0</type></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier> <name>is_list</name> = reinterpret_cast<name/>&lt;<name>unsigned</name> <name>char</name><modifier>*</modifier>&gt;(<modifier>&amp;</modifier><name>temp</name></type></decl>);</decl_stmt>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
          <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_OpNameGetAttrType</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name>op_or_function_name</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>,
                                              <argument><expr><name>is_list</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></cpp:if>
          <argument><expr><name>PyObject</name><operator>*</operator> <name>output_pyo</name> <operator>=</operator> <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <argument><expr><name>PyObject</name><operator>*</operator> <name>output_pyo</name> <operator>=</operator> <call><name>PyLong_FromLong</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          if <argument><expr><operator>(</operator><operator>*</operator><name>is_list</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <block>{
            <expr><name>PyObject</name><operator>*</operator> <name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>output_pyo</name></expr></argument>)</argument_list></call></expr>;
            <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></expr></argument></argument_list></call></expr></expr_stmt>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>output_pyo</name></expr></argument>)</argument_list></call></expr>;</return>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_InitEagerTensor"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_InitEagerTensor</name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_PackEagerTensors"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>handles</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>TFE_Py_PackEagerTensors_wrapper</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>handles</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_SetEagerTensorProfiler"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_Py_SetEagerTensorProfiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterJVPFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_RegisterJVPFunction</name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterGradientFunction"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_RegisterGradientFunction</name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_Execute"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>op_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>num_outputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>TFE_Py_ExecuteCancelable_wrapper</name></name><argument_list>(
              <argument><expr><name>context</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>inputs</name></expr></argument>, <argument><expr><call><name><name>attrs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>,
              <argument><expr><name>num_outputs</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_Py_ExecuteCancelable"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>op_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>attrs</name></decl></parameter>,
         <parameter><decl><type><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name></name><modifier>&amp;</modifier></type> <name>cancellation_manager</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>num_outputs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>TFE_Py_ExecuteCancelable_wrapper</name></name><argument_list>(
            <argument><expr><name>context</name></expr></argument>, <argument><expr><name>device_name</name></expr></argument>, <argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>inputs</name></expr></argument>, <argument><expr><call><name><name>attrs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>cancellation_manager</name></expr></argument>, <argument><expr><name>num_outputs</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_FastPathExecute"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>args</name></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TFE_Py_FastPathExecute requires error checking prior to returning.</comment>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_FastPathExecute_C</name><argument_list>(<argument><expr><call><name><name>args</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RecordGradient"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>op_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>results</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>forward_pass_name_scope</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_RecordGradient</name><argument_list>(
              <argument><expr><call><name><name>op_name</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>inputs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attrs</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>results</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>forward_pass_name_scope</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_UID"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_UID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_Py_Tape Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetNew"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>persistent</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>watch_accessed_variables</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
        <argument><expr><call><name>TFE_Py_TapeSetNew</name><argument_list>(<argument><expr><call><name><name>persistent</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>watch_accessed_variables</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetAdd"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>TFE_Py_TapeSetAdd</name><argument_list>(<argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetRemove"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>TFE_Py_TapeSetRemove</name><argument_list>(<argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetStopOnThread"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_Py_TapeSetStopOnThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetRestartOnThread"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_Py_TapeSetRestartOnThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetIsStopped"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeSetIsStopped</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetIsEmpty"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeSetIsEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetShouldRecordBackprop"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
        <argument><expr><call><name>TFE_Py_TapeSetShouldRecordBackprop</name><argument_list>(<argument><expr><call><name><name>tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetPossibleGradientTypes"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
        <argument><expr><call><name>TFE_Py_TapeSetPossibleGradientTypes</name><argument_list>(<argument><expr><call><name><name>tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetDeleteTrace"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_Py_TapeSetDeleteTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeSetRecordOperation"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>output_tensors</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>input_tensors</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>backward_function</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>forward_function</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeSetRecordOperation</name><argument_list>(
              <argument><expr><call><name><name>op_type</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>output_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>backward_function</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>forward_function</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_Py_TapeSetRecordOperationBackprop"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>output_tensors</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>input_tensors</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>backward_function</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeSetRecordOperationBackprop</name><argument_list>(
            <argument><expr><call><name><name>op_type</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>output_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>backward_function</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_Py_TapeSetRecordOperationForwardprop"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>op_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>output_tensors</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>input_tensors</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>backward_function</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>forwardprop_output_indices</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeSetRecordOperationForwardprop</name><argument_list>(
            <argument><expr><call><name><name>op_type</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>output_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>input_tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>backward_function</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>forwardprop_output_indices</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeGradient"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>target</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>sources</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>output_gradients</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>sources_raw</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>unconnected_gradients</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
          <argument><expr><name>PyObject</name><operator>*</operator> <name>output</name> <operator>=</operator> <call><name>TFE_Py_TapeGradient</name><argument_list>(
              <argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>target</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sources</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>output_gradients</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>sources_raw</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>unconnected_gradients</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          return <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeVariableAccessed"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>variable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_Py_TapeVariableAccessed</name><argument_list>(<argument><expr><call><name><name>variable</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeWatch"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensor</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_Py_TapeWatch</name><argument_list>(<argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tensor</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeWatchVariable"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>variable</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_Py_TapeWatchVariable</name><argument_list>(<argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>variable</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TapeWatchedVariables"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tape</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TapeWatchedVariables</name><argument_list>(<argument><expr><call><name><name>tape</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_Py_VariableWatcher logic.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_VariableWatcherNew"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_VariableWatcherNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_VariableWatcherRemove"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>variable_watcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>TFE_Py_VariableWatcherRemove</name><argument_list>(<argument><expr><call><name><name>variable_watcher</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_VariableWatcherVariableAccessed"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>variable</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_Py_VariableWatcherVariableAccessed</name><argument_list>(<argument><expr><call><name><name>variable</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_VariableWatcherWatchedVariables"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>variable_watcher</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
              <argument><expr><call><name>TFE_Py_VariableWatcherWatchedVariables</name><argument_list>(<argument><expr><call><name><name>variable_watcher</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_Py_ForwardAccumulator logic.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorNew"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_batch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_ForwardAccumulatorNew</name><argument_list>(<argument><expr><name>use_batch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorSetAdd"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>accumulator</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
        <argument><expr><call><name>TFE_Py_ForwardAccumulatorSetAdd</name><argument_list>(<argument><expr><call><name><name>accumulator</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorSetRemove"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>accumulator</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_Py_ForwardAccumulatorSetRemove</name><argument_list>(<argument><expr><call><name><name>accumulator</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorWatch"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>accumulator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensor</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tangent</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name>TFE_Py_ForwardAccumulatorWatch</name><argument_list>(<argument><expr><call><name><name>accumulator</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tensor</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>tangent</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorJVP"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>accumulator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensor</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
              <argument><expr><call><name>TFE_Py_ForwardAccumulatorJVP</name><argument_list>(<argument><expr><call><name><name>accumulator</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tensor</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorPushState"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_ForwardAccumulatorPushState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_ForwardAccumulatorPopState"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_ForwardAccumulatorPopState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_PackJVPs"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_PackJVPs</name><argument_list>(<argument><expr><call><name><name>tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_ContextOptions Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_NewContextOptions"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_NewContextOptions</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetConfig"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>TFE_ContextOptions</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
                                          <parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_BufferPtr</name></name> <name>buf</name> <operator>=</operator>
        <call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>ProtoStringToTFBuffer</name></name><argument_list>(<argument><expr><call><name><name>proto</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>TFE_ContextOptionsSetConfig</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>length</name></expr></argument>,
                                <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetDevicePlacementPolicy"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>TFE_ContextOptionsSetDevicePlacementPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetTfrt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_ContextOptionsSetTfrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Experimental feature, intentionally not exposed as a C API yet.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetRunEagerOpAsFunction"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>TFE_ContextOptions</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>run_eager_op_as_function</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>run_eager_op_as_function</name></name> <operator>=</operator> <name>run_eager_op_as_function</name></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetJitCompileRewrite"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>TFE_ContextOptions</name><modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>jit_compile_rewrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>jit_compile_rewrite</name></name> <operator>=</operator> <name>jit_compile_rewrite</name></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ContextOptionsSetAsync"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_ContextOptionsSetAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_DeleteContextOptions"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_DeleteContextOptions</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_Py_TensorShape Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TensorShapeSlice"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_dim</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(
              <argument><expr><call><name>TFE_Py_TensorShapeSlice</name><argument_list>(<argument><expr><call><name><name>tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>slice_dim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_TensorShapeOnDevice"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>tensors</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type> <name>slice_dim</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_TensorShapeOnDevice</name><argument_list>(<argument><expr><call><name><name>tensors</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_EnableInteractivePythonLogging"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>TFE_Py_EnableInteractivePythonLogging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Additional Context Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_SetEagerContext"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_SetEagerContext</name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_SetCEagerContext"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO(mdan): This cast might need rewriting to ImmediateExecutionContext.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>ctx</name><operator>.</operator><name>is_none</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>SetCEagerContext</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>SetCEagerContext</name></name><argument_list>(<argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name><name>tensorflow</name><operator>::</operator><name>EagerContext</name></name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterVSpace"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><call><name>TFE_Py_RegisterVSpace</name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_EnableCollectiveOps"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name></type> <name>proto</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_BufferPtr</name></name> <name>buf</name> <operator>=</operator>
        <call><name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>ProtoStringToTFBuffer</name></name><argument_list>(<argument><expr><call><name><name>proto</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>TFE_EnableCollectiveOps</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>data</name></expr></argument>,
                            <argument><expr><call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>length</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_AbortCollectiveOps"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><call><name>TF_SetStatus</name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>TF_Code</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>TFE_AbortCollectiveOps</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_CollectiveOpsCheckPeerHealth"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout_in_ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
              <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
          <argument><expr><call><name>TFE_CollectiveOpsCheckPeerHealth</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>task</name></expr></argument>, <argument><expr><name>timeout_in_ms</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
          <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
        })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_ListPhysicalDevices"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>TF_ListPhysicalDevices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_ListPluggablePhysicalDevices"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>TF_ListPluggablePhysicalDevices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_GetDeviceDetails"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>TF_GetDeviceDetails</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_DeleteDeviceList"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_DeleteDeviceList</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_DeviceListCount"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_DeviceListCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_DeviceListName"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TF_DeviceList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TF_DeviceListName</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_DeviceListType"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TF_DeviceList</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TF_DeviceListType</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_PickUnusedPortOrDie"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_PickUnusedPortOrDie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_MonitoringCounter Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringCounterCellIncrementBy"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>TFE_MonitoringCounterCellIncrementBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringCounterCellValue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringCounterCellValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewCounter0"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewCounter0</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteCounter0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteCounter0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellCounter0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellCounter0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewCounter1"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewCounter1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteCounter1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteCounter1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellCounter1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellCounter1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewCounter2"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewCounter2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>,
                                                <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteCounter2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteCounter2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellCounter2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellCounter2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_MonitoringIntGauge Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringIntGaugeCellSet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringIntGaugeCellSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringIntGaugeCellValue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringIntGaugeCellValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewIntGauge0"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewIntGauge0</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteIntGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteIntGauge0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellIntGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellIntGauge0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewIntGauge1"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewIntGauge1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteIntGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteIntGauge1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellIntGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellIntGauge1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewIntGauge2"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewIntGauge2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteIntGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteIntGauge2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellIntGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellIntGauge2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringStringGaugeCellSet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringStringGaugeCellSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringStringGaugeCellValue"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>TFE_MonitoringStringGaugeCellValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewStringGauge0"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewStringGauge0</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

  <comment type="line">// TFE_MonitoringStringGauge Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteStringGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteStringGauge0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellStringGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellStringGauge0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewStringGauge1"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewStringGauge1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteStringGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteStringGauge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellStringGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellStringGauge1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewStringGauge2"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewStringGauge2</name><argument_list>(
            <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteStringGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteStringGauge2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellStringGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellStringGauge2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewStringGauge3"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label3</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewStringGauge3</name><argument_list>(
            <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>, <argument><expr><name>label3</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteStringGauge3"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteStringGauge3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellStringGauge3"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellStringGauge3</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewStringGauge4"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label4</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewStringGauge4</name><argument_list>(
            <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>, <argument><expr><name>label3</name></expr></argument>, <argument><expr><name>label4</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteStringGauge4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteStringGauge4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellStringGauge4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellStringGauge4</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_MonitoringBoolGauge Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringBoolGaugeCellSet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringBoolGaugeCellSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringBoolGaugeCellValue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringBoolGaugeCellValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewBoolGauge0"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewBoolGauge0</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteBoolGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteBoolGauge0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellBoolGauge0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellBoolGauge0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewBoolGauge1"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewBoolGauge1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteBoolGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteBoolGauge1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellBoolGauge1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellBoolGauge1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewBoolGauge2"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewBoolGauge2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteBoolGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteBoolGauge2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellBoolGauge2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellBoolGauge2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_MonitoringSampler Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringSamplerCellAdd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringSamplerCellAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringSamplerCellValue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringSamplerCellValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringNewExponentialBuckets"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>TFE_MonitoringNewExponentialBuckets</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteBuckets"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteBuckets</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewSampler0"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TFE_MonitoringBuckets</name><modifier>*</modifier></type> <name>buckets</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator>
            <call><name>TFE_MonitoringNewSampler0</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buckets</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteSampler0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteSampler0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellSampler0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellSampler0</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewSampler1"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TFE_MonitoringBuckets</name><modifier>*</modifier></type> <name>buckets</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewSampler1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buckets</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteSampler1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteSampler1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellSampler1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellSampler1</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"TFE_MonitoringNewSampler2"</literal></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TFE_MonitoringBuckets</name><modifier>*</modifier></type> <name>buckets</name></decl></parameter>,
         <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>description</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
            <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        <argument><expr><name>auto</name> <name>output</name> <operator>=</operator> <call><name>TFE_MonitoringNewSampler2</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buckets</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><name>description</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
        return <argument><expr><name>output</name></expr></argument>;</argument_list></call></expr></expr_stmt>
      },
      <expr_stmt><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringDeleteSampler2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringDeleteSampler2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_MonitoringGetCellSampler2"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TFE_MonitoringGetCellSampler2</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TFE_CancellationManager Logic</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_NewCancellationManager"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>new</operator> <call><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_CancellationManagerIsCancelled"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name><operator>::</operator><name>IsCancelled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_CancellationManagerStartCancel"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>CancellationManager</name><operator>::</operator><name>StartCancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ClearScalarCache"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tensorflow</name><operator>::</operator><name>TFE_ClearScalarCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Util buffer helper functions</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TF_NewBufferFromString"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TF_NewBufferFromString</name></expr></argument>,
        <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// DLPack functions</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_ToDlpackCapsule"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier> <name>eager_tensor_pyobject_ptr</name> = <name><name>o</name><operator>.</operator><name>ptr</name></name>(</type></decl>);</decl_stmt>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;

    if <argument><expr><operator>(</operator><operator>!</operator><call><name>EagerTensor_CheckExact</name><argument_list>(<argument><expr><name>eager_tensor_pyobject_ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <block>{
      <expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"The argument to `to_dlpack` must be a TF tensor, not Python object"</literal></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <name>TFE_TensorHandle</name><operator>*</operator> <name>thandle</name> <operator>=</operator> <call><name>EagerTensor_Handle</name><argument_list>(<argument><expr><name>eager_tensor_pyobject_ptr</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>void</name><operator>*</operator> <name>dlm_ptr</name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>TFE_HandleToDLPack</name></name><argument_list>(<argument><expr><name>thandle</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>py</name><operator>::</operator><name>capsule</name></name> <call><name>capsule</name><argument_list>(
        <argument><expr><name>dlm_ptr</name></expr></argument>, <argument><expr><name><name>tensorflow</name><operator>::</operator><name>kDlTensorCapsuleName</name></name></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>capsule</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>PyCapsule_IsValid</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>, <argument><expr><name><name>tensorflow</name><operator>::</operator><name>kDlTensorCapsuleName</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <name>dlm_rptr</name> =
                <name>PyCapsule_GetPointer</name>(<name>capsule</name></type></decl>, <decl><type ref="prev"/><name><name>tensorflow</name><operator>::</operator><name>kDlTensorCapsuleName</name></name></decl>);</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dlm_rptr</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>TFE_CallDLManagedTensorDeleter</name></name><argument_list>(<argument><expr><name>dlm_rptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>PyCapsule_SetDestructor</name><argument_list>(<argument><expr><name>capsule</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><name>capsule</name></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_FromDlpackCapsule"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>capsule</name></name><modifier>&amp;</modifier></type> <name>pycapsule</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    if <argument><expr><operator>(</operator><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>pycapsule</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
        <name><name>tensorflow</name><operator>::</operator><name>kDlTensorCapsuleName</name></name><operator>)</operator> <block>{
      <expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"DLPack tensor must be a capsule with name \"dltensor\", got \"%s\". "</literal>
          <literal type="string">"Note that a DLPack tensor may be consumed at most once."</literal></expr></argument>,
          <argument><expr><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>pycapsule</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <name>TFE_TensorHandle</name><operator>*</operator> <name>thandle</name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>TFE_HandleFromDLPack</name></name><argument_list>(
        <argument><expr><name>pycapsule</name></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name>PyCapsule_SetName</name><argument_list>(<argument><expr><call><name><name>pycapsule</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"used_dltensor"</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>PyCapsule_SetDestructor</name><argument_list>(<argument><expr><call><name><name>pycapsule</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>PyObject</name><operator>*</operator> <name>pyhandle</name> <operator>=</operator> <call><name>EagerTensorFromHandle</name><argument_list>(<argument><expr><name>thandle</name></expr></argument>)</argument_list></call></expr></argument>;
    return <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>PyoOrThrow</name></name><argument_list>(<argument><expr><name>pyhandle</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_IsCustomDevice"</literal></expr></argument>,
        <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <return>return <expr><call><name>TFE_IsCustomDevice</name><argument_list>(<argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"TFE_Py_RegisterCustomDevice"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>handle</name></name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>capsule</name></name><modifier>&amp;</modifier></type> <name>device</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>device_name</name></decl></parameter>,
                                          <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>capsule</name></name><modifier>&amp;</modifier></type> <name>device_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>tensorflow</name><operator>::</operator><name>Safe_TF_StatusPtr</name></name> <name>status</name> =
        <name><name>tensorflow</name><operator>::</operator><name>make_safe</name></name>(<name>TF_NewStatus</name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
    if <argument><expr><operator>(</operator><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="string">"TFE_CustomDevice"</literal><operator>)</operator> <block>{
      <expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"Expected a capsule named 'TFE_CustomDevice' for the `device` "</literal>
          <literal type="string">"argument, got "</literal></expr></argument>,
          <argument><expr><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
      <expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block></expr></argument>
    <if_stmt><if>if <condition>(<expr><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>device_info</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
        <literal type="string">"TFE_CustomDevice_DeviceInfo"</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>status</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>tensorflow</name><operator>::</operator><name>errors</name><operator>::</operator><name>InvalidArgument</name></name><argument_list>(
          <argument><expr><literal type="string">"Expected a capsule named 'TFE_CustomDevice_DeviceInfo' for "</literal>
          <literal type="string">"the `device_info` argument, got "</literal></expr></argument>,
          <argument><expr><call><name><name>absl</name><operator>::</operator><name>string_view</name></name><argument_list>(<argument><expr><call><name><name>device_info</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt></argument_list></call></expr></expr_stmt>
    <comment type="line">// TFE_RegisterCustomDevice takes ownership</comment>
    <expr_stmt><expr><call><name>PyCapsule_SetDestructor</name><argument_list>(<argument><expr><call><name><name>device_info</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TFE_RegisterCustomDevice</name><argument_list>(
        <argument><expr><call><name><name>tensorflow</name><operator>::</operator><name>InputTFE_Context</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><operator>*</operator><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>TFE_CustomDevice</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(
            <argument><expr><call><name>PyCapsule_GetPointer</name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TFE_CustomDevice"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>,
        <argument><expr><name>device_name</name></expr></argument>,
        <argument><expr><call><name>PyCapsule_GetPointer</name><argument_list>(<argument><expr><call><name><name>device_info</name><operator>.</operator><name>ptr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TFE_CustomDevice_DeviceInfo"</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tensorflow</name><operator>::</operator><name>MaybeRaiseRegisteredFromTFStatus</name></name><argument_list>(<argument><expr><call><name><name>status</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  })<empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>EagerContextThreadLocalDataWrapper</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>,
                                                 <argument><expr><literal type="string">"EagerContextThreadLocalData"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>handle</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"py_eager_context"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"is_eager"</literal></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"device_spec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"is_eager"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_is_eager</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_is_eager</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(
          <argument><expr><literal type="string">"invoking_op_callbacks"</literal></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_invoking_op_callbacks</name></name></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_invoking_op_callbacks</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"device_name"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_device_name</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_device_name</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"scope_name"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_scope_name</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_scope_name</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"device_spec"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_device_spec</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_device_spec</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(
          <argument><expr><literal type="string">"function_call_options"</literal></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_function_call_options</name></name></expr></argument>,
          <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_function_call_options</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"executor"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_executor</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_executor</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property</name><argument_list>(<argument><expr><literal type="string">"op_callbacks"</literal></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>get_op_callbacks</name></name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name><name>EagerContextThreadLocalDataWrapper</name><operator>::</operator><name>set_op_callbacks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// C API Enum</comment>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>TFE_ContextDevicePlacementPolicy</name></expr></argument>&gt;</argument_list></name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TFE_ContextDevicePlacementPolicy"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TFE_DEVICE_PLACEMENT_EXPLICIT"</literal></expr></argument>, <argument><expr><name>TFE_DEVICE_PLACEMENT_EXPLICIT</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TFE_DEVICE_PLACEMENT_WARN"</literal></expr></argument>, <argument><expr><name>TFE_DEVICE_PLACEMENT_WARN</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TFE_DEVICE_PLACEMENT_SILENT"</literal></expr></argument>, <argument><expr><name>TFE_DEVICE_PLACEMENT_SILENT</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TFE_DEVICE_PLACEMENT_SILENT_FOR_INT32"</literal></expr></argument>,
             <argument><expr><name>TFE_DEVICE_PLACEMENT_SILENT_FOR_INT32</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>export_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>TF_AttrType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TF_AttrType"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_STRING"</literal></expr></argument>, <argument><expr><name>TF_ATTR_STRING</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_INT"</literal></expr></argument>, <argument><expr><name>TF_ATTR_INT</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_FLOAT"</literal></expr></argument>, <argument><expr><name>TF_ATTR_FLOAT</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_BOOL"</literal></expr></argument>, <argument><expr><name>TF_ATTR_BOOL</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_TYPE"</literal></expr></argument>, <argument><expr><name>TF_ATTR_TYPE</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_SHAPE"</literal></expr></argument>, <argument><expr><name>TF_ATTR_SHAPE</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_TENSOR"</literal></expr></argument>, <argument><expr><name>TF_ATTR_TENSOR</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_PLACEHOLDER"</literal></expr></argument>, <argument><expr><name>TF_ATTR_PLACEHOLDER</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TF_ATTR_FUNC"</literal></expr></argument>, <argument><expr><name>TF_ATTR_FUNC</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>export_values</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
};
</unit>
