<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\DLFs_dataset\chainer\chainer-7.8.1\chainerx_cc\chainerx\python\context.cc" hash="a46fffedd53bd1c5e5cceeaf00c4fcdd40e01f30"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/python/common_export.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/python/context.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pybind11/cast.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/device.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/python/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"chainerx/python/device.h"</cpp:file></cpp:include>

<namespace>namespace <name>chainerx</name> <block>{
<namespace>namespace <name>python</name> <block>{
<namespace>namespace <name>python_internal</name> <block>{

<namespace>namespace <name>py</name> = <name>pybind11</name>;</namespace>  <comment type="line">// standard convention</comment>
<using>using <name><name>py</name><operator>::</operator><name>literals</name><operator>::</operator><name>operator<name>""_a;

Context&amp; GetContext</name></name></name><argument_list>(<argument><expr><name><name>py</name><operator>::</operator><name>handle</name></name> <name>handle</name></expr></argument>)</argument_list> <argument_list>{
    if <argument><expr><operator>(</operator><call><name><name>handle</name><operator>.</operator><name>is_none</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
        <return>return <expr><call><name>GetDefaultContext</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></argument>

    <if_stmt><if>if <condition>(<expr><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name>Context</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>Context</name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

    <throw>throw <argument_list>py<argument><expr><call><name><operator>::</operator><name>type_error</name></name><argument_list>{<argument><expr><literal type="string">"Invalid Context type: "</literal> <operator>+</operator> <macro><name>py</name></macro><name><operator>::</operator><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name><operator>(</operator><call><name><name>py</name><operator>::</operator><name>repr</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>}</argument_list></call></expr></argument></argument_list></throw></expr>;</expr_stmt></if></if_stmt></argument_list></using>
}</block></namespace>

<class>class <name>PyContextScope</name> <block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>PyContextScope</name><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>target</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>target_</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>void</name></type> <name>Enter</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>scope_</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name>ContextScope</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>target_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>Exit</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>args</name></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>args</name></expr>;</expr_stmt>  <comment type="line">// unused</comment>
        <expr_stmt><expr><call><name><name>scope_</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

</public><private>private:
    <comment type="line">// TODO(beam2d): better to replace it by "optional"...</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ContextScope</name></expr></argument>&gt;</argument_list></name></type> <name>scope_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>target_</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>void</name></type> <name>InitChainerxContext</name><parameter_list>(<parameter><decl><type><name><name>pybind11</name><operator>::</operator><name>module</name></name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Context</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>{<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Context"</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_backend"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Context</name><operator>::</operator><name>GetBackend</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_device"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>device_name</name></decl></parameter>)</parameter_list> -&gt; <type><name>Device</name><modifier>&amp;</modifier></type> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetDevice</name></name><argument_list>(<argument><expr><name>device_name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_device"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>backend_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> -&gt; <type><name>Device</name><modifier>&amp;</modifier></type> <block>{<block_content>
              <return>return <expr><call><name><name>self</name><operator>.</operator><name>GetDevice</name></name><argument_list>(<argument><expr><block>{<expr><name>backend_name</name></expr>, <expr><name>index</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"make_backprop_id"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>backprop_name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>MakeBackpropId</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>backprop_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><literal type="string">"backprop_name"</literal><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"release_backprop_id"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BackpropId</name><modifier>&amp;</modifier></type> <name>backprop_id</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>ReleaseBackpropId</name></name><argument_list>(<argument><expr><name>backprop_id</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><literal type="string">"backprop_id"</literal><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// For testing</comment>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_check_valid_backprop_id"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BackpropId</name><modifier>&amp;</modifier></type> <name>backprop_id</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>self</name><operator>.</operator><name>CheckValidBackpropId</name></name><argument_list>(<argument><expr><name>backprop_id</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><literal type="string">"backprop_id"</literal><name>_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_backend"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GetBackend</name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_device"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>handle</name></name></type> <name>device</name></decl></parameter>)</parameter_list> -&gt; <type><name>Device</name><modifier>&amp;</modifier></type> <block>{<block_content> <return>return <expr><call><name>GetDevice</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>,
          <argument><expr><literal type="string">"device"</literal><name>_a</name> <operator>=</operator> <literal type="null">nullptr</literal></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_device"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>backend_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> -&gt; <type><name>Device</name><modifier>&amp;</modifier></type> <block>{<block_content>
              <return>return <expr><call><name><name>chainerx</name><operator>::</operator><name>GetDevice</name></name><argument_list>(<argument><expr><block>{<expr><name>backend_name</name></expr>, <expr><name>index</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_default_context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GetDefaultContext</name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_default_context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>SetDefaultContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_global_default_context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GetGlobalDefaultContext</name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_global_default_context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>SetGlobalDefaultContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitChainerxContextScope</name><parameter_list>(<parameter><decl><type><name><name>pybind11</name><operator>::</operator><name>module</name></name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>PyContextScope</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ContextScope"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__enter__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PyContextScope</name><operator>::</operator><name>Enter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"__exit__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PyContextScope</name><operator>::</operator><name>Exit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"context_scope"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Context</name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>PyContextScope</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

}</block></namespace>  <comment type="line">// namespace python_internal</comment>
}</block></namespace>  <comment type="line">// namespace python</comment>
}  <comment type="line">// namespace chainerx</comment>
</unit>
