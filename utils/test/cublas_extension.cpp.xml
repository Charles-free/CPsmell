<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="cublas_extension.cpp" hash="0537b142d9e5610d2953826bc9aaec04bbc2fa41"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/extension.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ATen/cuda/CUDAContext.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cublas_v2.h&gt;</cpp:file></cpp:include>

<function><type><name><name>torch</name><operator>::</operator><name>Tensor</name></name></type> <name>noop_cublas_function</name><parameter_list>(<parameter><decl><type><name><name>torch</name><operator>::</operator><name>Tensor</name></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cublasHandle_t</name></type> <name>handle</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TORCH_CUDABLAS_CHECK</name><argument_list>(<argument><expr><call><name>cublasCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TORCH_CUDABLAS_CHECK</name><argument_list>(<argument><expr><call><name>cublasDestroy</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<macro><name>PYBIND11_MODULE</name><argument_list>(<argument>TORCH_EXTENSION_NAME</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"noop_cublas_function"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>noop_cublas_function</name></expr></argument>, <argument><expr><literal type="string">"a cublas function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</unit>
