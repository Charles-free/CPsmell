<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\pytorch-master\torch\csrc\Generator.cpp" hash="d57e70fea78fed1d516975975d0aaa1e1384b637"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/Generator.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ATen/ATen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ATen/CPUGeneratorImpl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;structmember.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/Device.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/Exceptions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/THP.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/autograd/generated/VariableType.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/autograd/generated/variable_factories.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/autograd/python_variable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/utils/python_arg_parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/utils/tensor_types.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_CUDA</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ATen/cuda/CUDAGeneratorImpl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using <namespace>namespace <name>at</name>;</namespace></using>
<using>using <namespace>namespace <name>torch</name>;</namespace></using>

<decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>THPGeneratorClass</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

<function><type><name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_initDefaultGenerator</name><parameter_list>(<parameter><decl><type><name><name>at</name><operator>::</operator><name>Generator</name></name></type> <name>cdata</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>PyTypeObject</name><operator>*</operator><operator>)</operator><name>THPGeneratorClass</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>self</name> <init>= <expr><call><name>THPObjectPtr</name><argument_list>{<argument><expr><macro><name>type</name></macro><operator>-&gt;</operator><macro><name>tp_alloc</name><argument_list>(<argument>type</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>self</name></expr>)</condition><block type="pseudo"><block_content>
    <throw>throw <expr><call><name>python_error</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>self_</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>THPGenerator</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>self</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>self_</name><operator>-&gt;</operator><name>cdata</name></name> <operator>=</operator> <name>cdata</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>self</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>THPGenerator_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>self</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>THPGenerator</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>_self</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>defined</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>set_pyobj</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>~Generator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>_self</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>tp_free</name><argument_list>(<argument><expr><name>_self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_pynew</name><parameter_list>(
    <parameter><decl><type><name>PyTypeObject</name><modifier>*</modifier></type> <name>type</name></decl></parameter>,
    <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>args</name></decl></parameter>,
    <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>kwargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HANDLE_TH_ERRORS</name>
  <specifier>static</specifier> <name><name>torch</name><operator>::</operator><name>PythonArgParser</name></name></type> <name>parser</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"Generator(Device device=None)"</literal></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>torch</name><operator>::</operator><name>ParsedArgs</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>parsed_args</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>r</name> <init>= <expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>kwargs</name></expr></argument>, <argument><expr><name>parsed_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>device</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>deviceWithDefault</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>at</name><operator>::</operator><name>Device</name></name><argument_list>(<argument><expr><name><name>at</name><operator>::</operator><name>kCPU</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>THPGeneratorPtr</name></type> <name>self</name><argument_list>(<argument><expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_CUDA</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name><name>device</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>at</name><operator>::</operator><name>kCPU</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cdata</name></name> <operator>=</operator> <call><name><name>make_generator</name><argument_list type="generic">&lt;<argument><expr><name>CPUGeneratorImpl</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>device</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>at</name><operator>::</operator><name>kCUDA</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cdata</name></name> <operator>=</operator> <call><name><name>make_generator</name><argument_list type="generic">&lt;<argument><expr><name>CUDAGeneratorImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>index</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>AT_ERROR</name><argument_list>(
        <argument><expr><literal type="string">"Device type "</literal></expr></argument>,
        <argument><expr><call><name><name>c10</name><operator>::</operator><name>DeviceTypeName</name></name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">" is not supported for torch.Generator() api."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>TORCH_CHECK</name><argument_list>(
      <argument><expr><call><name><name>device</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>at</name><operator>::</operator><name>kCPU</name></name></expr></argument>,
      <argument><expr><literal type="string">"Device type "</literal></expr></argument>,
      <argument><expr><call><name><name>c10</name><operator>::</operator><name>DeviceTypeName</name></name><argument_list>(<argument><expr><call><name><name>device</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><literal type="string">" is not supported for torch.Generator() api."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>cdata</name></name> <operator>=</operator> <call><name><name>make_generator</name><argument_list type="generic">&lt;<argument><expr><name>CPUGeneratorImpl</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><call><name><name>self</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_getState</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>noargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <using>using <namespace>namespace <name><name>torch</name><operator>::</operator><name>autograd</name></name>;</namespace></using>
  <decl_stmt><decl><type><name>HANDLE_TH_ERRORS</name>
  <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>gen</name> <init>= <expr><operator>(</operator><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>_self</name><operator>)</operator><operator>-&gt;</operator><name>cdata</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// See Note [Acquire lock when using random generators]</comment>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><call><name><name>gen</name><operator>.</operator><name>mutex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>state_tensor</name> <init>= <expr><call><name><name>gen</name><operator>.</operator><name>get_state</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>THPVariable_Wrap</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>state_tensor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_setState</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_new_state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <using>using <namespace>namespace <name><name>torch</name><operator>::</operator><name>autograd</name></name>;</namespace></using>

  <macro><name>HANDLE_TH_ERRORS</name></macro>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>THPVariable_Check</name><argument_list>(<argument><expr><name>_new_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <throw>throw <expr><call><name><name>torch</name><operator>::</operator><name>TypeError</name></name><argument_list>(
        <argument><expr><literal type="string">"expected a torch.ByteTensor, but got %s"</literal></expr></argument>,
        <argument><expr><call><name>Py_TYPE</name><argument_list>(<argument><expr><name>_new_state</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>tp_name</name></expr></argument>)</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>self</name> <init>= <expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>gen</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>cdata</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>new_state_tensor</name> <init>= <expr><call><name>THPVariable_Unpack</name><argument_list>(<argument><expr><name>_new_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// See Note [Acquire lock when using random generators]</comment>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><call><name><name>gen</name><operator>.</operator><name>mutex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>gen</name><operator>.</operator><name>set_state</name></name><argument_list>(<argument><expr><name>new_state_tensor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_manualSeed</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HANDLE_TH_ERRORS</name>
  <specifier>auto</specifier></type> <name>self</name> <init>= <expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>generator</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>cdata</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>THPUtils_assert</name><argument_list>(
      <argument><expr><call><name>THPUtils_checkLong</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><literal type="string">"manual_seed expected a long, "</literal>
      <literal type="string">"but got %s"</literal></expr></argument>,
      <argument><expr><call><name>THPUtils_typename</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// See Note [Acquire lock when using random generators]</comment>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><call><name><name>generator</name><operator>.</operator><name>mutex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="line">// NOLINTNEXTLINE(cppcoreguidelines-init-variables)</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed_unpacked</name></decl>;</decl_stmt>
  <try>try <block>{<block_content>
    <comment type="line">// First try to interpret as unsigned long</comment>
    <expr_stmt><expr><name>seed_unpacked</name> <operator>=</operator> <call><name>THPUtils_unpackUInt64</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PyErr_ExceptionMatches</name><argument_list>(<argument><expr><name>PyExc_OverflowError</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// If an overflow happened, then the seed could be negative,</comment>
      <comment type="line">// so try to interpret it as signed long</comment>
      <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>seed_unpacked_signed</name> <init>= <expr><call><name>THPUtils_unpackLong</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>seed_unpacked</name> <operator>=</operator> <operator>*</operator><operator>(</operator><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>uint64_t</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>seed_unpacked_signed</name></expr></argument>)</argument_list></cast><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// If any other type of exception happened, rethrow it</comment>
      <throw>throw;</throw>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></catch></try>
  <expr_stmt><expr><call><name><name>generator</name><operator>.</operator><name>set_current_seed</name></name><argument_list>(<argument><expr><name>seed_unpacked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name>self</name></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_seed</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>noargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HANDLE_TH_ERRORS</name>
  <comment type="line">// See Note [Acquire lock when using random generators]</comment>
  <specifier>auto</specifier></type> <name>self</name> <init>= <expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>mutex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed_val</name> <init>= <expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>seed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>THPUtils_packUInt64</name><argument_list>(<argument><expr><name>seed_val</name></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_initialSeed</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>_self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>noargs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HANDLE_TH_ERRORS</name>
  <specifier>auto</specifier></type> <name>self</name> <init>= <expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>_self</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>THPUtils_packUInt64</name><argument_list>(<argument><expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>current_seed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_get_device</name><parameter_list>(<parameter><decl><type><name>THPGenerator</name><modifier>*</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>unused</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <macro><name>HANDLE_TH_ERRORS</name></macro>
  <return>return <expr><call><name>THPDevice_New</name><argument_list>(<argument><expr><call><name><name>self</name><operator>-&gt;</operator><name>cdata</name><operator>.</operator><name>device</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  <expr_stmt><expr><name>END_HANDLE_TH_ERRORS</name></expr></expr_stmt>
</block_content>}</block></function>

<comment type="line">// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,cppcoreguidelines-avoid-non-const-global-variables)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyGetSetDef</name></name></type> <name><name>THPGenerator_properties</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"device"</literal></expr>, <expr><operator>(</operator><name>getter</name><operator>)</operator><name>THPGenerator_get_device</name></expr>, <expr><literal type="null">nullptr</literal></expr>, <expr><literal type="null">nullptr</literal></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="null">nullptr</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,cppcoreguidelines-avoid-non-const-global-variables)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>THPGenerator_methods</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"get_state"</literal></expr>, <expr><name>THPGenerator_getState</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set_state"</literal></expr>, <expr><name>THPGenerator_setState</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"manual_seed"</literal></expr>, <expr><name>THPGenerator_manualSeed</name></expr>, <expr><name>METH_O</name></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"seed"</literal></expr>, <expr><name>THPGenerator_seed</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"initial_seed"</literal></expr>, <expr><name>THPGenerator_initialSeed</name></expr>, <expr><name>METH_NOARGS</name></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="null">nullptr</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,cppcoreguidelines-avoid-non-const-global-variables)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyMemberDef</name></name></type> <name><name>THPGenerator_members</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"_cdata"</literal></expr>,
     <expr><name>T_ULONGLONG</name></expr>,
     <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>THPGenerator</name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>,
     <expr><name>READONLY</name></expr>,
     <expr><literal type="null">nullptr</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="null">nullptr</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PyTypeObject</name></type> <name>THPGeneratorType</name> <init>= <expr><block>{
    <expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <literal type="string">"torch._C.Generator"</literal></expr>, <comment type="block">/* tp_name */</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>THPGenerator</name></expr></argument>)</argument_list></sizeof></expr>, <comment type="block">/* tp_basicsize */</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/* tp_itemsize */</comment>
    <expr><name>THPGenerator_dealloc</name></expr>, <comment type="block">/* tp_dealloc */</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/* tp_vectorcall_offset */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_getattr */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_setattr */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_reserved */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_repr */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_as_number */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_as_sequence */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_as_mapping */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_hash  */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_call */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_str */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_getattro */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_setattro */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_as_buffer */</comment>
    <expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name></expr>, <comment type="block">/* tp_flags */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_doc */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_traverse */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_clear */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_richcompare */</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/* tp_weaklistoffset */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_iter */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_iternext */</comment>
    <expr><name>THPGenerator_methods</name></expr>, <comment type="block">/* tp_methods */</comment>
    <expr><name>THPGenerator_members</name></expr>, <comment type="block">/* tp_members */</comment>
    <expr><name>THPGenerator_properties</name></expr>, <comment type="block">/* tp_getset */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_base */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_dict */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_descr_get */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_descr_set */</comment>
    <expr><literal type="number">0</literal></expr>, <comment type="block">/* tp_dictoffset */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_init */</comment>
    <expr><literal type="null">nullptr</literal></expr>, <comment type="block">/* tp_alloc */</comment>
    <expr><name>THPGenerator_pynew</name></expr>, <comment type="block">/* tp_new */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>THPGenerator_init</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>THPGeneratorClass</name> <operator>=</operator> <operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>THPGeneratorType</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>THPGeneratorType</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>THPGeneratorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"Generator"</literal></expr></argument>, <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>THPGeneratorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_pyobj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Generator</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>pyobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TORCH_CHECK</name><argument_list>(<argument><expr><call><name><name>self</name><operator>.</operator><name>defined</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cannot call set_pyobj() on undefined generator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>set_pyobj</name></name><argument_list>(<argument><expr><name>pyobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PyObject</name><modifier>*</modifier></type> <name>pyobj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Generator</name><modifier>&amp;</modifier></type> <name>self</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>TORCH_CHECK</name><argument_list>(<argument><expr><call><name><name>self</name><operator>.</operator><name>defined</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cannot call pyobj() on undefined generator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>self</name><operator>.</operator><name>pyobj</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_Wrap</name><parameter_list>(<parameter><decl><type><name>Generator</name></type> <name>gen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gen</name><operator>.</operator><name>defined</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<decl><type><name>auto</name></type> <name>obj</name> <init>= <expr><call><name>pyobj</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>THPGenerator_NewWithVar</name><argument_list>(
      <argument><expr><operator>(</operator><name>PyTypeObject</name><operator>*</operator><operator>)</operator><name>THPGeneratorClass</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Creates a new Python object for a Generator. The Generator must not already</comment>
<comment type="line">// have a PyObject* associated with it.</comment>
<function><type><name>PyObject</name><modifier>*</modifier></type> <name>THPGenerator_NewWithVar</name><parameter_list>(<parameter><decl><type><name>PyTypeObject</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Generator</name></type> <name>gen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>obj</name> <init>= <expr><call><name><name>type</name><operator>-&gt;</operator><name>tp_alloc</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>obj</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>THPGenerator</name><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <operator>(</operator><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>cdata</name></name><operator>)</operator> <call><name>Generator</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_pyobj</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cdata</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>
</unit>
