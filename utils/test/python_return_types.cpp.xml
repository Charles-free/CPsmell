<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\pytorch-master\tools\autograd\templates\python_return_types.cpp" hash="cb264f2a5a0b07d16bc5495ec8bc37ecaeb8430e"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"torch/csrc/autograd/python_return_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"torch/csrc/utils/structseq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"torch/csrc/Exceptions.h"</cpp:file></cpp:include>

<namespace>namespace <block>{
<macro><name>$</name></macro><block>{<block_content><expr><name>py_return_types</name></expr></block_content>}</block>
}</block></namespace>

<namespace>namespace <name>torch</name> <block>{
<namespace>namespace <name>autograd</name> <block>{

<function><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>PyTypeObject</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>get_namedtuple_types_map</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// [NOTE] Non-global map</comment>
  <comment type="line">// This map calls Python functions during its initialization.</comment>
  <comment type="line">// If it is a global static variable and in case it is loaded</comment>
  <comment type="line">// before Python interpreter is ready, then the calls it makes during</comment>
  <comment type="line">// initialization will SEGFAULT.</comment>
  <comment type="line">// To avoid this we make it function static variable so that it is</comment>
  <comment type="line">// initialized only after the Python interpreter is ready.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>PyTypeObject</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>namedtuple_types_map</name> <init>= <expr><block>{
    <macro><name>$</name></macro><expr><block>{<expr><name>py_return_types_map</name></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>namedtuple_types_map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyTypeObject</name><modifier>*</modifier></type> <name>get_namedtuple</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><specifier>static</specifier> <name>auto</name><operator>&amp;</operator> <name>namedtuple_types_map</name> <operator>=</operator> <call><name>get_namedtuple_types_map</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>namedtuple_types_map</name><index>[<expr><name>name</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initReturnTypes</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PyModuleDef</name></name></type> <name>def</name> <init>= <expr><block>{
      <expr><name>PyModuleDef_HEAD_INIT</name></expr>, <expr><literal type="string">"torch._C._return_types"</literal></expr>, <expr><literal type="null">nullptr</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>return_types_module</name> <init>= <expr><call><name>PyModule_Create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>return_types_module</name></expr>)</condition> <block>{<block_content>
    <throw>throw <expr><call><name>python_error</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>return_type_pair</name> <range>: <expr><call><name>get_namedtuple_types_map</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
    <comment type="line">// hold onto the TypeObject for the unlikely case of user</comment>
    <comment type="line">// deleting or overriding it.</comment>
    <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name><name>return_type_pair</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(
            <argument><expr><name>return_types_module</name></expr></argument>,
            <argument><expr><call><name><name>return_type_pair</name><operator>.</operator><name>first</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>return_type_pair</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name><operator>*</operator><operator>)</operator><name><name>return_type_pair</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><call><name>python_error</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// steals a reference to return_types on success</comment>
  <if_stmt><if>if <condition>(<expr><call><name>PyModule_AddObject</name><argument_list>(<argument><expr><name>module</name></expr></argument>, <argument><expr><literal type="string">"_return_types"</literal></expr></argument>, <argument><expr><name>return_types_module</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>return_types_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <throw>throw <expr><call><name>python_error</name><argument_list>()</argument_list></call></expr>;</throw>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace autograd</comment>
}</block></namespace> <comment type="line">// namespace torch</comment>
</unit>
