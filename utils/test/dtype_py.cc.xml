<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\DLFs_dataset\mindspore\mindspore-1.10.1\mindspore\ccsrc\pybind_api\ir\dtype_py.cc" hash="d5539d1c7e15fa45db0e81a48dde6951a3048545"><comment type="block" format="doxygen">/**
 * Copyright 2020 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ir/dtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/log_adapter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"abstract/abstract_value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/pybind_api/api_register.h"</cpp:file></cpp:include>

<namespace>namespace <name>mindspore</name> <block>{
<comment type="line">// Define python wrapper to handle data types.</comment>
<function><type><name>void</name></type> <name>RegTyping</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>m_sub</name> <init>= <expr><call><name><name>m</name><operator>-&gt;</operator><name>def_submodule</name></name><argument_list>(<argument><expr><literal type="string">"typing"</literal></expr></argument>, <argument><expr><literal type="string">"submodule for dtype"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>TypeId</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m_sub</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"is_subclass"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>IsIdentidityOrSubclass</name></expr></argument>, <argument><expr><literal type="string">"is equal or subclass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m_sub</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"load_type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>TypeIdToType</name></expr></argument>, <argument><expr><literal type="string">"load type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m_sub</name><operator>.</operator><name>def</name></name><argument_list>(
    <argument><expr><literal type="string">"dump_type"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypePtr</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>t</name><operator>-&gt;</operator><name>type_id</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>, <argument><expr><literal type="string">"dump type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m_sub</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"str_to_type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>StringToType</name></expr></argument>, <argument><expr><literal type="string">"string to typeptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m_sub</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"type_size_in_bytes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>GetTypeByte</name></expr></argument>, <argument><expr><literal type="string">"type size in bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Type"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__eq__"</literal></expr></argument>,
         <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypePtr</name> <modifier>&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>object</name></name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
           <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>py</name><operator>::</operator><name>isinstance</name><argument_list type="generic">&lt;<argument><expr><name>Type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
             <return>return <expr><literal type="boolean">false</literal></expr>;</return>
           </block_content>}</block></if></if_stmt>
           <decl_stmt><decl><type><name>auto</name> <name>t2</name> = <name><name>py</name><operator>::</operator><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name>(<name>other</name></type></decl>);</decl_stmt>
           <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>!=</operator> <literal type="null">nullptr</literal> <operator>&amp;&amp;</operator> <name>t2</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
             <return>return <expr><operator>*</operator><name>t1</name> <operator>==</operator> <operator>*</operator><name>t2</name></expr>;</return>
           </block_content>}</block></if></if_stmt>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return>
         </block_content>}</block></lambda></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__hash__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Type</name><operator>::</operator><name>hash</name></name></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__str__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Type</name><operator>::</operator><name>ToString</name></name></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__repr__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Type</name><operator>::</operator><name>ReprString</name></name></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__deepcopy__"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypePtr</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>py</name><operator>::</operator><name>dict</name></name></type></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></cast></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>t</name><operator>-&gt;</operator><name>DeepCopy</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Number</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Number</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Number"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Bool</name></expr></argument>, <argument><expr><name>Number</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Bool"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Bool</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>Bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Int</name></expr></argument>, <argument><expr><name>Number</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Int"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"nbits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Int</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <comment type="block">/* Return a tuple that fully encodes the state of the object */</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>nbits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid state!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Create a new C++ instance */</comment>
        <decl_stmt><decl><type><name>Int</name> <name>data</name>(<name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        return <argument><expr><name>data</name></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
      </block_content>}</block></function>)</block></namespace>)<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>UInt</name></expr></argument>, <argument><expr><name>Number</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UInt</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"UInt"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"nbits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UInt</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <comment type="block">/* Return a tuple that fully encodes the state of the object */</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>nbits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid state!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Create a new C++ instance */</comment>
        <decl_stmt><decl><type><name>UInt</name> <name>data</name>(<name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        return <argument><expr><name>data</name></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
      }))<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Float</name></expr></argument>, <argument><expr><name>Number</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Float</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Float"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"nbits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Float</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <comment type="block">/* Return a tuple that fully encodes the state of the object */</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>nbits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid state!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Create a new C++ instance */</comment>
        <decl_stmt><decl><type><name>Float</name> <name>data</name>(<name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        return <argument><expr><name>data</name></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
      }))<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>Number</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Complex</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Complex"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"nbits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Complex</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <comment type="block">/* Return a tuple that fully encodes the state of the object */</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>nbits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid state!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Create a new C++ instance */</comment>
        <decl_stmt><decl><type><name>Complex</name> <name>data</name>(<name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>;
        return <argument><expr><name>data</name></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
      }))<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>List</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>List</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"List"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"elements"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Tuple</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Tuple"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"elements"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Dictionary</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Dictionary</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Dict"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"key_values"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TensorType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TensorType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TensorType"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"element"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"element_type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorType</name><operator>::</operator><name>element</name></name></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TensorType</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __getstate__</comment>
        <comment type="block">/* Return a tuple that fully encodes the state of the object */</comment>
        <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>element</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>type_id</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>,
      <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>tuple</name></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// __setstate__</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid state!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Create a new C++ instance */</comment>
        <decl_stmt><decl><type><name>TensorType</name> <name>data</name>(<name>TypeIdToType</name>(<name>TypeId</name>(static_cast<name/>&lt;<name>int</name>&gt;(<name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>int_</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>)</decl_stmt>)</block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
        <return>return <expr><name>data</name></expr>;</return>
      }))<empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>RowTensorType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RowTensorType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"RowTensorType"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"ElementType"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RowTensorType</name><operator>::</operator><name>element</name></name></expr></argument>, <argument><expr><literal type="string">"Get the RowTensorType's element type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>COOTensorType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>COOTensorType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"COOTensorType"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"ElementType"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>COOTensorType</name><operator>::</operator><name>element_type</name></name></expr></argument>, <argument><expr><literal type="string">"Get the COOTensorType's element type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>CSRTensorType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CSRTensorType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"CSRTensorType"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"ElementType"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CSRTensorType</name><operator>::</operator><name>element_type</name></name></expr></argument>, <argument><expr><literal type="string">"Get the CSRTensorType's element type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>UndeterminedType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>UndeterminedType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"UndeterminedType"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Function</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Function</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Function"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>TypePtr</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"retval"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>SymbolicKeyType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>SymbolicKeyType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"SymbolicKeyType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>EnvType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>EnvType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"EnvType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TypeNone</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeNone</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeNone"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TypeType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"String"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>RefKeyType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefKeyType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"RefKeyType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>RefType</name></expr></argument>, <argument><expr><name>TensorType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RefType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"RefType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TypeAnything</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeAnything</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeAnything"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Slice</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"Slice"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TypeEllipsis</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeEllipsis</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeEllipsis"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>MsClassType</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>MsClassType</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeMsClassType"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TypeNull</name></expr></argument>, <argument><expr><name>Type</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TypeNull</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_sub</name></expr></argument>, <argument><expr><literal type="string">"TypeNull"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
}  <comment type="line">// namespace mindspore</comment>
</unit>
