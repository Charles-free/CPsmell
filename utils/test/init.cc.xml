<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\mindspore-master\mindspore\ccsrc\pipeline\jit\init.cc" version="211" hash="d027a8d7b8369aea86581f2bbbfb41fd6ef12ee5"><comment type="block" format="doxygen">/**
 * Copyright 2019-2022 Huawei Technologies Co., Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pybind11/operators.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kernel/oplib/oplib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pipeline/jit/pipeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frontend/operator/composite/composite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pipeline/pynative/pynative_execute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/symbolic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/pybind_api/api_register.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/python_adapter.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/summary/event_writer.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/config_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/mpi/mpi_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ms_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ms_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/parallel_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/common/utils/offload_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frontend/parallel/costmodel_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frontend/optimizer/ad/bprop_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frontend/operator/graph_bprop/bprop_meta_func_graph.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>defined</name> <name>ENABLE_CPU</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>defined</name> <name>_WIN32</name><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/distributed/ps/util.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/distributed/ps/ps_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/distributed/init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/distributed/recovery/recovery_context.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/distributed/collective/collective_manager.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WITH_BACKEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"runtime/graph_scheduler/embedding_cache_scheduler.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frontend/parallel/tensor_layout/tensor_transform.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pybind_api/gil_scoped_long_running.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/backend/debug/profiler/profiling.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<namespace>namespace <name>py</name> = <name>pybind11</name>;</namespace>

<using>using <name>GraphExecutorPy</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>GraphExecutorPy</name></name></type></init>;</using>
<using>using <name>Pipeline</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>Pipeline</name></name></type></init>;</using>
<using>using <name>PrimitivePy</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>PrimitivePy</name></name></type></init>;</using>
<using>using <name>MetaFuncGraph</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>MetaFuncGraph</name></name></type></init>;</using>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
<using>using <name>EventWriter</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>summary</name><operator>::</operator><name>EventWriter</name></name></type></init>;</using>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// ENABLE_SECURITY</comment>
<using>using <name>OpLib</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>kernel</name><operator>::</operator><name>OpLib</name></name></type></init>;</using>
<using>using <name>ParallelContext</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>parallel</name><operator>::</operator><name>ParallelContext</name></name></type></init>;</using>
<using>using <name>CostModelContext</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>parallel</name><operator>::</operator><name>CostModelContext</name></name></type></init>;</using>
<using>using <name>TensorTransform</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>parallel</name><operator>::</operator><name>TensorTransform</name></name></type></init>;</using>
<using>using <name>OffloadContext</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>OffloadContext</name></name></type></init>;</using>
<using>using <name><name>mindspore</name><operator>::</operator><name>MsCtxParam</name></name>;</using>
<using>using <name>PSContext</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>ps</name><operator>::</operator><name>PSContext</name></name></type></init>;</using>
<using>using <name>CollectiveManager</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>distributed</name><operator>::</operator><name>collective</name><operator>::</operator><name>CollectiveManager</name></name></type></init>;</using>
<using>using <name>RecoveryContext</name> <init>= <type><name><name>mindspore</name><operator>::</operator><name>distributed</name><operator>::</operator><name>recovery</name><operator>::</operator><name>RecoveryContext</name></name></type></init>;</using>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
<namespace>namespace <name>mindspore</name> <block>{
<namespace>namespace <name>profiler</name> <block>{
<function><type><name>void</name></type> <name>RegProfiler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>module</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Profiler</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Profiler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="string">"Profiler"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"device_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Profiler get_instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"init"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>Init</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"profiling_path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"device_id"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"profiling_options"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>Start</name></name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"stop"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>Stop</name></name></expr></argument>, <argument><expr><literal type="string">"stop"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"finalize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>Finalize</name></name></expr></argument>, <argument><expr><literal type="string">"finalize"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"sync_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>SyncEnable</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"enable_flag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"data_process_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>DataProcessEnable</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"enable_flag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"step_profiling_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Profiler</name><operator>::</operator><name>StepProfilingEnable</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"enable_flag"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"enable or disable step profiling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>RegProfilerManager</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>py</name><operator>::</operator><name>module</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>ProfilerManager</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ProfilerManager</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerManager"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ProfilerManager</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"ProfilerManager get_instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"dynamic_status"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ProfilerManager</name><operator>::</operator><name>GetNetDynamicShapeStatus</name></name></expr></argument>, <argument><expr><literal type="string">"dynamic_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block></namespace>  <comment type="line">// namespace profiler</comment>
}</block></namespace>  <comment type="line">// namespace mindspore</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// ENABLE_SECURITY</comment>

<namespace>namespace <name>mindspore</name> <block>{
<function><type><name>void</name></type> <name>RegModule</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>RegTyping</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegCNode</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegCell</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegMetaFuncGraph</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegFuncGraph</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegUpdateFuncGraphHyperParams</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegParamInfo</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegPrimitive</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegSignatureEnumRW</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>tensor</name><operator>::</operator><name>RegMetaTensor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>tensor</name><operator>::</operator><name>RegCSRTensor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>tensor</name><operator>::</operator><name>RegCOOTensor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>tensor</name><operator>::</operator><name>RegRowTensor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>tensor</name><operator>::</operator><name>RegMapTensor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegValues</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>initializer</name><operator>::</operator><name>RegRandomNormal</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegMsContext</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegSecurity</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>pynative</name><operator>::</operator><name>RegPyNativeExecutor</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>prim</name><operator>::</operator><name>RegCompositeOpsGroup</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>graph_bprop</name><operator>::</operator><name>RegBpropMetaFuncGraph</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>profiler</name><operator>::</operator><name>RegProfilerManager</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>profiler</name><operator>::</operator><name>RegProfiler</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>abstract</name><operator>::</operator><name>RegPrimitiveFrontEval</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RegModuleHelper</name><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>module</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>once_flag</name></name></type> <name>onlyCalledOnce</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>call_once</name></name><argument_list>(<argument><expr><name>onlyCalledOnce</name></expr></argument>, <argument><expr><name>RegModule</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
}</block></namespace>  <comment type="line">// namespace mindspore</comment>

<comment type="line">// Interface with python</comment>
<macro><name>PYBIND11_MODULE</name><argument_list>(<argument>_c_expression</argument>, <argument>m</argument>)</argument_list></macro> <block>{<block_content>
  <comment type="line">// The OMP_NUM_THREADS has no effect when set in backend, so set it here in advance.</comment>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>common</name><operator>::</operator><name>SetOMPThreadNum</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>doc</name></name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="string">"MindSpore c plugin"</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>RegModuleHelper</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>ScopedLongRunning</name><operator>::</operator><name>SetHook</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_unique</name><argument_list type="generic">&lt;<argument><expr><name><name>mindspore</name><operator>::</operator><name>GilScopedLongRunningHook</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Class Pipeline interface</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>GraphExecutorPy</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>GraphExecutorPy</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"GraphExecutor_"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Executor get_instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"__call__"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>Run</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Executor run function."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"del_net_res"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>DelNetRes</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"obj"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"network_id"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>set</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Delete network resource."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_func_graph"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetFuncGraph</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Get graph pointer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_func_graph_proto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetFuncGraphProto</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"onnx_ir"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"incremental"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get graph proto string by specifying ir type."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_obfuscate_func_graph_proto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetObfuscateFuncGraphProto</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"incremental"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"obf_ratio"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>float_</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"branch_control_input"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Get graph proto of dynamic-obfuscated model."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_params"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetParams</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Get Parameters from graph"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"compile"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>Compile</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"obj"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"args"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"kwargs"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"use_vm"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Compile obj by executor."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"updata_param_node_default_input"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>UpdataParamNodeDefaultInput</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"params"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Fetch the inputs of Conv or Matmul for quant export."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parameter_layout"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetParameterLayout</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get Parameter Tensor Layout Dictionary."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parallel_graph_info"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetParallelGraphInfo</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get graph info in step_parallel stage."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parallel_parameter_name_list"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetParallelParameterNameList</name></name></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Get Parallel Parameter Name List."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetCNodeStrategy</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get CNode Strategy Dictionary."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_num_parallel_ops"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetNumOpsInfo</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get the number of parallel operators."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_allreduce_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetAllreduceFusion</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get Allreduce Fusion Dictionary."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"build_data_graph"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>BuildGraph</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"build_params"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"train"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Build data graph."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"export_graph"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>ExportGraph</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"file_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"encrypt"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"Export Graph."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"has_compiled"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>HasCompiled</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Get if cell compiled."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_py_exe_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>PyExePath</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"py_exe_path"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Set python executable path."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_kernel_build_server_dir"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>KernelBuildServerDir</name></name></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"kernel_build_server_dir"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set kernel build server directory path."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_queue_name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>set_queue_name</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"queue_name"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Set queue name for the graph loaded from compile cache."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_tuple_broaden"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>set_enable_tuple_broaden</name></name></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"enable_tuple_broaden"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set tuple broaden enable."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_compile_cache_dep_files"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>set_compile_cache_dep_files</name></name></expr></argument>,
         <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"compile_cache_dep_files"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>list</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set the compilation cache dependent files."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_weights_values"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>set_weights_values</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"weights"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>dict</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Set values of weights."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_optimize_graph_proto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GetOptimizeGraphProto</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><literal type="string">"Get the optimize graph proto string."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_jit_config"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>SetJitConfig</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"jit_config"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>dict</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Set the jit config."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"generate_arguments_key"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>GraphExecutorPy</name><operator>::</operator><name>GenerateArgumentsKey</name></name></expr></argument>, <argument><expr><literal type="string">"Generate unique key of argument."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"reset_op_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>ResetOpId</name></name></expr></argument>, <argument><expr><literal type="string">"Reset Operator Id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"reset_op_id_with_offset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>ResetOpIdWithOffset</name></name></expr></argument>, <argument><expr><literal type="string">"Reset Operator Id With Offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_hccl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>InitHccl</name></name></expr></argument>, <argument><expr><literal type="string">"Init Hccl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"finalize_hccl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>FinalizeHccl</name></name></expr></argument>, <argument><expr><literal type="string">"Finalize Hccl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_hccl_rank_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>GetHcclRankId</name></name></expr></argument>, <argument><expr><literal type="string">"Get Hccl Rank Id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"get_hccl_rank_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>GetHcclRankSize</name></name></expr></argument>, <argument><expr><literal type="string">"Get Hccl Rank Size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"verify_inputs_signature"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>VerifyInputSignature</name></name></expr></argument>, <argument><expr><literal type="string">"Verify input signature."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_exec_dataset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>InitExecDataset</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"queue_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"batch_size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"types"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"shapes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"input_indexs"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"phase"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"dataset"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"need_run"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Init and exec dataset."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_set_dataset_mode_config"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>ConfigManager</name><operator>::</operator><name>SetDatasetModeConfig</name></name></expr></argument>, <argument><expr><literal type="string">"API for set dataset mode."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_pipeline"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>InitPipeline</name></name></expr></argument>, <argument><expr><literal type="string">"Init Pipeline."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"load_mindir"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>LoadMindIR</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"file_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"dec_key"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="null">nullptr</literal></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"key_len"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"dec_mode"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"AES-GCM"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"decrypt"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"obfuscated"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>bool_</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Load model as Graph."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"dynamic_obfuscate_mindir"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>DynamicObfuscateMindIR</name></name></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"file_name"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"obf_ratio"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"branch_control_input"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"dec_key"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="null">nullptr</literal></expr></argument>,
              <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"key_len"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>int_</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"dec_mode"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><literal type="string">"AES-GCM"</literal></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><literal type="string">"Obfuscate a mindir model by dynamic obfuscation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"init_cluster"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>distributed</name><operator>::</operator><name>Initialize</name></name></expr></argument>, <argument><expr><literal type="string">"Init Cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"set_cluster_exit_with_exception"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>distributed</name><operator>::</operator><name>set_cluster_exit_with_exception</name></name></expr></argument>,
              <argument><expr><literal type="string">"Set this process exits with exception."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>mindspore</name><operator>::</operator><name>MpiConfig</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>mindspore</name><operator>::</operator><name>MpiConfig</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"MpiConfig"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>MpiConfig</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get mpi config instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_mpi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>MpiConfig</name><operator>::</operator><name>enable_mpi</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether enable mpi."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_mpi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>MpiConfig</name><operator>::</operator><name>set_enable_mpi</name></name></expr></argument>, <argument><expr><literal type="string">"Set whether to enable mpi."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TensorTransform</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>TensorTransform</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"TensorTransform"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorTransform</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get tensor_transform instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"transform_tensor_sharding"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorTransform</name><operator>::</operator><name>TransformOperators</name></name></expr></argument>, <argument><expr><literal type="string">"Transform the tensor sharding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>ParallelContext</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ParallelContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"AutoParallelContext"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get auto parallel context instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_device_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>device_num</name></name></expr></argument>, <argument><expr><literal type="string">"Get device num."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_hccl_test_avaible"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_hccl_test_available</name></name></expr></argument>, <argument><expr><literal type="string">"Set hccl test available."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_device_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_device_num</name></name></expr></argument>, <argument><expr><literal type="string">"Set device num."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_device_num_is_set"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>device_num_is_set</name></name></expr></argument>, <argument><expr><literal type="string">"Get device num is set."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_fusion_threshold_mb</name></name></expr></argument>, <argument><expr><literal type="string">"Set fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_allgather_fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_allgather_fusion_threshold_mb</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set allgather fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_reducescatter_fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_reducescatter_fusion_threshold_mb</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set reducescatter fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>fusion_threshold_mb</name></name></expr></argument>, <argument><expr><literal type="string">"Get allreduce fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"allgather_fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>allgather_fusion_threshold_mb</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get allgather fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reducescatter_fusion_threshold_mb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>reducescatter_fusion_threshold_mb</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get reduce_scatter fusion threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_fusion_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_fusion_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get fusion mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_fusion_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>get_fusion_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get fusion mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_global_rank"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>global_rank</name></name></expr></argument>, <argument><expr><literal type="string">"Get global rank."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_global_rank"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_global_rank</name></name></expr></argument>, <argument><expr><literal type="string">"Set global rank."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_grad_accumulation_shard"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>grad_accumulation_shard</name></name></expr></argument>, <argument><expr><literal type="string">"Get grad_accumulation_shard."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_grad_accumulation_shard"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_grad_accumulation_shard</name></name></expr></argument>, <argument><expr><literal type="string">"Set grad_accumulation_shard."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parallel_optimizer_threshold"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>get_parallel_optimizer_threshold</name></name></expr></argument>, <argument><expr><literal type="string">"Get opt threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_parallel_optimizer_threshold"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_parallel_optimizer_threshold</name></name></expr></argument>, <argument><expr><literal type="string">"Set opt threshold."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_global_rank_is_set"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>global_rank_is_set</name></name></expr></argument>, <argument><expr><literal type="string">"Get global rank is set."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_gradients_mean"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>gradients_mean</name></name></expr></argument>, <argument><expr><literal type="string">"Get mirror mean."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_gradients_mean"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_gradients_mean</name></name></expr></argument>, <argument><expr><literal type="string">"Set mirror mean."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_gradient_fp32_sync"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>gradient_fp32_sync</name></name></expr></argument>, <argument><expr><literal type="string">"Get cast before mirror."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_gradient_fp32_sync"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_gradient_fp32_sync</name></name></expr></argument>, <argument><expr><literal type="string">"Set cast before mirror."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_loss_repeated_mean"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>loss_repeated_mean</name></name></expr></argument>, <argument><expr><literal type="string">"Get loss repeated mean."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_loss_repeated_mean"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_loss_repeated_mean</name></name></expr></argument>, <argument><expr><literal type="string">"Set loss repeated mean."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parallel_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>parallel_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get parallel mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_parallel_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_parallel_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Set parallel mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_grad_accumulation_step"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>grad_accumulation_step</name></name></expr></argument>, <argument><expr><literal type="string">"Get grad accumulation step."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_grad_accumulation_step"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_grad_accumulation_step</name></name></expr></argument>, <argument><expr><literal type="string">"Set grad accumulation step."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_strategy_search_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>strategy_search_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get strategy search mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_strategy_search_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_strategy_search_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Set strategy search mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_all_reduce_fusion_split_indices"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>SetAllReduceFusionSplitIndices</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set all reduce fusion split indices."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_all_reduce_fusion_split_indices"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>GetAllReduceFusionSplitIndices</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get all reduce fusion split indices."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_all_reduce_fusion_split_sizes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>SetAllReduceFusionSplitSizes</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set all reduce fusion split sizes."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_all_reduce_fusion_split_sizes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>GetAllReduceFusionSplitSizes</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get all reduce fusion split sizes."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_all_reduce_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_enable_all_reduce_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set enable/disable all reduce fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_all_reduce_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>enable_all_reduce_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get enable/disable all reduce fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_all_gather_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_enable_all_gather_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set enable/disable all gather fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_all_gather_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>enable_all_gather_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get enable/disable all gather fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_reduce_scatter_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_enable_reduce_scatter_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set enable/disable reduce scatter fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_reduce_scatter_fusion"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>enable_reduce_scatter_fusion</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get enable/disable reduce scatter fusion."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parameter_broadcast"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>parameter_broadcast</name></name></expr></argument>, <argument><expr><literal type="string">"Get parameter broadcast."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_parameter_broadcast_is_set"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>parameter_broadcast_is_set</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get parameter broadcast is set."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_parameter_broadcast"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_parameter_broadcast</name></name></expr></argument>, <argument><expr><literal type="string">"Set parameter broadcast."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_strategy_ckpt_load_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_strategy_ckpt_load_file</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set strategy checkpoint load file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_strategy_ckpt_save_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_strategy_ckpt_save_file</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set strategy checkpoint save file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_strategy_ckpt_load_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>strategy_ckpt_load_file</name></name></expr></argument>, <argument><expr><literal type="string">"Get strategy checkpoint load file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_strategy_ckpt_save_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>strategy_ckpt_save_file</name></name></expr></argument>, <argument><expr><literal type="string">"Get strategy checkpoint save file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_group_ckpt_save_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_group_ckpt_save_file</name></name></expr></argument>, <argument><expr><literal type="string">"Set group checkpoint save file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_pipeline_stage_split_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_pipeline_stage_split_num</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set pipeline stage split num."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_pipeline_stage_split_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>pipeline_stage_split_num</name></name></expr></argument>, <argument><expr><literal type="string">"Get pipeline stage split num."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_full_batch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_full_batch</name></name></expr></argument>, <argument><expr><literal type="string">"Set whether load full batch on each device."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_full_batch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>full_batch</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether load full batch on each device."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_full_batch_is_set"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>full_batch_is_set</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether attr full_batch is set."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_dataset_strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_dataset_strategy</name></name></expr></argument>, <argument><expr><literal type="string">"Set dataset sharding strategy."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_dataset_strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>dataset_strategy</name></name></expr></argument>, <argument><expr><literal type="string">"Get dataset sharding strategy."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_stra_file_only_trainable_params"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_stra_file_only_trainable_params</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set strategy ckpt only save trainable params."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_stra_file_only_trainable_params"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>stra_file_only_trainable_params</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get strategy ckpt only save trainable params."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_parallel_optimizer"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_enable_parallel_optimizer</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set enable/disable parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_parallel_optimizer"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>enable_parallel_optimizer</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get enable/disable parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_communi_parallel_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_communi_parallel_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Set communication parallel mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_communi_parallel_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>communi_parallel_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get communication parallel mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_optimizer_weight_shard_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_optimizer_weight_shard_size</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set opt shard group size when not fully use parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_optimizer_weight_shard_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>optimizer_weight_shard_size</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get opt shard group size when not fully use parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_optimizer_weight_shard_aggregated_save"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_optimizer_weight_shard_aggregated_save</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set whether to integrated save weight shard when enable parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_optimizer_weight_shard_aggregated_save"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>optimizer_weight_shard_aggregated_save</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get whether to integrated save weight shard when enable parallel optimizer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_alltoall"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_enable_all2all</name></name></expr></argument>, <argument><expr><literal type="string">"Set the enabling AllToAll value."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_enable_alltoall"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>enable_all2all</name></name></expr></argument>, <argument><expr><literal type="string">"Get the enabling AllToAll value."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_sharding_propagation"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>set_sharding_propagation</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set sharding strategy propagation value."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_sharding_propagation"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>sharding_propagation</name></name></expr></argument>, <argument><expr><literal type="string">"Get sharding strategy propagation value."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ParallelContext</name><operator>::</operator><name>Reset</name></name></expr></argument>, <argument><expr><literal type="string">"Reset auto parallel context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>CostModelContext</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CostModelContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"CostModelContext"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get cost_model context instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_device_memory_capacity"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_device_memory_capacity</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the capacity of device memory."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_device_memory_capacity"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>device_memory_capacity</name></name></expr></argument>, <argument><expr><literal type="string">"Get the capacity of device memory."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_alpha"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_alpha</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_alpha of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_alpha"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_alpha</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_alpha of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_beta"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_beta</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_beta of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_beta"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_beta</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_beta of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_gamma"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_gamma</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_gamma of the DP algorithm"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_gamma"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_gamma</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_gamma of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_communi_threshold"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_communi_threshold</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_communi_threshold of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_communi_threshold"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_communi_threshold</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_communi_threshold of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_communi_const"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_communi_const</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_communi_const of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_communi_const"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_communi_const</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_communi_const of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_communi_bias"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_communi_bias</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter cost_model_communi_bias of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_communi_bias"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_communi_bias</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter cost_model_communi_bias of the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_multi_subgraphs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_multi_subgraphs</name></name></expr></argument>, <argument><expr><literal type="string">"Set the parameter is_multi_subgraphs."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_multi_subgraphs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>is_multi_subgraphs</name></name></expr></argument>, <argument><expr><literal type="string">"Get the parameter is_multi_subgraphs."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_run_phase"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_run_phase</name></name></expr></argument>, <argument><expr><literal type="string">"Set the flag run_phase."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_run_phase"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>run_phase</name></name></expr></argument>, <argument><expr><literal type="string">"Get the flag run_phase."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_algorithm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_algorithm</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_algorithm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_algorithm</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_times"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_times</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce times."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_times"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_times</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce times."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_tail_percent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_tail_percent</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion tail percent."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_tail_percent"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_tail_percent</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion tail percent."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_tail_time"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_tail_time</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion tail time."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_tail_time"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_tail_time</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion tail time."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_allreduce_inherent_time"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_allreduce_inherent_time</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion allreduce inherent time."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_allreduce_inherent_time"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_allreduce_inherent_time</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion allreduce inherent time."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_allreduce_bandwidth"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_allreduce_bandwidth</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion allreduce bandwidth."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_allreduce_bandwidth"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_allreduce_bandwidth</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion allreduce bandwidth."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_costmodel_allreduce_fusion_computation_time_parameter"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_costmodel_allreduce_fusion_computation_time_parameter</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter gradient AllReduce fusion computation time parameter."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_costmodel_allreduce_fusion_computation_time_parameter"</literal></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>costmodel_allreduce_fusion_computation_time_parameter</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter gradient AllReduce fusion computation time parameter."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_tensor_slice_align_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_tensor_slice_alignment_enable</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter tensor_slice_align_enable in strategy generation."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_tensor_slice_align_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>tensor_slice_alignment_enable</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter tensor_slice_align_enable in strategy generation."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_tensor_slice_align_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_tensor_slice_alignment_size</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter tensor_slice_size in strategy generation."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_tensor_slice_align_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>tensor_slice_alignment_size</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter tensor_slice_size in strategy generation."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_fully_use_devices"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_fully_use_device</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter fully_use_devices in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_fully_use_devices"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>fully_use_device</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter fully_use_devices in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_elementwise_op_strategy_follow"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_elementwise_stra_follow</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the parameter elementwise_op_strategy_follow in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_elementwise_op_strategy_follow"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>elementwise_stra_follow</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the parameter elementwise_op_strategy_follow in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_dp_algo_enable_approxi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_dp_algo_enable_approxi</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the flag whether enabling approximation in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_dp_algo_enable_approxi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>dp_algo_enable_approxi</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the flag whether enabling approximation in the DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_dp_algo_approxi_epsilon"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_dp_algo_approxi_epsilon</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the epsilon which is used in the approximation of DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_dp_algo_approxi_epsilon"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>dp_algo_approxi_epsilon</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the epsilon which is used in the approximation of DP algorithm."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_dp_algo_single_loop"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>set_dp_algo_single_loop</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the flag of generating a single suite of OperatorInfos in for-loop."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_dp_algo_single_loop"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>dp_algo_single_loop</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the flag of whether or not generating a single suite of OperatorInfos in for-loop."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset_cost_model"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>ResetCostModel</name></name></expr></argument>, <argument><expr><literal type="string">"Reset the CostModelContext."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset_algo_parameters"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CostModelContext</name><operator>::</operator><name>ResetAlgoParameters</name></name></expr></argument>, <argument><expr><literal type="string">"Reset the AlgoParameters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>OffloadContext</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OffloadContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"OffloadContext"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get offload context instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_offload"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_enable_offload</name></name></expr></argument>, <argument><expr><literal type="string">"Set the flag of whether enabling offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_offload"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>enable_offload</name></name></expr></argument>, <argument><expr><literal type="string">"Get the flag of whether enabling offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_offload_param"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_offload_param</name></name></expr></argument>, <argument><expr><literal type="string">"Set the param for offload destination, cpu or disk."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"offload_param"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>offload_param</name></name></expr></argument>, <argument><expr><literal type="string">"Get the param for offload destination."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_offload_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_offload_path</name></name></expr></argument>, <argument><expr><literal type="string">"Set the path of offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"offload_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>offload_path</name></name></expr></argument>, <argument><expr><literal type="string">"Get the path of offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_offload_checkpoint"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_offload_checkpoint</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the checkpoint for offload destination, cpu or disk."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"offload_checkpoint"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>offload_checkpoint</name></name></expr></argument>, <argument><expr><literal type="string">"Get the checkpoint for offload destination."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_offload_ddr_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_offload_ddr_size</name></name></expr></argument>, <argument><expr><literal type="string">"Set the ddr size for offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"offload_ddr_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>offload_ddr_size</name></name></expr></argument>, <argument><expr><literal type="string">"Get the ddr size for offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_offload_disk_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_offload_disk_size</name></name></expr></argument>, <argument><expr><literal type="string">"Set the disk size for offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"offload_disk_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>offload_disk_size</name></name></expr></argument>, <argument><expr><literal type="string">"Get the disk size for offload."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_aio"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_enable_aio</name></name></expr></argument>, <argument><expr><literal type="string">"Set the flag of whether enabling aio."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_aio"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>enable_aio</name></name></expr></argument>, <argument><expr><literal type="string">"Get the flag of whether enabling aio."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_aio_block_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_aio_block_size</name></name></expr></argument>, <argument><expr><literal type="string">"Set the size of aio block."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"aio_block_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>aio_block_size</name></name></expr></argument>, <argument><expr><literal type="string">"Get the size of aio block."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_aio_queue_depth"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_aio_queue_depth</name></name></expr></argument>, <argument><expr><literal type="string">"Set the depth of aio queue."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"aio_queue_depth"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>aio_queue_depth</name></name></expr></argument>, <argument><expr><literal type="string">"Get the depth of aio queue."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_pinned_mem"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>set_enable_pinned_mem</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set the flag of whether enabling pinned memory."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_pinned_mem"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OffloadContext</name><operator>::</operator><name>enable_pinned_mem</name></name></expr></argument>, <argument><expr><literal type="string">"Get the flag of whether enabling pinned memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>module</name><operator>::</operator><name>import</name></name><argument_list>(<argument><expr><literal type="string">"atexit"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><call><name>attr</name><argument_list>(<argument><expr><literal type="string">"register"</literal></expr></argument>)</argument_list></call><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>cpp_function</name></name><argument_list>{<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>()</parameter_list> -&gt; <type><name>void</name></type> <block>{<block_content>
    <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>MsContext</name><operator>::</operator><name>GetInstance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>RegisterCheckEnv</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>MsContext</name><operator>::</operator><name>GetInstance</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>RegisterSetEnv</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
    <try>try <block>{<block_content>
      <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>module</name></name> <name>profiler</name> = <name><name>py</name><operator>::</operator><name>module</name><operator>::</operator><name>import</name></name>("mindspore.profiler"</type></decl>).attr("EnvProfiler"</decl_stmt>)</block_content>(</block></try>)</block_content></block></lambda></expr></argument>;
      <argument><expr><call><call><name><name>profiler</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><literal type="string">"analyse"</literal></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>;
    }</argument_list></call></expr></argument> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><call><name>MS_LOG</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Failed to parse profiler data."</literal> <operator>&lt;&lt;</operator> <call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></argument_list></call></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WITH_BACKEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>runtime</name><operator>::</operator><name>EmbeddingCacheScheduler</name><operator>::</operator><name>GetInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(
      <argument><expr><operator>!</operator><call><name><name>mindspore</name><operator>::</operator><name>distributed</name><operator>::</operator><name>cluster_exit_with_exception</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_MINDDATA</name></cpp:ifdef>
    <expr_stmt><expr><call><name>MS_LOG</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Start releasing dataset handles..."</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>module</name></name></type> <name>iterators</name> <init>= <expr><call><name><name>py</name><operator>::</operator><name>module</name><operator>::</operator><name>import</name></name><argument_list>(<argument><expr><literal type="string">"mindspore.dataset.engine.iterators"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><call><name><name>iterators</name><operator>.</operator><name>attr</name></name><argument_list>(<argument><expr><literal type="string">"_cleanup"</literal></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MS_LOG</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"End release dataset handles."</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>FinalizeCluster</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// only in case that c++ calling python interface, ClearResAtexit should be called.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>mindspore</name><operator>::</operator><name>python_adapter</name><operator>::</operator><name>IsPythonEnv</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>ClearResAtexit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>})<empty_stmt>;</empty_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ENABLE_SECURITY</name></cpp:ifndef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>EventWriter</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>EventWriter</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"EventWriter_"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <operator>&amp;</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"GetFileName"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>GetFileName</name></name></expr></argument>, <argument><expr><literal type="string">"Get the file name."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"Open"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>Open</name></name></expr></argument>, <argument><expr><literal type="string">"Open the write file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"Write"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>Write</name></name></expr></argument>, <argument><expr><literal type="string">"Write the serialize event."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"EventCount"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>GetWriteEventCount</name></name></expr></argument>, <argument><expr><literal type="string">"Write event count."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"Flush"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>Flush</name></name></expr></argument>, <argument><expr><literal type="string">"Flush the event."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"Close"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>Close</name></name></expr></argument>, <argument><expr><literal type="string">"Close the write."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"Shut"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>EventWriter</name><operator>::</operator><name>Shut</name></name></expr></argument>, <argument><expr><literal type="string">"Final close the write."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// ENABLE_SECURITY</comment>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>OpLib</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>OpLib</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"Oplib"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"reg_op"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OpLib</name><operator>::</operator><name>RegOp</name></name></expr></argument>, <argument><expr><literal type="string">"Register op info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>CollectiveManager</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CollectiveManager</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"CollectiveManager"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"Get collective manager instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"create_group"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>CreateCommunicationGroup</name></name></expr></argument>, <argument><expr><literal type="string">"Create collective group."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"destroy_group"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>DestroyCommunicationGroup</name></name></expr></argument>, <argument><expr><literal type="string">"Destroy collective group."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_local_rank_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetLocalRankId</name></name></expr></argument>, <argument><expr><literal type="string">"Get the node rank id."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_local_group_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetLocalGroupSize</name></name></expr></argument>, <argument><expr><literal type="string">"Get the node rank id."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_world_rank_from_group_rank"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetWorldRankFromGroupRank</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get world rank by group rank."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_group_rank_from_world_rank"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetGroupRankFromWorldRank</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get group rank by world rank."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_rank_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetRankId</name></name></expr></argument>, <argument><expr><literal type="string">"Get the node rank id."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"get_group_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>CollectiveManager</name><operator>::</operator><name>GetGroupSize</name></name></expr></argument>, <argument><expr><literal type="string">"Get the nodes number in the collective communication."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>PSContext</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PSContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"PSContext"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="string">"Get PS context instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_ps_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>SetPSEnable</name></name></expr></argument>, <argument><expr><literal type="string">"Set PS mode enabled or disabled."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_ps_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>is_ps_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get PS mode enable-disable status."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>Reset</name></name></expr></argument>, <argument><expr><literal type="string">"Reset PS context attributes."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_worker"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>is_worker</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether the role of this process is Worker."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_server"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>is_server</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether the role of this process is PServer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"is_scheduler"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>is_scheduler</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether the role of this process is Scheduler."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"ps_rank_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>ps_rank_id</name></name></expr></argument>, <argument><expr><literal type="string">"Get Worker and PServer rank id."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"insert_hash_table_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>InsertHashTableSize</name></name></expr></argument>, <argument><expr><literal type="string">"Insert hash table size."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"reinsert_hash_table_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>ReInsertHashTableSize</name></name></expr></argument>,
         <argument><expr><literal type="string">"Insert hash table size with new parameter name."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"insert_accumu_init_info"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>InsertAccumuInitInfo</name></name></expr></argument>, <argument><expr><literal type="string">"Insert accumulation initialization value."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"clone_hash_table"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>CloneHashTable</name></name></expr></argument>, <argument><expr><literal type="string">"Clone a hash table."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_cache_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_cache_enable</name></name></expr></argument>, <argument><expr><literal type="string">"Set ps mode cache enable or not."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_cache_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_cache_size</name></name></expr></argument>, <argument><expr><literal type="string">"Set embedding cache size for ps cache mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"cache_enable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>cache_enable</name></name></expr></argument>, <argument><expr><literal type="string">"Get ps mode cache enable or not."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_sparse_format"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_sparse_format</name></name></expr></argument>, <argument><expr><literal type="string">"Set the storage format of the embedding table."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_rank_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_rank_id</name></name></expr></argument>, <argument><expr><literal type="string">"Set rank id for worker on ps mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_server_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_server_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Set server mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"server_mode"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>server_mode</name></name></expr></argument>, <argument><expr><literal type="string">"Get server mode."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_ms_role"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_ms_role</name></name></expr></argument>, <argument><expr><literal type="string">"Set role for this process."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"ms_role"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>ms_role</name></name></expr></argument>, <argument><expr><literal type="string">"Get role for this process."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_worker_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_worker_num</name></name></expr></argument>, <argument><expr><literal type="string">"Set worker number."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"worker_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>worker_num</name></name></expr></argument>, <argument><expr><literal type="string">"Get worker number."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_server_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_server_num</name></name></expr></argument>, <argument><expr><literal type="string">"Set server number."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"server_num"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>server_num</name></name></expr></argument>, <argument><expr><literal type="string">"Get server number."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_scheduler_ip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_scheduler_ip</name></name></expr></argument>, <argument><expr><literal type="string">"Set scheduler ip."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"scheduler_ip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>scheduler_ip</name></name></expr></argument>, <argument><expr><literal type="string">"Get scheduler ip."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_scheduler_port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_scheduler_port</name></name></expr></argument>, <argument><expr><literal type="string">"Set scheduler port."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"scheduler_port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>scheduler_port</name></name></expr></argument>, <argument><expr><literal type="string">"Get scheduler port."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_scheduler_manage_port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_scheduler_manage_port</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set scheduler manage port used to scale out/in."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"scheduler_manage_port"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>scheduler_manage_port</name></name></expr></argument>, <argument><expr><literal type="string">"Get scheduler manage port used to scale out/in."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_enable_ssl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_enable_ssl</name></name></expr></argument>, <argument><expr><literal type="string">"Set PS SSL mode enabled or disabled."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_ssl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>enable_ssl</name></name></expr></argument>, <argument><expr><literal type="string">"Get PS SSL mode enabled or disabled."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_client_password"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_client_password</name></name></expr></argument>, <argument><expr><literal type="string">"Set the client password to decode the p12 file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"client_password"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>client_password</name></name></expr></argument>, <argument><expr><literal type="string">"Get the client password to decode the p12 file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_server_password"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_server_password</name></name></expr></argument>, <argument><expr><literal type="string">"Set the server password to decode the p12 file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"server_password"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>server_password</name></name></expr></argument>, <argument><expr><literal type="string">"Get the server password to decode the p12 file."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_config_file_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>set_config_file_path</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set configuration files required by the communication layer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"config_file_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>config_file_path</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get configuration files required by the communication layer."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_distributed_mindrt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PSContext</name><operator>::</operator><name>enable_distributed_mindrt</name></name></expr></argument>, <argument><expr><literal type="string">"Whether distributed MindRT is enabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_encrypt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>PyEncrypt</name></name></expr></argument>, <argument><expr><literal type="string">"Encrypt the data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_decrypt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>PyDecrypt</name></name></expr></argument>, <argument><expr><literal type="string">"Decrypt the data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_is_cipher_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>PyIsCipherFile</name></name></expr></argument>, <argument><expr><literal type="string">"Determine whether the file is encrypted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>RecoveryContext</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>RecoveryContext</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"RecoveryContext"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def_static</name><argument_list>(<argument><expr><literal type="string">"get_instance"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>GetInstance</name></name></expr></argument>, <argument><expr><literal type="string">"Get recovery context instance."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"enable_recovery"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>enable_recovery</name></name></expr></argument>, <argument><expr><literal type="string">"Get whether enable recovery."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"latest_ckpt_file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>latest_ckpt_file</name></name></expr></argument>, <argument><expr><literal type="string">"Get latest checkpoint file path."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"latest_ckpt_epoch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>latest_ckpt_epoch</name></name></expr></argument>, <argument><expr><literal type="string">"Get the epoch of latest checkpoint."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"latest_ckpt_step"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>latest_ckpt_step</name></name></expr></argument>, <argument><expr><literal type="string">"Get the step of latest checkpoint."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_need_reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>set_need_reset</name></name></expr></argument>,
         <argument><expr><literal type="string">"Set whether should call reset minddata and load ckpt for disaster recovery."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"need_reset"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>need_reset</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get whether should call reset minddata and load ckpt for disaster recovery."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"recovery_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>recovery_path</name></name></expr></argument>,
         <argument><expr><literal type="string">"Get the recovery path used to save that need to be persisted."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"ckpt_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>GetCkptPath</name></name></expr></argument>, <argument><expr><literal type="string">"Get the recovery path used to save checkpoint."</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><literal type="string">"set_ckpt_path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RecoveryContext</name><operator>::</operator><name>SetCkptPath</name></name></expr></argument>, <argument><expr><literal type="string">"Set the recovery path used to save checkpoint."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_export_bprop_mindir"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>ad</name><operator>::</operator><name>ExportBpropToMindir</name></name></expr></argument>,
              <argument><expr><literal type="string">"Export the backpropagation function to mindir file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_check_bprop_mindir"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>ad</name><operator>::</operator><name>CheckMindir</name></name></expr></argument>,
              <argument><expr><literal type="string">"Check whether a mindir file can be loaded and up to date."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_ms_memory_recycle"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>MemoryRecycle</name></name></expr></argument>, <argument><expr><literal type="string">"Recycle memory used by mindspore."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(<argument><expr><literal type="string">"_bind_device_ctx"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mindspore</name><operator>::</operator><name>pipeline</name><operator>::</operator><name>BindDeviceCtx</name></name></expr></argument>, <argument><expr><literal type="string">"Bind device context to current thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
</unit>
