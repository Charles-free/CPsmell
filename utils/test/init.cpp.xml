<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="F:\python_workplace\pytorch-master\torch\csrc\profiler\python\init.cpp" version="211" hash="44d4d913bc9aea75a3084a40f2ad04f9dc78dea6"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/profiler/python/init.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ATen/record_function.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;c10/util/overloaded.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/DynamicTypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/autograd/utils/wrap_outputs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/jit/python/pybind_utils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/profiler/collection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/profiler/standalone/execution_graph_observer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torch/csrc/utils/pybind.h&gt;</cpp:file></cpp:include>

<namespace>namespace <name>torch</name> <block>{
<namespace>namespace <name>profiler</name> <block>{

<function><type><name>void</name></type> <name>initPythonBindings</name><parameter_list>(<parameter><decl><type><name>PyObject</name><modifier>*</modifier></type> <name>module</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>auto</name></type> <name>rootModule</name> <init>= <expr><call><name><name>py</name><operator>::</operator><name>handle</name></name><argument_list>(<argument><expr><name>module</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>module</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>m</name> <init>= <expr><call><name><name>rootModule</name><operator>.</operator><name>def_submodule</name></name><argument_list>(<argument><expr><literal type="string">"_profiler"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <using>using <namespace>namespace <name><name>torch</name><operator>::</operator><name>profiler</name><operator>::</operator><name>impl</name></name>;</namespace></using>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"RecordScope"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>FUNCTION</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"BACKWARD_FUNCTION"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>BACKWARD_FUNCTION</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TORCHSCRIPT_FUNCTION"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>TORCHSCRIPT_FUNCTION</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"KERNEL_FUNCTION_DTYPE"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>KERNEL_FUNCTION_DTYPE</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CUSTOM_CLASS"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>CUSTOM_CLASS</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"BUILD_FEATURE"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>BUILD_FEATURE</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"LITE_INTERPRETER"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>LITE_INTERPRETER</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"USER_SCOPE"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>USER_SCOPE</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"STATIC_RUNTIME_OP"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>STATIC_RUNTIME_OP</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"STATIC_RUNTIME_MODEL"</literal></expr></argument>, <argument><expr><name><name>at</name><operator>::</operator><name>RecordScope</name><operator>::</operator><name>STATIC_RUNTIME_MODEL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>ProfilerState</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerState"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Disabled"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>Disabled</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CPU"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>CPU</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CUDA"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>CUDA</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"NVTX"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>NVTX</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"ITT"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>ITT</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"KINETO"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>KINETO</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"KINETO_GPU_FALLBACK"</literal></expr></argument>, <argument><expr><name><name>ProfilerState</name><operator>::</operator><name>KINETO_GPU_FALLBACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>ActiveProfilerType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ActiveProfilerType"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>, <argument><expr><name><name>ActiveProfilerType</name><operator>::</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"LEGACY"</literal></expr></argument>, <argument><expr><name><name>ActiveProfilerType</name><operator>::</operator><name>LEGACY</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"KINETO"</literal></expr></argument>, <argument><expr><name><name>ActiveProfilerType</name><operator>::</operator><name>KINETO</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"NVTX"</literal></expr></argument>, <argument><expr><name><name>ActiveProfilerType</name><operator>::</operator><name>NVTX</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"ITT"</literal></expr></argument>, <argument><expr><name><name>ActiveProfilerType</name><operator>::</operator><name>ITT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>ActivityType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerActivity"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CPU"</literal></expr></argument>, <argument><expr><name><name>ActivityType</name><operator>::</operator><name>CPU</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"CUDA"</literal></expr></argument>, <argument><expr><name><name>ActivityType</name><operator>::</operator><name>CUDA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>ExperimentalConfig</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExperimentalConfig"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(
          <argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;
              <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument> <comment type="block">/* profiler_metrics */</comment>,
              <argument><expr><name>bool</name></expr></argument> <comment type="block">/* profiler_measure_per_kernel */</comment>,
              <argument><expr><name>bool</name></expr></argument> <comment type="block">/* verbose */</comment>,
              <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument> <comment type="block">/* performance_events  */</comment>
              &gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><literal type="string">"An experimental config for Kineto features. Please note that"</literal>
          <literal type="string">"backward compatibility is not guaranteed.\n"</literal>
          <literal type="string">"    profiler_metrics : a list of CUPTI profiler metrics used\n"</literal>
          <literal type="string">"       to measure GPU performance events.\n"</literal>
          <literal type="string">"       If this list contains values Kineto runs in CUPTI profiler mode\n"</literal>
          <literal type="string">"    profiler_measure_per_kernel (bool) : whether to profile metrics per kernel\n"</literal>
          <literal type="string">"       or for the entire measurement duration.\n"</literal>
          <literal type="string">"    verbose (bool) : whether the trace file has `Call stack` field or not.\n"</literal>
          <literal type="string">"    performance_events : a list of profiler events to be used for measurement"</literal></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"profiler_metrics"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"profiler_measure_per_kernel"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>,
          <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"performance_events"</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>pickle</name></name><argument_list>(
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExperimentalConfig</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="line">// __getstate__</comment>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>py_metrics</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>metric</name> : <name><name>p</name><operator>.</operator><name>profiler_metrics</name></name></type></decl></init>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name> <name>mbytes</name>(<name>metric</name></type></decl>);</decl_stmt>
              <expr_stmt><expr><call><name><name>py_metrics</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>mbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>py_perf_events</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>event</name> : <name><name>p</name><operator>.</operator><name>performance_events</name></name></type></decl></init>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>bytes</name></name> <name>mbytes</name>(<name>event</name></type></decl>);</decl_stmt>
              <expr_stmt><expr><call><name><name>py_perf_events</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>mbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="block">/* Return a tuple that fully encodes the state of the config */</comment>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(
                <argument><expr><name>py_metrics</name></expr></argument>,
                <argument><expr><name><name>p</name><operator>.</operator><name>profiler_measure_per_kernel</name></name></expr></argument>,
                <argument><expr><name><name>p</name><operator>.</operator><name>verbose</name></name></expr></argument>,
                <argument><expr><name><name>p</name><operator>.</operator><name>performance_events</name></name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>py</name><operator>::</operator><name>tuple</name></name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="line">// __setstate__</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
              <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Expected atleast 3 values in state"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>py_metrics</name> = <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>list</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>);</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>metrics</name><block>{<block_content><macro><name>py_metrics</name></macro><expr><operator>.</operator><macro><name>size</name><argument_list>()</argument_list></macro></expr></block_content>}</block></type></decl></decl_stmt><empty_stmt>;</empty_stmt>

            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>py_metric</name> : <name>py_metrics</name></type></decl></init>)</control> <block>{<block_content>
              <expr_stmt><expr><call><name><name>metrics</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><name>py_metric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>performance_events</name></type></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>py_perf_events</name> = <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name>.<name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>list</name></name></expr></argument>&gt;</argument_list></name>(</type></decl>);</decl_stmt>
              <expr_stmt><expr><call><name><name>performance_events</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>py_perf_events</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>py_perf_event</name> : <name>py_perf_events</name></type></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>performance_events</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>str</name></name><argument_list>(<argument><expr><name>py_perf_event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name>ExperimentalConfig</name><argument_list>(
                <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name><name>cast</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>performance_events</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>ProfilerConfig</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"ProfilerConfig"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def</name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>init</name><argument_list type="generic">&lt;
           <argument><expr><name>ProfilerState</name></expr></argument>,
           <argument><expr><name>bool</name></expr></argument>, <comment type="block">/* record_input_shapes */</comment>
           <argument><expr><name>bool</name></expr></argument>, <comment type="block">/* profile_memory */</comment>
           <argument><expr><name>bool</name></expr></argument>, <comment type="block">/* with_stack */</comment>
           <argument><expr><name>bool</name></expr></argument>, <comment type="block">/* with_flops */</comment>
           <argument><expr><name>bool</name></expr></argument>, <comment type="block">/* with_modules */</comment>
           <argument><expr><name>ExperimentalConfig</name></expr></argument> <comment type="block">/* experimental_config */</comment>
           &gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>enum_</name><argument_list type="generic">&lt;<argument><expr><name>EventType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_EventType"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"TorchOp"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>TorchOp</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Backend"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>Backend</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Allocation"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>Allocation</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"PyCall"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"PyCCall"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>PyCCall</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>value</name><argument_list>(<argument><expr><literal type="string">"Kineto"</literal></expr></argument>, <argument><expr><name><name>EventType</name><operator>::</operator><name>Kineto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>TensorMetadata</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_TensorMetadata"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"impl_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>impl</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"storage_data_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>data_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>id_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"allocation_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>allocation_id_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"layout"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TensorMetadata</name><modifier>&amp;</modifier></type> <name>metadata</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>PyObject</name><modifier>*</modifier> <name>layout_obj</name> =
                <name><name>torch</name><operator>::</operator><name>autograd</name><operator>::</operator><name>utils</name><operator>::</operator><name>wrap</name></name>(<name><name>metadata</name><operator>.</operator><name>layout_</name></name></type></decl>);</decl_stmt>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>reinterpret_borrow</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>object</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>layout_obj</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"device"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>device_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"dtype"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TensorMetadata</name><modifier>&amp;</modifier></type> <name>metadata</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>reinterpret_borrow</name><argument_list type="generic">&lt;<argument><expr><name><name>py</name><operator>::</operator><name>object</name></name></expr></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name><name>torch</name><operator>::</operator><name>autograd</name><operator>::</operator><name>utils</name><operator>::</operator><name>wrap</name></name><argument_list>(
                    <argument><expr><call><name><name>torch</name><operator>::</operator><name>getTHPDtype</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>dtype_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"dim"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>dim_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"sizes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>sizes_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"strides"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TensorMetadata</name><operator>::</operator><name>strides_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <using>using <name>torch_op_t</name> <init>= <type><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>TorchOp</name></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>torch_op_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_TorchOp"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>torch_op_t</name><operator>::</operator><name>name_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"inputs"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>torch_op_t</name><modifier>&amp;</modifier></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>out</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>input</name> : <name><name>op</name><operator>.</operator><name>inputs_</name></name></type></decl></init>)</control> <block>{<block_content>
              <expr_stmt><expr><call><name><name>c10</name><operator>::</operator><name>visit</name></name><argument_list>(
                  <argument><expr><call><name><name>c10</name><operator>::</operator><name>overloaded</name></name><argument_list>(
                      <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>c10</name><operator>::</operator><name>IValue</name></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>torch</name><operator>::</operator><name>jit</name><operator>::</operator><name>toPyObject</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></lambda></expr></argument>,
                      <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>c10</name><operator>::</operator><name>nullopt_t</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>,
                      <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>out</name></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"scope"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>torch_op_t</name><operator>::</operator><name>scope_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"sequence_number"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>torch_op_t</name><operator>::</operator><name>sequence_number_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"allow_tf32_cublas"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>torch_op_t</name><operator>::</operator><name>allow_tf32_cublas_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>Backend</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_Backend"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <using>using <name>allocation_t</name> <init>= <type><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>Allocation</name></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>allocation_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_Allocation"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"ptr"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>allocation_t</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ptr_</name></name></expr></argument>)</argument_list></cast></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>id_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"allocation_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>allocation_id_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"alloc_size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>alloc_size_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"total_allocated"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>total_allocated_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"total_reserved"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>total_reserved_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"device"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>allocation_t</name><operator>::</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>PyFrameState</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_PyFrameState"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"line_number"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PyFrameState</name><operator>::</operator><name>line_no_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"file_name"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PyFrameState</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>s</name><operator>.</operator><name>filename_</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"function_name"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PyFrameState</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>s</name><operator>.</operator><name>funcname_</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>NNModuleInfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_NNModuleInfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"parameters"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NNModuleInfo</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>out</name></type></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>p</name> : <name><name>s</name><operator>.</operator><name>parameters_</name></name></type></decl></init>)</control> <block>{<block_content>
              <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(
                  <argument><expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>name_</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>metadata_</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>grad_metadata_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>out</name></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"cls_name"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NNModuleInfo</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>s</name><operator>.</operator><name>cls_name_</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"self_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>NNModuleInfo</name><operator>::</operator><name>self_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"cls_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>NNModuleInfo</name><operator>::</operator><name>cls_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>OptimizerInfo</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_OptimizerInfo"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"self_ptr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptimizerInfo</name><operator>::</operator><name>self_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"parameters"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OptimizerInfo</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>py</name><operator>::</operator><name>list</name></name> <name>out</name></type></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>p</name> : <name><name>s</name><operator>.</operator><name>parameters_</name></name></type></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>metadata_</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>grad_metadata_</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>state_</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>out</name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_PyCall"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"callsite"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>callsite_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"caller"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>caller_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"module"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>module_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"optimizer"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>optimizer_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCCall</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_PyCCall"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"caller"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>PyCall</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>caller_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>OutOfMemory</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(
      <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_OutOfMemory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name><name>ExtraFields</name><argument_list type="generic">&lt;<argument><expr><name><name>EventType</name><operator>::</operator><name>Kineto</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ExtraFields_Kineto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>py</name><operator>::</operator><name>class_</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Result</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="string">"_ProfilerEvent"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>name</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"tag"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>tag</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"extra_fields"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>extra_fields_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"typed"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Result</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>py</name><operator>::</operator><name>make_tuple</name></name><argument_list>(
                <argument><expr><call><name><name>r</name><operator>.</operator><name>tag</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>py</name><operator>::</operator><name>cast</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>extra_fields_</name></name></expr></argument>, <argument><expr><name><name>py</name><operator>::</operator><name>return_value_policy</name><operator>::</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"id"</literal></expr></argument>,
          <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Result</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>intptr_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>shared_from_this</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>;</return>
          </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(
          <argument><expr><literal type="string">"parent"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Result</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>r</name><operator>.</operator><name>parent_</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"children"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>children_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"start_time_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>start_time_ns_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_readonly</name><argument_list>(<argument><expr><literal type="string">"start_tid"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>start_tid_</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"correlation_id"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>correlationID</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"end_time_ns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Result</name><operator>::</operator><name>endTimeNS</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>def_property_readonly</name><argument_list>(<argument><expr><literal type="string">"duration_time_ns"</literal></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Result</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>r</name><operator>.</operator><name>endTimeNS</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>r</name><operator>.</operator><name>start_time_ns_</name></name></expr>;</return>
      </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// PyTorch profiler execution graph internal interface.</comment>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_add_execution_graph_observer"</literal></expr></argument>,
      <argument><expr><operator>&amp;</operator><name><name>torch</name><operator>::</operator><name>profiler</name><operator>::</operator><name>impl</name><operator>::</operator><name>addExecutionGraphObserver</name></name></expr></argument>,
      <argument><expr><call><name><name>py</name><operator>::</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"output_file_name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_remove_execution_graph_observer"</literal></expr></argument>,
      <argument><expr><operator>&amp;</operator><name><name>torch</name><operator>::</operator><name>profiler</name><operator>::</operator><name>impl</name><operator>::</operator><name>removeExecutionGraphObserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_enable_execution_graph_observer"</literal></expr></argument>,
      <argument><expr><operator>&amp;</operator><name><name>torch</name><operator>::</operator><name>profiler</name><operator>::</operator><name>impl</name><operator>::</operator><name>enableExecutionGraphObserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>def</name></name><argument_list>(
      <argument><expr><literal type="string">"_disable_execution_graph_observer"</literal></expr></argument>,
      <argument><expr><operator>&amp;</operator><name><name>torch</name><operator>::</operator><name>profiler</name><operator>::</operator><name>impl</name><operator>::</operator><name>disableExecutionGraphObserver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace profiler</comment>
}</block></namespace> <comment type="line">// namespace torch</comment>
</unit>
